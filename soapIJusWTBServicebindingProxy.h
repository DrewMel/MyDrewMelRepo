/* soapIJusWTBServicebindingProxy.h
   Generated by gSOAP 2.8.111 for .\testbench.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapIJusWTBServicebindingProxy_H
#define soapIJusWTBServicebindingProxy_H
#include "soapH.h"

    class SOAP_CMAC IJusWTBServicebindingProxy {
      public:
        /// Context to manage proxy IO and data
        struct soap *soap;
        /// flag indicating that this context is owned by this proxy and should be deleted by the destructor
        bool soap_own;
        /// Endpoint URL of service 'IJusWTBServicebindingProxy' (change as needed)
        const char *soap_endpoint;
        /// Variables globally declared in .\testbench.h, if any
        /// Construct a proxy with new managing context
        IJusWTBServicebindingProxy()
        {
            this->soap = soap_new();
            this->soap_own = true;
            IJusWTBServicebindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
        }
        /// Copy constructor
        //IJusWTBServicebindingProxy(const IJusWTBServicebindingProxy& rhs);
        /// Construct proxy given a shared managing context
        //IJusWTBServicebindingProxy(struct soap*);
        /// Construct proxy given a shared managing context and endpoint URL
        //IJusWTBServicebindingProxy(struct soap*, const char *soap_endpoint_url);
        /// Constructor taking an endpoint URL
        //IJusWTBServicebindingProxy(const char *soap_endpoint_url);
        /// Constructor taking input and output mode flags for the new managing context
        //IJusWTBServicebindingProxy(soap_mode iomode);
        /// Constructor taking endpoint URL and input and output mode flags for the new managing context
        //IJusWTBServicebindingProxy(const char *soap_endpoint_url, soap_mode iomode);
        /// Constructor taking input and output mode flags for the new managing context
        //IJusWTBServicebindingProxy(soap_mode imode, soap_mode omode);
        /// Destructor deletes deserialized data and its managing context, when the context was allocated by the constructor
        virtual ~IJusWTBServicebindingProxy();
        /// Initializer used by constructors
        virtual void IJusWTBServicebindingProxy_init(soap_mode imode, soap_mode omode);
        /// Return a copy that has a new managing context with the same engine state
        //virtual IJusWTBServicebindingProxy *copy();
        /// Copy assignment
        IJusWTBServicebindingProxy& operator=(const IJusWTBServicebindingProxy&);
        /// Delete all deserialized data (uses soap_destroy() and soap_end())
        virtual void destroy();
        /// Delete all deserialized data and reset to default
        virtual void reset();
        /// Disables and removes SOAP Header from message by setting soap->header = NULL
        virtual void soap_noheader();
        /// Get SOAP Header structure (i.e. soap->header, which is NULL when absent)
        virtual ::SOAP_ENV__Header *soap_header();
        /// Get SOAP Fault structure (i.e. soap->fault, which is NULL when absent)
        virtual ::SOAP_ENV__Fault *soap_fault();
        /// Get SOAP Fault subcode QName string (NULL when absent)
        virtual const char *soap_fault_subcode();
        /// Get SOAP Fault string/reason (NULL when absent)
        virtual const char *soap_fault_string();
        /// Get SOAP Fault detail XML string (NULL when absent)
        virtual const char *soap_fault_detail();
        /// Close connection (normally automatic, except for send_X ops)
        virtual int soap_close_socket();
        /// Force close connection (can kill a thread blocked on IO)
        virtual int soap_force_close_socket();
        /// Print fault
        virtual void soap_print_fault(FILE*);
    #ifndef WITH_LEAN
    #ifndef WITH_COMPAT
        /// Print fault to stream
        virtual void soap_stream_fault(std::ostream&);
    #endif
        /// Write fault to buffer
        virtual char *soap_sprint_fault(char *buf, size_t len);
    #endif
        //
        /// Web service synchronous operation 'GetTypeList' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        /// 
#define FOOGetTypeList      (0)
        virtual int GetTypeList(struct ns4__GetTypeListResponse &_param_1) { return this->GetTypeList(NULL, NULL, _param_1); }
        /// Web service synchronous operation 'GetTypeList' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetTypeList(const char *soap_endpoint_url, const char *soap_action, struct ns4__GetTypeListResponse &_param_1) { return this->send_GetTypeList(soap_endpoint_url, soap_action) || this->recv_GetTypeList(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetTypeList' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetTypeList(const char *soap_endpoint_url, const char *soap_action);
        /// Web service asynchronous operation 'recv_GetTypeList' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetTypeList(struct ns4__GetTypeListResponse &_param_1);
        //
#define FOONewMeasurement   (1)
        /// Web service synchronous operation 'NewMeasurement' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int NewMeasurement(int Bench, const std::string& TypeName, bool ArchiveData, struct ns4__NewMeasurementResponse &_param_1) { return this->NewMeasurement(NULL, NULL, Bench, TypeName, ArchiveData, _param_1); }
        /// Web service synchronous operation 'NewMeasurement' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int NewMeasurement(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TypeName, bool ArchiveData, struct ns4__NewMeasurementResponse &_param_1) { return this->send_NewMeasurement(soap_endpoint_url, soap_action, Bench, TypeName, ArchiveData) || this->recv_NewMeasurement(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_NewMeasurement' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_NewMeasurement(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TypeName, bool ArchiveData);
        /// Web service asynchronous operation 'recv_NewMeasurement' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_NewMeasurement(struct ns4__NewMeasurementResponse &_param_1);
        //
#define FOOGetTestParameters   (2)
        /// Web service synchronous operation 'GetTestParameters' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetTestParameters(int Bench, const std::string& TestName, struct ns4__GetTestParametersResponse &_param_1) { return this->GetTestParameters(NULL, NULL, Bench, TestName, _param_1); }
        /// Web service synchronous operation 'GetTestParameters' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, struct ns4__GetTestParametersResponse &_param_1) { return this->send_GetTestParameters(soap_endpoint_url, soap_action, Bench, TestName) || this->recv_GetTestParameters(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetTestParameters' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName);
        /// Web service asynchronous operation 'recv_GetTestParameters' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetTestParameters(struct ns4__GetTestParametersResponse &_param_1);
        //
#define FOOSetTestParameters   (3)
        /// Web service synchronous operation 'SetTestParameters' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetTestParameters(int Bench, const std::string& TestName, ns3__TTestParameters *TestParameters, bool CreateTest, struct ns4__SetTestParametersResponse &_param_1) { return this->SetTestParameters(NULL, NULL, Bench, TestName, TestParameters, CreateTest, _param_1); }
        /// Web service synchronous operation 'SetTestParameters' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, ns3__TTestParameters *TestParameters, bool CreateTest, struct ns4__SetTestParametersResponse &_param_1) { return this->send_SetTestParameters(soap_endpoint_url, soap_action, Bench, TestName, TestParameters, CreateTest) || this->recv_SetTestParameters(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetTestParameters' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, ns3__TTestParameters *TestParameters, bool CreateTest);
        /// Web service asynchronous operation 'recv_SetTestParameters' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetTestParameters(struct ns4__SetTestParametersResponse &_param_1);
        //
#define FOOGetPressTestParameters   (4)
        /// Web service synchronous operation 'GetPressTestParameters' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetPressTestParameters(int Bench, const std::string& TestName, struct ns4__GetPressTestParametersResponse &_param_1) { return this->GetPressTestParameters(NULL, NULL, Bench, TestName, _param_1); }
        /// Web service synchronous operation 'GetPressTestParameters' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetPressTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, struct ns4__GetPressTestParametersResponse &_param_1) { return this->send_GetPressTestParameters(soap_endpoint_url, soap_action, Bench, TestName) || this->recv_GetPressTestParameters(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetPressTestParameters' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetPressTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName);
        /// Web service asynchronous operation 'recv_GetPressTestParameters' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetPressTestParameters(struct ns4__GetPressTestParametersResponse &_param_1);
        //
#define FOOSetPressTestParameters   (5)
        /// Web service synchronous operation 'SetPressTestParameters' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetPressTestParameters(int Bench, const std::string& TestName, ns3__TPressTestParameters *TestParameters, bool CreateTest, struct ns4__SetPressTestParametersResponse &_param_1) { return this->SetPressTestParameters(NULL, NULL, Bench, TestName, TestParameters, CreateTest, _param_1); }
        /// Web service synchronous operation 'SetPressTestParameters' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetPressTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, ns3__TPressTestParameters *TestParameters, bool CreateTest, struct ns4__SetPressTestParametersResponse &_param_1) { return this->send_SetPressTestParameters(soap_endpoint_url, soap_action, Bench, TestName, TestParameters, CreateTest) || this->recv_SetPressTestParameters(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetPressTestParameters' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetPressTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, ns3__TPressTestParameters *TestParameters, bool CreateTest);
        /// Web service asynchronous operation 'recv_SetPressTestParameters' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetPressTestParameters(struct ns4__SetPressTestParametersResponse &_param_1);
        //
#define FOOStart   (6)
        /// Web service synchronous operation 'Start' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int Start(int Bench, const std::string& TestName, ns3__TWaitEvents *WaitEvents, struct ns4__StartResponse &_param_1) { return this->Start(NULL, NULL, Bench, TestName, WaitEvents, _param_1); }
        /// Web service synchronous operation 'Start' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int Start(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, ns3__TWaitEvents *WaitEvents, struct ns4__StartResponse &_param_1) { return this->send_Start(soap_endpoint_url, soap_action, Bench, TestName, WaitEvents) || this->recv_Start(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_Start' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_Start(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, ns3__TWaitEvents *WaitEvents);
        /// Web service asynchronous operation 'recv_Start' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_Start(struct ns4__StartResponse &_param_1);
        //
#define FOOStop   (7)
        /// Web service synchronous operation 'Stop' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int Stop(int Bench, struct ns4__StopResponse &_param_1) { return this->Stop(NULL, NULL, Bench, _param_1); }
        /// Web service synchronous operation 'Stop' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int Stop(const char *soap_endpoint_url, const char *soap_action, int Bench, struct ns4__StopResponse &_param_1) { return this->send_Stop(soap_endpoint_url, soap_action, Bench) || this->recv_Stop(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_Stop' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_Stop(const char *soap_endpoint_url, const char *soap_action, int Bench);
        /// Web service asynchronous operation 'recv_Stop' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_Stop(struct ns4__StopResponse &_param_1);
        //
#define FOOContinue   (8)
        /// Web service synchronous operation 'Continue' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int Continue(int Bench, struct ns4__ContinueResponse &_param_1) { return this->Continue(NULL, NULL, Bench, _param_1); }
        /// Web service synchronous operation 'Continue' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int Continue(const char *soap_endpoint_url, const char *soap_action, int Bench, struct ns4__ContinueResponse &_param_1) { return this->send_Continue(soap_endpoint_url, soap_action, Bench) || this->recv_Continue(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_Continue' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_Continue(const char *soap_endpoint_url, const char *soap_action, int Bench);
        /// Web service asynchronous operation 'recv_Continue' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_Continue(struct ns4__ContinueResponse &_param_1);
        //
#define FOOGetStatus   (9)
        /// Web service synchronous operation 'GetStatus' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetStatus(int Bench, struct ns4__GetStatusResponse &_param_1) { return this->GetStatus(NULL, NULL, Bench, _param_1); }
        /// Web service synchronous operation 'GetStatus' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetStatus(const char *soap_endpoint_url, const char *soap_action, int Bench, struct ns4__GetStatusResponse &_param_1) { return this->send_GetStatus(soap_endpoint_url, soap_action, Bench) || this->recv_GetStatus(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetStatus' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetStatus(const char *soap_endpoint_url, const char *soap_action, int Bench);
        /// Web service asynchronous operation 'recv_GetStatus' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetStatus(struct ns4__GetStatusResponse &_param_1);
        //
#define FOOSetMetersData   (10)
        /// Web service synchronous operation 'SetMetersData' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetMetersData(int Bench, TMetersData *MetersData, struct ns4__SetMetersDataResponse &_param_1) { return this->SetMetersData(NULL, NULL, Bench, MetersData, _param_1); }
        /// Web service synchronous operation 'SetMetersData' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetMetersData(const char *soap_endpoint_url, const char *soap_action, int Bench, TMetersData *MetersData, struct ns4__SetMetersDataResponse &_param_1) { return this->send_SetMetersData(soap_endpoint_url, soap_action, Bench, MetersData) || this->recv_SetMetersData(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetMetersData' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetMetersData(const char *soap_endpoint_url, const char *soap_action, int Bench, TMetersData *MetersData);
        /// Web service asynchronous operation 'recv_SetMetersData' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetMetersData(struct ns4__SetMetersDataResponse &_param_1);
        //
#define FOOSetMetersData   (11)
        /// Web service synchronous operation 'GetMetersData' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetMetersData(int Bench, TIntegerDynArray *MetersPos, struct ns4__GetMetersDataResponse &_param_1) { return this->GetMetersData(NULL, NULL, Bench, MetersPos, _param_1); }
        /// Web service synchronous operation 'GetMetersData' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetMetersData(const char *soap_endpoint_url, const char *soap_action, int Bench, TIntegerDynArray *MetersPos, struct ns4__GetMetersDataResponse &_param_1) { return this->send_GetMetersData(soap_endpoint_url, soap_action, Bench, MetersPos) || this->recv_GetMetersData(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetMetersData' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetMetersData(const char *soap_endpoint_url, const char *soap_action, int Bench, TIntegerDynArray *MetersPos);
        /// Web service asynchronous operation 'recv_GetMetersData' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetMetersData(struct ns4__GetMetersDataResponse &_param_1);
        //
#define FOOGetMeterData   (12)
        /// Web service synchronous operation 'GetMeterData' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetMeterData(int Bench, int MeterPos, struct ns4__GetMeterDataResponse &_param_1) { return this->GetMeterData(NULL, NULL, Bench, MeterPos, _param_1); }
        /// Web service synchronous operation 'GetMeterData' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetMeterData(const char *soap_endpoint_url, const char *soap_action, int Bench, int MeterPos, struct ns4__GetMeterDataResponse &_param_1) { return this->send_GetMeterData(soap_endpoint_url, soap_action, Bench, MeterPos) || this->recv_GetMeterData(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetMeterData' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetMeterData(const char *soap_endpoint_url, const char *soap_action, int Bench, int MeterPos);
        /// Web service asynchronous operation 'recv_GetMeterData' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetMeterData(struct ns4__GetMeterDataResponse &_param_1);
        //
#define FOOSetMeterIndications   (13)
        /// Web service synchronous operation 'SetMeterIndications' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetMeterIndications(int Bench, const std::string& TestName, TMeterIndications *MeterIndications, struct ns4__SetMeterIndicationsResponse &_param_1) { return this->SetMeterIndications(NULL, NULL, Bench, TestName, MeterIndications, _param_1); }
        /// Web service synchronous operation 'SetMeterIndications' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetMeterIndications(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, TMeterIndications *MeterIndications, struct ns4__SetMeterIndicationsResponse &_param_1) { return this->send_SetMeterIndications(soap_endpoint_url, soap_action, Bench, TestName, MeterIndications) || this->recv_SetMeterIndications(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetMeterIndications' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetMeterIndications(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, TMeterIndications *MeterIndications);
        /// Web service asynchronous operation 'recv_SetMeterIndications' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetMeterIndications(struct ns4__SetMeterIndicationsResponse &_param_1);
        //
#define FOOGetMeterPositions   (14)
        /// Web service synchronous operation 'GetMeterPositions' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetMeterPositions(int Bench, struct ns4__GetMeterPositionsResponse &_param_1) { return this->GetMeterPositions(NULL, NULL, Bench, _param_1); }
        /// Web service synchronous operation 'GetMeterPositions' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetMeterPositions(const char *soap_endpoint_url, const char *soap_action, int Bench, struct ns4__GetMeterPositionsResponse &_param_1) { return this->send_GetMeterPositions(soap_endpoint_url, soap_action, Bench) || this->recv_GetMeterPositions(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetMeterPositions' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetMeterPositions(const char *soap_endpoint_url, const char *soap_action, int Bench);
        /// Web service asynchronous operation 'recv_GetMeterPositions' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetMeterPositions(struct ns4__GetMeterPositionsResponse &_param_1);
        //
#define FOOGetMeasurementData   (15)
        /// Web service synchronous operation 'GetMeasurementData' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetMeasurementData(int Bench, struct ns4__GetMeasurementDataResponse &_param_1) { return this->GetMeasurementData(NULL, NULL, Bench, _param_1); }
        /// Web service synchronous operation 'GetMeasurementData' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetMeasurementData(const char *soap_endpoint_url, const char *soap_action, int Bench, struct ns4__GetMeasurementDataResponse &_param_1) { return this->send_GetMeasurementData(soap_endpoint_url, soap_action, Bench) || this->recv_GetMeasurementData(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetMeasurementData' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetMeasurementData(const char *soap_endpoint_url, const char *soap_action, int Bench);
        /// Web service asynchronous operation 'recv_GetMeasurementData' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetMeasurementData(struct ns4__GetMeasurementDataResponse &_param_1);
        //
#define FOOGetTestResults   (16)
        /// Web service synchronous operation 'GetTestResults' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetTestResults(int Bench, const std::string& TestName, TIntegerDynArray *MetersPos, struct ns4__GetTestResultsResponse &_param_1) { return this->GetTestResults(NULL, NULL, Bench, TestName, MetersPos, _param_1); }
        /// Web service synchronous operation 'GetTestResults' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetTestResults(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, TIntegerDynArray *MetersPos, struct ns4__GetTestResultsResponse &_param_1) { return this->send_GetTestResults(soap_endpoint_url, soap_action, Bench, TestName, MetersPos) || this->recv_GetTestResults(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetTestResults' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetTestResults(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, TIntegerDynArray *MetersPos);
        /// Web service asynchronous operation 'recv_GetTestResults' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetTestResults(struct ns4__GetTestResultsResponse &_param_1);
        //
#define FOOGetMeterResult   (17)
        /// Web service synchronous operation 'GetMeterResult' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetMeterResult(int Bench, const std::string& TestName, int MeterPos, struct ns4__GetMeterResultResponse &_param_1) { return this->GetMeterResult(NULL, NULL, Bench, TestName, MeterPos, _param_1); }
        /// Web service synchronous operation 'GetMeterResult' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetMeterResult(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, int MeterPos, struct ns4__GetMeterResultResponse &_param_1) { return this->send_GetMeterResult(soap_endpoint_url, soap_action, Bench, TestName, MeterPos) || this->recv_GetMeterResult(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetMeterResult' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetMeterResult(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, int MeterPos);
        /// Web service asynchronous operation 'recv_GetMeterResult' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetMeterResult(struct ns4__GetMeterResultResponse &_param_1);
        //
#define FOOGetTestResult   (18)
        /// Web service synchronous operation 'GetTestResult' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetTestResult(int Bench, const std::string& TestName, struct ns4__GetTestResultResponse &_param_1) { return this->GetTestResult(NULL, NULL, Bench, TestName, _param_1); }
        /// Web service synchronous operation 'GetTestResult' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetTestResult(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, struct ns4__GetTestResultResponse &_param_1) { return this->send_GetTestResult(soap_endpoint_url, soap_action, Bench, TestName) || this->recv_GetTestResult(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetTestResult' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetTestResult(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName);
        /// Web service asynchronous operation 'recv_GetTestResult' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetTestResult(struct ns4__GetTestResultResponse &_param_1);
        //
#define FOOGetPressTestResult   (19)
        /// Web service synchronous operation 'GetPressTestResult' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetPressTestResult(int Bench, const std::string& TestName, struct ns4__GetPressTestResultResponse &_param_1) { return this->GetPressTestResult(NULL, NULL, Bench, TestName, _param_1); }
        /// Web service synchronous operation 'GetPressTestResult' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetPressTestResult(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, struct ns4__GetPressTestResultResponse &_param_1) { return this->send_GetPressTestResult(soap_endpoint_url, soap_action, Bench, TestName) || this->recv_GetPressTestResult(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetPressTestResult' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetPressTestResult(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName);
        /// Web service asynchronous operation 'recv_GetPressTestResult' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetPressTestResult(struct ns4__GetPressTestResultResponse &_param_1);
        //
#define FOOGetTestConfiguration   (20)
        /// Web service synchronous operation 'GetTestConfiguration' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int GetTestConfiguration(int Bench, const std::string& TestName, std::string &return_) { return this->GetTestConfiguration(NULL, NULL, Bench, TestName, return_); }
        /// Web service synchronous operation 'GetTestConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int GetTestConfiguration(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, std::string &return_) { return this->send_GetTestConfiguration(soap_endpoint_url, soap_action, Bench, TestName) || this->recv_GetTestConfiguration(return_) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_GetTestConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_GetTestConfiguration(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName);
        /// Web service asynchronous operation 'recv_GetTestConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_GetTestConfiguration(std::string &return_);
        //
#define FOOSetTestConfiguration   (21)
        /// Web service synchronous operation 'SetTestConfiguration' with default endpoint and default SOAP Action header, returns SOAP_OK or error code
        virtual int SetTestConfiguration(int Bench, const std::string& TestName, const std::string& Configuration, struct ns4__SetTestConfigurationResponse &_param_1) { return this->SetTestConfiguration(NULL, NULL, Bench, TestName, Configuration, _param_1); }
        /// Web service synchronous operation 'SetTestConfiguration' to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int SetTestConfiguration(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, const std::string& Configuration, struct ns4__SetTestConfigurationResponse &_param_1) { return this->send_SetTestConfiguration(soap_endpoint_url, soap_action, Bench, TestName, Configuration) || this->recv_SetTestConfiguration(_param_1) ? this->soap->error : SOAP_OK; }
        /// Web service asynchronous operation 'send_SetTestConfiguration' to send a request message to the specified endpoint and SOAP Action header, returns SOAP_OK or error code
        virtual int send_SetTestConfiguration(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, const std::string& Configuration);
        /// Web service asynchronous operation 'recv_SetTestConfiguration' to receive a response message from the connected endpoint, returns SOAP_OK or error code
        virtual int recv_SetTestConfiguration(struct ns4__SetTestConfigurationResponse &_param_1);
    };
#endif
