/* soapH.h
   Generated by gSOAP 2.8.111 for .\testbench.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TPulseCheck_DEFINED
#define SOAP_TYPE_ns3__TPulseCheck_DEFINED

inline void soap_default_ns3__TPulseCheck(struct soap *soap, enum ns3__TPulseCheck *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__TPulseCheck
	*a = SOAP_DEFAULT_ns3__TPulseCheck;
#else
	*a = (enum ns3__TPulseCheck)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TPulseCheck(struct soap*, const char*, int, const enum ns3__TPulseCheck *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__TPulseCheck2s(struct soap*, enum ns3__TPulseCheck);
SOAP_FMAC3 enum ns3__TPulseCheck * SOAP_FMAC4 soap_in_ns3__TPulseCheck(struct soap*, const char*, enum ns3__TPulseCheck *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__TPulseCheck(struct soap*, const char*, enum ns3__TPulseCheck *);

SOAP_FMAC3 enum ns3__TPulseCheck * SOAP_FMAC4 soap_new_ns3__TPulseCheck(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__TPulseCheck(struct soap*, const enum ns3__TPulseCheck *, const char*, const char*);

inline int soap_write_ns3__TPulseCheck(struct soap *soap, enum ns3__TPulseCheck const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns3__TPulseCheck(soap, p, "ns3:TPulseCheck", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__TPulseCheck(struct soap *soap, const char *URL, enum ns3__TPulseCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TPulseCheck(soap, p, "ns3:TPulseCheck", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TPulseCheck(struct soap *soap, const char *URL, enum ns3__TPulseCheck const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TPulseCheck(soap, p, "ns3:TPulseCheck", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TPulseCheck(struct soap *soap, const char *URL, enum ns3__TPulseCheck const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TPulseCheck(soap, p, "ns3:TPulseCheck", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__TPulseCheck * SOAP_FMAC4 soap_get_ns3__TPulseCheck(struct soap*, enum ns3__TPulseCheck *, const char*, const char*);

inline int soap_read_ns3__TPulseCheck(struct soap *soap, enum ns3__TPulseCheck *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns3__TPulseCheck(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TPulseCheck(struct soap *soap, const char *URL, enum ns3__TPulseCheck *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TPulseCheck(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TPulseCheck(struct soap *soap, enum ns3__TPulseCheck *p)
{
	if (::soap_read_ns3__TPulseCheck(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TStatusCode_DEFINED
#define SOAP_TYPE_ns3__TStatusCode_DEFINED

inline void soap_default_ns3__TStatusCode(struct soap *soap, enum ns3__TStatusCode *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__TStatusCode
	*a = SOAP_DEFAULT_ns3__TStatusCode;
#else
	*a = (enum ns3__TStatusCode)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TStatusCode(struct soap*, const char*, int, const enum ns3__TStatusCode *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__TStatusCode2s(struct soap*, enum ns3__TStatusCode);
SOAP_FMAC3 enum ns3__TStatusCode * SOAP_FMAC4 soap_in_ns3__TStatusCode(struct soap*, const char*, enum ns3__TStatusCode *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__TStatusCode(struct soap*, const char*, enum ns3__TStatusCode *);

SOAP_FMAC3 enum ns3__TStatusCode * SOAP_FMAC4 soap_new_ns3__TStatusCode(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__TStatusCode(struct soap*, const enum ns3__TStatusCode *, const char*, const char*);

inline int soap_write_ns3__TStatusCode(struct soap *soap, enum ns3__TStatusCode const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns3__TStatusCode(soap, p, "ns3:TStatusCode", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__TStatusCode(struct soap *soap, const char *URL, enum ns3__TStatusCode const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TStatusCode(soap, p, "ns3:TStatusCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TStatusCode(struct soap *soap, const char *URL, enum ns3__TStatusCode const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TStatusCode(soap, p, "ns3:TStatusCode", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TStatusCode(struct soap *soap, const char *URL, enum ns3__TStatusCode const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TStatusCode(soap, p, "ns3:TStatusCode", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__TStatusCode * SOAP_FMAC4 soap_get_ns3__TStatusCode(struct soap*, enum ns3__TStatusCode *, const char*, const char*);

inline int soap_read_ns3__TStatusCode(struct soap *soap, enum ns3__TStatusCode *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns3__TStatusCode(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TStatusCode(struct soap *soap, const char *URL, enum ns3__TStatusCode *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TStatusCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TStatusCode(struct soap *soap, enum ns3__TStatusCode *p)
{
	if (::soap_read_ns3__TStatusCode(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TMeterIndicationMethod_DEFINED
#define SOAP_TYPE_ns3__TMeterIndicationMethod_DEFINED

inline void soap_default_ns3__TMeterIndicationMethod(struct soap *soap, enum ns3__TMeterIndicationMethod *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__TMeterIndicationMethod
	*a = SOAP_DEFAULT_ns3__TMeterIndicationMethod;
#else
	*a = (enum ns3__TMeterIndicationMethod)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TMeterIndicationMethod(struct soap*, const char*, int, const enum ns3__TMeterIndicationMethod *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__TMeterIndicationMethod2s(struct soap*, enum ns3__TMeterIndicationMethod);
SOAP_FMAC3 enum ns3__TMeterIndicationMethod * SOAP_FMAC4 soap_in_ns3__TMeterIndicationMethod(struct soap*, const char*, enum ns3__TMeterIndicationMethod *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__TMeterIndicationMethod(struct soap*, const char*, enum ns3__TMeterIndicationMethod *);

SOAP_FMAC3 enum ns3__TMeterIndicationMethod * SOAP_FMAC4 soap_new_ns3__TMeterIndicationMethod(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__TMeterIndicationMethod(struct soap*, const enum ns3__TMeterIndicationMethod *, const char*, const char*);

inline int soap_write_ns3__TMeterIndicationMethod(struct soap *soap, enum ns3__TMeterIndicationMethod const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns3__TMeterIndicationMethod(soap, p, "ns3:TMeterIndicationMethod", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__TMeterIndicationMethod(struct soap *soap, const char *URL, enum ns3__TMeterIndicationMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TMeterIndicationMethod(soap, p, "ns3:TMeterIndicationMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TMeterIndicationMethod(struct soap *soap, const char *URL, enum ns3__TMeterIndicationMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TMeterIndicationMethod(soap, p, "ns3:TMeterIndicationMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TMeterIndicationMethod(struct soap *soap, const char *URL, enum ns3__TMeterIndicationMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TMeterIndicationMethod(soap, p, "ns3:TMeterIndicationMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__TMeterIndicationMethod * SOAP_FMAC4 soap_get_ns3__TMeterIndicationMethod(struct soap*, enum ns3__TMeterIndicationMethod *, const char*, const char*);

inline int soap_read_ns3__TMeterIndicationMethod(struct soap *soap, enum ns3__TMeterIndicationMethod *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns3__TMeterIndicationMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TMeterIndicationMethod(struct soap *soap, const char *URL, enum ns3__TMeterIndicationMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TMeterIndicationMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TMeterIndicationMethod(struct soap *soap, enum ns3__TMeterIndicationMethod *p)
{
	if (::soap_read_ns3__TMeterIndicationMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TProofMethod_DEFINED
#define SOAP_TYPE_ns3__TProofMethod_DEFINED

inline void soap_default_ns3__TProofMethod(struct soap *soap, enum ns3__TProofMethod *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__TProofMethod
	*a = SOAP_DEFAULT_ns3__TProofMethod;
#else
	*a = (enum ns3__TProofMethod)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TProofMethod(struct soap*, const char*, int, const enum ns3__TProofMethod *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__TProofMethod2s(struct soap*, enum ns3__TProofMethod);
SOAP_FMAC3 enum ns3__TProofMethod * SOAP_FMAC4 soap_in_ns3__TProofMethod(struct soap*, const char*, enum ns3__TProofMethod *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__TProofMethod(struct soap*, const char*, enum ns3__TProofMethod *);

SOAP_FMAC3 enum ns3__TProofMethod * SOAP_FMAC4 soap_new_ns3__TProofMethod(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__TProofMethod(struct soap*, const enum ns3__TProofMethod *, const char*, const char*);

inline int soap_write_ns3__TProofMethod(struct soap *soap, enum ns3__TProofMethod const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns3__TProofMethod(soap, p, "ns3:TProofMethod", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__TProofMethod(struct soap *soap, const char *URL, enum ns3__TProofMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TProofMethod(soap, p, "ns3:TProofMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TProofMethod(struct soap *soap, const char *URL, enum ns3__TProofMethod const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TProofMethod(soap, p, "ns3:TProofMethod", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TProofMethod(struct soap *soap, const char *URL, enum ns3__TProofMethod const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TProofMethod(soap, p, "ns3:TProofMethod", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__TProofMethod * SOAP_FMAC4 soap_get_ns3__TProofMethod(struct soap*, enum ns3__TProofMethod *, const char*, const char*);

inline int soap_read_ns3__TProofMethod(struct soap *soap, enum ns3__TProofMethod *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns3__TProofMethod(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TProofMethod(struct soap *soap, const char *URL, enum ns3__TProofMethod *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TProofMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TProofMethod(struct soap *soap, enum ns3__TProofMethod *p)
{
	if (::soap_read_ns3__TProofMethod(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TResult_DEFINED
#define SOAP_TYPE_ns3__TResult_DEFINED

inline void soap_default_ns3__TResult(struct soap *soap, enum ns3__TResult *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_ns3__TResult
	*a = SOAP_DEFAULT_ns3__TResult;
#else
	*a = (enum ns3__TResult)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TResult(struct soap*, const char*, int, const enum ns3__TResult *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__TResult2s(struct soap*, enum ns3__TResult);
SOAP_FMAC3 enum ns3__TResult * SOAP_FMAC4 soap_in_ns3__TResult(struct soap*, const char*, enum ns3__TResult *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__TResult(struct soap*, const char*, enum ns3__TResult *);

SOAP_FMAC3 enum ns3__TResult * SOAP_FMAC4 soap_new_ns3__TResult(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__TResult(struct soap*, const enum ns3__TResult *, const char*, const char*);

inline int soap_write_ns3__TResult(struct soap *soap, enum ns3__TResult const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_ns3__TResult(soap, p, "ns3:TResult", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_ns3__TResult(struct soap *soap, const char *URL, enum ns3__TResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TResult(soap, p, "ns3:TResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TResult(struct soap *soap, const char *URL, enum ns3__TResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TResult(soap, p, "ns3:TResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TResult(struct soap *soap, const char *URL, enum ns3__TResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_ns3__TResult(soap, p, "ns3:TResult", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 enum ns3__TResult * SOAP_FMAC4 soap_get_ns3__TResult(struct soap*, enum ns3__TResult *, const char*, const char*);

inline int soap_read_ns3__TResult(struct soap *soap, enum ns3__TResult *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_ns3__TResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TResult(struct soap *soap, const char *URL, enum ns3__TResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TResult(struct soap *soap, enum ns3__TResult *p)
{
	if (::soap_read_ns3__TResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TPressTestResult_DEFINED
#define SOAP_TYPE_ns3__TPressTestResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TPressTestResult(struct soap*, const char*, int, const ns3__TPressTestResult *, const char*);
SOAP_FMAC3 ns3__TPressTestResult * SOAP_FMAC4 soap_in_ns3__TPressTestResult(struct soap*, const char*, ns3__TPressTestResult *, const char*);
SOAP_FMAC1 ns3__TPressTestResult * SOAP_FMAC2 soap_instantiate_ns3__TPressTestResult(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TPressTestResult * soap_new_ns3__TPressTestResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TPressTestResult(soap, n, NULL, NULL, NULL);
}

inline ns3__TPressTestResult * soap_new_req_ns3__TPressTestResult(
	struct soap *soap,
	bool Done,
	const std::string& TestName,
	double StartPress,
	double PressDrop,
	bool Passed)
{
	ns3__TPressTestResult *_p = ::soap_new_ns3__TPressTestResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TPressTestResult::Done = Done;
		_p->ns3__TPressTestResult::TestName = TestName;
		_p->ns3__TPressTestResult::StartPress = StartPress;
		_p->ns3__TPressTestResult::PressDrop = PressDrop;
		_p->ns3__TPressTestResult::Passed = Passed;
	}
	return _p;
}

inline ns3__TPressTestResult * soap_new_set_ns3__TPressTestResult(
	struct soap *soap,
	bool Done,
	const std::string& TestName,
	double StartPress,
	double PressDrop,
	bool Passed)
{
	ns3__TPressTestResult *_p = ::soap_new_ns3__TPressTestResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TPressTestResult::Done = Done;
		_p->ns3__TPressTestResult::TestName = TestName;
		_p->ns3__TPressTestResult::StartPress = StartPress;
		_p->ns3__TPressTestResult::PressDrop = PressDrop;
		_p->ns3__TPressTestResult::Passed = Passed;
	}
	return _p;
}

inline int soap_write_ns3__TPressTestResult(struct soap *soap, ns3__TPressTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TPressTestResult", p->soap_type() == SOAP_TYPE_ns3__TPressTestResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TPressTestResult(struct soap *soap, const char *URL, ns3__TPressTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TPressTestResult", p->soap_type() == SOAP_TYPE_ns3__TPressTestResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TPressTestResult(struct soap *soap, const char *URL, ns3__TPressTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TPressTestResult", p->soap_type() == SOAP_TYPE_ns3__TPressTestResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TPressTestResult(struct soap *soap, const char *URL, ns3__TPressTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TPressTestResult", p->soap_type() == SOAP_TYPE_ns3__TPressTestResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TPressTestResult * SOAP_FMAC4 soap_get_ns3__TPressTestResult(struct soap*, ns3__TPressTestResult *, const char*, const char*);

inline int soap_read_ns3__TPressTestResult(struct soap *soap, ns3__TPressTestResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TPressTestResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TPressTestResult(struct soap *soap, const char *URL, ns3__TPressTestResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TPressTestResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TPressTestResult(struct soap *soap, ns3__TPressTestResult *p)
{
	if (::soap_read_ns3__TPressTestResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TTestResult_DEFINED
#define SOAP_TYPE_ns3__TTestResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TTestResult(struct soap*, const char*, int, const ns3__TTestResult *, const char*);
SOAP_FMAC3 ns3__TTestResult * SOAP_FMAC4 soap_in_ns3__TTestResult(struct soap*, const char*, ns3__TTestResult *, const char*);
SOAP_FMAC1 ns3__TTestResult * SOAP_FMAC2 soap_instantiate_ns3__TTestResult(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TTestResult * soap_new_ns3__TTestResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TTestResult(soap, n, NULL, NULL, NULL);
}

inline ns3__TTestResult * soap_new_req_ns3__TTestResult(
	struct soap *soap,
	bool Done,
	const std::string& TestName,
	double Flowrate,
	double Weight,
	double InletTemp,
	double OutletTemp,
	double InletPressure,
	double OutletPressure,
	double Lambda,
	double MIDTemp,
	double MIDPulseConst,
	double MIDVolume,
	double MIDError,
	double Duration,
	double AdditiveLambda)
{
	ns3__TTestResult *_p = ::soap_new_ns3__TTestResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TTestResult::Done = Done;
		_p->ns3__TTestResult::TestName = TestName;
		_p->ns3__TTestResult::Flowrate = Flowrate;
		_p->ns3__TTestResult::Weight = Weight;
		_p->ns3__TTestResult::InletTemp = InletTemp;
		_p->ns3__TTestResult::OutletTemp = OutletTemp;
		_p->ns3__TTestResult::InletPressure = InletPressure;
		_p->ns3__TTestResult::OutletPressure = OutletPressure;
		_p->ns3__TTestResult::Lambda = Lambda;
		_p->ns3__TTestResult::MIDTemp = MIDTemp;
		_p->ns3__TTestResult::MIDPulseConst = MIDPulseConst;
		_p->ns3__TTestResult::MIDVolume = MIDVolume;
		_p->ns3__TTestResult::MIDError = MIDError;
		_p->ns3__TTestResult::Duration = Duration;
		_p->ns3__TTestResult::AdditiveLambda = AdditiveLambda;
	}
	return _p;
}

inline ns3__TTestResult * soap_new_set_ns3__TTestResult(
	struct soap *soap,
	bool Done,
	const std::string& TestName,
	double Flowrate,
	double Weight,
	double InletTemp,
	double OutletTemp,
	double InletPressure,
	double OutletPressure,
	double Lambda,
	double MIDTemp,
	double MIDPulseConst,
	double MIDVolume,
	double MIDError,
	double Duration,
	double AdditiveLambda)
{
	ns3__TTestResult *_p = ::soap_new_ns3__TTestResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TTestResult::Done = Done;
		_p->ns3__TTestResult::TestName = TestName;
		_p->ns3__TTestResult::Flowrate = Flowrate;
		_p->ns3__TTestResult::Weight = Weight;
		_p->ns3__TTestResult::InletTemp = InletTemp;
		_p->ns3__TTestResult::OutletTemp = OutletTemp;
		_p->ns3__TTestResult::InletPressure = InletPressure;
		_p->ns3__TTestResult::OutletPressure = OutletPressure;
		_p->ns3__TTestResult::Lambda = Lambda;
		_p->ns3__TTestResult::MIDTemp = MIDTemp;
		_p->ns3__TTestResult::MIDPulseConst = MIDPulseConst;
		_p->ns3__TTestResult::MIDVolume = MIDVolume;
		_p->ns3__TTestResult::MIDError = MIDError;
		_p->ns3__TTestResult::Duration = Duration;
		_p->ns3__TTestResult::AdditiveLambda = AdditiveLambda;
	}
	return _p;
}

inline int soap_write_ns3__TTestResult(struct soap *soap, ns3__TTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestResult", p->soap_type() == SOAP_TYPE_ns3__TTestResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TTestResult(struct soap *soap, const char *URL, ns3__TTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestResult", p->soap_type() == SOAP_TYPE_ns3__TTestResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TTestResult(struct soap *soap, const char *URL, ns3__TTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestResult", p->soap_type() == SOAP_TYPE_ns3__TTestResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TTestResult(struct soap *soap, const char *URL, ns3__TTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestResult", p->soap_type() == SOAP_TYPE_ns3__TTestResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TTestResult * SOAP_FMAC4 soap_get_ns3__TTestResult(struct soap*, ns3__TTestResult *, const char*, const char*);

inline int soap_read_ns3__TTestResult(struct soap *soap, ns3__TTestResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TTestResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TTestResult(struct soap *soap, const char *URL, ns3__TTestResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TTestResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TTestResult(struct soap *soap, ns3__TTestResult *p)
{
	if (::soap_read_ns3__TTestResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TMeterResult_DEFINED
#define SOAP_TYPE_ns3__TMeterResult_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TMeterResult(struct soap*, const char*, int, const ns3__TMeterResult *, const char*);
SOAP_FMAC3 ns3__TMeterResult * SOAP_FMAC4 soap_in_ns3__TMeterResult(struct soap*, const char*, ns3__TMeterResult *, const char*);
SOAP_FMAC1 ns3__TMeterResult * SOAP_FMAC2 soap_instantiate_ns3__TMeterResult(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TMeterResult * soap_new_ns3__TMeterResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TMeterResult(soap, n, NULL, NULL, NULL);
}

inline ns3__TMeterResult * soap_new_req_ns3__TMeterResult(
	struct soap *soap,
	int Position,
	double Temperature,
	double Pressure,
	double Density,
	int GatedMIDPulses,
	double NominalVolume,
	double Pulses,
	double PulseConst,
	double StartVolume,
	double StopVolume,
	double IndicatedVolume,
	double Error,
	enum ns3__TPulseCheck PulseCheck,
	bool Passed)
{
	ns3__TMeterResult *_p = ::soap_new_ns3__TMeterResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TMeterResult::Position = Position;
		_p->ns3__TMeterResult::Temperature = Temperature;
		_p->ns3__TMeterResult::Pressure = Pressure;
		_p->ns3__TMeterResult::Density = Density;
		_p->ns3__TMeterResult::GatedMIDPulses = GatedMIDPulses;
		_p->ns3__TMeterResult::NominalVolume = NominalVolume;
		_p->ns3__TMeterResult::Pulses = Pulses;
		_p->ns3__TMeterResult::PulseConst = PulseConst;
		_p->ns3__TMeterResult::StartVolume = StartVolume;
		_p->ns3__TMeterResult::StopVolume = StopVolume;
		_p->ns3__TMeterResult::IndicatedVolume = IndicatedVolume;
		_p->ns3__TMeterResult::Error = Error;
		_p->ns3__TMeterResult::PulseCheck = PulseCheck;
		_p->ns3__TMeterResult::Passed = Passed;
	}
	return _p;
}

inline ns3__TMeterResult * soap_new_set_ns3__TMeterResult(
	struct soap *soap,
	int Position,
	double Temperature,
	double Pressure,
	double Density,
	int GatedMIDPulses,
	double NominalVolume,
	double Pulses,
	double PulseConst,
	double StartVolume,
	double StopVolume,
	double IndicatedVolume,
	double Error,
	enum ns3__TPulseCheck PulseCheck,
	bool Passed)
{
	ns3__TMeterResult *_p = ::soap_new_ns3__TMeterResult(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TMeterResult::Position = Position;
		_p->ns3__TMeterResult::Temperature = Temperature;
		_p->ns3__TMeterResult::Pressure = Pressure;
		_p->ns3__TMeterResult::Density = Density;
		_p->ns3__TMeterResult::GatedMIDPulses = GatedMIDPulses;
		_p->ns3__TMeterResult::NominalVolume = NominalVolume;
		_p->ns3__TMeterResult::Pulses = Pulses;
		_p->ns3__TMeterResult::PulseConst = PulseConst;
		_p->ns3__TMeterResult::StartVolume = StartVolume;
		_p->ns3__TMeterResult::StopVolume = StopVolume;
		_p->ns3__TMeterResult::IndicatedVolume = IndicatedVolume;
		_p->ns3__TMeterResult::Error = Error;
		_p->ns3__TMeterResult::PulseCheck = PulseCheck;
		_p->ns3__TMeterResult::Passed = Passed;
	}
	return _p;
}

inline int soap_write_ns3__TMeterResult(struct soap *soap, ns3__TMeterResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterResult", p->soap_type() == SOAP_TYPE_ns3__TMeterResult ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TMeterResult(struct soap *soap, const char *URL, ns3__TMeterResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterResult", p->soap_type() == SOAP_TYPE_ns3__TMeterResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TMeterResult(struct soap *soap, const char *URL, ns3__TMeterResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterResult", p->soap_type() == SOAP_TYPE_ns3__TMeterResult ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TMeterResult(struct soap *soap, const char *URL, ns3__TMeterResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterResult", p->soap_type() == SOAP_TYPE_ns3__TMeterResult ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TMeterResult * SOAP_FMAC4 soap_get_ns3__TMeterResult(struct soap*, ns3__TMeterResult *, const char*, const char*);

inline int soap_read_ns3__TMeterResult(struct soap *soap, ns3__TMeterResult *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TMeterResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TMeterResult(struct soap *soap, const char *URL, ns3__TMeterResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TMeterResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TMeterResult(struct soap *soap, ns3__TMeterResult *p)
{
	if (::soap_read_ns3__TMeterResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_TMeterResults_DEFINED
#define SOAP_TYPE_TMeterResults_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_TMeterResults(struct soap*, const char*, int, const TMeterResults *, const char*);
SOAP_FMAC3 TMeterResults * SOAP_FMAC4 soap_in_TMeterResults(struct soap*, const char*, TMeterResults *, const char*);
SOAP_FMAC1 TMeterResults * SOAP_FMAC2 soap_instantiate_TMeterResults(struct soap*, int, const char*, const char*, size_t*);

inline TMeterResults * soap_new_TMeterResults(struct soap *soap, int n = -1)
{
	return soap_instantiate_TMeterResults(soap, n, NULL, NULL, NULL);
}

inline TMeterResults * soap_new_req_TMeterResults(
	struct soap *soap)
{
	TMeterResults *_p = ::soap_new_TMeterResults(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline TMeterResults * soap_new_set_TMeterResults(
	struct soap *soap,
	ns3__TMeterResult **__ptr,
	int __size)
{
	TMeterResults *_p = ::soap_new_TMeterResults(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->TMeterResults::__ptr = __ptr;
		_p->TMeterResults::__size = __size;
	}
	return _p;
}

inline int soap_write_TMeterResults(struct soap *soap, TMeterResults const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMeterResults ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_TMeterResults(struct soap *soap, const char *URL, TMeterResults const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMeterResults ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_TMeterResults(struct soap *soap, const char *URL, TMeterResults const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMeterResults ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_TMeterResults(struct soap *soap, const char *URL, TMeterResults const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMeterResults ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 TMeterResults * SOAP_FMAC4 soap_get_TMeterResults(struct soap*, TMeterResults *, const char*, const char*);

inline int soap_read_TMeterResults(struct soap *soap, TMeterResults *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_TMeterResults(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_TMeterResults(struct soap *soap, const char *URL, TMeterResults *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_TMeterResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_TMeterResults(struct soap *soap, TMeterResults *p)
{
	if (::soap_read_TMeterResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TTestResults_DEFINED
#define SOAP_TYPE_ns3__TTestResults_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TTestResults(struct soap*, const char*, int, const ns3__TTestResults *, const char*);
SOAP_FMAC3 ns3__TTestResults * SOAP_FMAC4 soap_in_ns3__TTestResults(struct soap*, const char*, ns3__TTestResults *, const char*);
SOAP_FMAC1 ns3__TTestResults * SOAP_FMAC2 soap_instantiate_ns3__TTestResults(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TTestResults * soap_new_ns3__TTestResults(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TTestResults(soap, n, NULL, NULL, NULL);
}

inline ns3__TTestResults * soap_new_req_ns3__TTestResults(
	struct soap *soap,
	const std::string& TestName,
	double Flowrate,
	double Weight,
	double InletTemp,
	double OutletTemp,
	double MIDTemp,
	double MIDPulseConst,
	double MIDVolume,
	double MIDError,
	double Duration,
	TMeterResults *MeterResults)
{
	ns3__TTestResults *_p = ::soap_new_ns3__TTestResults(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TTestResults::TestName = TestName;
		_p->ns3__TTestResults::Flowrate = Flowrate;
		_p->ns3__TTestResults::Weight = Weight;
		_p->ns3__TTestResults::InletTemp = InletTemp;
		_p->ns3__TTestResults::OutletTemp = OutletTemp;
		_p->ns3__TTestResults::MIDTemp = MIDTemp;
		_p->ns3__TTestResults::MIDPulseConst = MIDPulseConst;
		_p->ns3__TTestResults::MIDVolume = MIDVolume;
		_p->ns3__TTestResults::MIDError = MIDError;
		_p->ns3__TTestResults::Duration = Duration;
		_p->ns3__TTestResults::MeterResults = MeterResults;
	}
	return _p;
}

inline ns3__TTestResults * soap_new_set_ns3__TTestResults(
	struct soap *soap,
	const std::string& TestName,
	double Flowrate,
	double Weight,
	double InletTemp,
	double OutletTemp,
	double MIDTemp,
	double MIDPulseConst,
	double MIDVolume,
	double MIDError,
	double Duration,
	TMeterResults *MeterResults)
{
	ns3__TTestResults *_p = ::soap_new_ns3__TTestResults(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TTestResults::TestName = TestName;
		_p->ns3__TTestResults::Flowrate = Flowrate;
		_p->ns3__TTestResults::Weight = Weight;
		_p->ns3__TTestResults::InletTemp = InletTemp;
		_p->ns3__TTestResults::OutletTemp = OutletTemp;
		_p->ns3__TTestResults::MIDTemp = MIDTemp;
		_p->ns3__TTestResults::MIDPulseConst = MIDPulseConst;
		_p->ns3__TTestResults::MIDVolume = MIDVolume;
		_p->ns3__TTestResults::MIDError = MIDError;
		_p->ns3__TTestResults::Duration = Duration;
		_p->ns3__TTestResults::MeterResults = MeterResults;
	}
	return _p;
}

inline int soap_write_ns3__TTestResults(struct soap *soap, ns3__TTestResults const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestResults", p->soap_type() == SOAP_TYPE_ns3__TTestResults ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TTestResults(struct soap *soap, const char *URL, ns3__TTestResults const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestResults", p->soap_type() == SOAP_TYPE_ns3__TTestResults ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TTestResults(struct soap *soap, const char *URL, ns3__TTestResults const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestResults", p->soap_type() == SOAP_TYPE_ns3__TTestResults ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TTestResults(struct soap *soap, const char *URL, ns3__TTestResults const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestResults", p->soap_type() == SOAP_TYPE_ns3__TTestResults ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TTestResults * SOAP_FMAC4 soap_get_ns3__TTestResults(struct soap*, ns3__TTestResults *, const char*, const char*);

inline int soap_read_ns3__TTestResults(struct soap *soap, ns3__TTestResults *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TTestResults(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TTestResults(struct soap *soap, const char *URL, ns3__TTestResults *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TTestResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TTestResults(struct soap *soap, ns3__TTestResults *p)
{
	if (::soap_read_ns3__TTestResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TMeasurementData_DEFINED
#define SOAP_TYPE_ns3__TMeasurementData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TMeasurementData(struct soap*, const char*, int, const ns3__TMeasurementData *, const char*);
SOAP_FMAC3 ns3__TMeasurementData * SOAP_FMAC4 soap_in_ns3__TMeasurementData(struct soap*, const char*, ns3__TMeasurementData *, const char*);
SOAP_FMAC1 ns3__TMeasurementData * SOAP_FMAC2 soap_instantiate_ns3__TMeasurementData(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TMeasurementData * soap_new_ns3__TMeasurementData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TMeasurementData(soap, n, NULL, NULL, NULL);
}

inline ns3__TMeasurementData * soap_new_req_ns3__TMeasurementData(
	struct soap *soap,
	bool Done,
	TStringDynArray *TestNames,
	const std::string& ProtocolNumber,
	const std::string& TestBench,
	const std::string& Tester,
	const std::string& TypeName,
	const std::string& TypeApprovalNumber,
	const std::string& TypeClass,
	int TypeNominalSize,
	TStringDynArray *TypeTestNames,
	double TypeMeterConst,
	double TypeNominalFlowrate)
{
	ns3__TMeasurementData *_p = ::soap_new_ns3__TMeasurementData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TMeasurementData::Done = Done;
		_p->ns3__TMeasurementData::TestNames = TestNames;
		_p->ns3__TMeasurementData::ProtocolNumber = ProtocolNumber;
		_p->ns3__TMeasurementData::TestBench = TestBench;
		_p->ns3__TMeasurementData::Tester = Tester;
		_p->ns3__TMeasurementData::TypeName = TypeName;
		_p->ns3__TMeasurementData::TypeApprovalNumber = TypeApprovalNumber;
		_p->ns3__TMeasurementData::TypeClass = TypeClass;
		_p->ns3__TMeasurementData::TypeNominalSize = TypeNominalSize;
		_p->ns3__TMeasurementData::TypeTestNames = TypeTestNames;
		_p->ns3__TMeasurementData::TypeMeterConst = TypeMeterConst;
		_p->ns3__TMeasurementData::TypeNominalFlowrate = TypeNominalFlowrate;
	}
	return _p;
}

inline ns3__TMeasurementData * soap_new_set_ns3__TMeasurementData(
	struct soap *soap,
	bool Done,
	TStringDynArray *TestNames,
	const std::string& ProtocolNumber,
	const std::string& TestBench,
	const std::string& Tester,
	const std::string& TypeName,
	const std::string& TypeApprovalNumber,
	const std::string& TypeClass,
	int TypeNominalSize,
	TStringDynArray *TypeTestNames,
	double TypeMeterConst,
	double TypeNominalFlowrate)
{
	ns3__TMeasurementData *_p = ::soap_new_ns3__TMeasurementData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TMeasurementData::Done = Done;
		_p->ns3__TMeasurementData::TestNames = TestNames;
		_p->ns3__TMeasurementData::ProtocolNumber = ProtocolNumber;
		_p->ns3__TMeasurementData::TestBench = TestBench;
		_p->ns3__TMeasurementData::Tester = Tester;
		_p->ns3__TMeasurementData::TypeName = TypeName;
		_p->ns3__TMeasurementData::TypeApprovalNumber = TypeApprovalNumber;
		_p->ns3__TMeasurementData::TypeClass = TypeClass;
		_p->ns3__TMeasurementData::TypeNominalSize = TypeNominalSize;
		_p->ns3__TMeasurementData::TypeTestNames = TypeTestNames;
		_p->ns3__TMeasurementData::TypeMeterConst = TypeMeterConst;
		_p->ns3__TMeasurementData::TypeNominalFlowrate = TypeNominalFlowrate;
	}
	return _p;
}

inline int soap_write_ns3__TMeasurementData(struct soap *soap, ns3__TMeasurementData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeasurementData", p->soap_type() == SOAP_TYPE_ns3__TMeasurementData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TMeasurementData(struct soap *soap, const char *URL, ns3__TMeasurementData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeasurementData", p->soap_type() == SOAP_TYPE_ns3__TMeasurementData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TMeasurementData(struct soap *soap, const char *URL, ns3__TMeasurementData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeasurementData", p->soap_type() == SOAP_TYPE_ns3__TMeasurementData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TMeasurementData(struct soap *soap, const char *URL, ns3__TMeasurementData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeasurementData", p->soap_type() == SOAP_TYPE_ns3__TMeasurementData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TMeasurementData * SOAP_FMAC4 soap_get_ns3__TMeasurementData(struct soap*, ns3__TMeasurementData *, const char*, const char*);

inline int soap_read_ns3__TMeasurementData(struct soap *soap, ns3__TMeasurementData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TMeasurementData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TMeasurementData(struct soap *soap, const char *URL, ns3__TMeasurementData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TMeasurementData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TMeasurementData(struct soap *soap, ns3__TMeasurementData *p)
{
	if (::soap_read_ns3__TMeasurementData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TMeterIndication_DEFINED
#define SOAP_TYPE_ns3__TMeterIndication_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TMeterIndication(struct soap*, const char*, int, const ns3__TMeterIndication *, const char*);
SOAP_FMAC3 ns3__TMeterIndication * SOAP_FMAC4 soap_in_ns3__TMeterIndication(struct soap*, const char*, ns3__TMeterIndication *, const char*);
SOAP_FMAC1 ns3__TMeterIndication * SOAP_FMAC2 soap_instantiate_ns3__TMeterIndication(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TMeterIndication * soap_new_ns3__TMeterIndication(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TMeterIndication(soap, n, NULL, NULL, NULL);
}

inline ns3__TMeterIndication * soap_new_req_ns3__TMeterIndication(
	struct soap *soap,
	int Position,
	double StartVolume,
	double StopVolume,
	double IndicatedVolume)
{
	ns3__TMeterIndication *_p = ::soap_new_ns3__TMeterIndication(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TMeterIndication::Position = Position;
		_p->ns3__TMeterIndication::StartVolume = StartVolume;
		_p->ns3__TMeterIndication::StopVolume = StopVolume;
		_p->ns3__TMeterIndication::IndicatedVolume = IndicatedVolume;
	}
	return _p;
}

inline ns3__TMeterIndication * soap_new_set_ns3__TMeterIndication(
	struct soap *soap,
	int Position,
	double StartVolume,
	double StopVolume,
	double IndicatedVolume)
{
	ns3__TMeterIndication *_p = ::soap_new_ns3__TMeterIndication(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TMeterIndication::Position = Position;
		_p->ns3__TMeterIndication::StartVolume = StartVolume;
		_p->ns3__TMeterIndication::StopVolume = StopVolume;
		_p->ns3__TMeterIndication::IndicatedVolume = IndicatedVolume;
	}
	return _p;
}

inline int soap_write_ns3__TMeterIndication(struct soap *soap, ns3__TMeterIndication const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterIndication", p->soap_type() == SOAP_TYPE_ns3__TMeterIndication ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TMeterIndication(struct soap *soap, const char *URL, ns3__TMeterIndication const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterIndication", p->soap_type() == SOAP_TYPE_ns3__TMeterIndication ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TMeterIndication(struct soap *soap, const char *URL, ns3__TMeterIndication const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterIndication", p->soap_type() == SOAP_TYPE_ns3__TMeterIndication ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TMeterIndication(struct soap *soap, const char *URL, ns3__TMeterIndication const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterIndication", p->soap_type() == SOAP_TYPE_ns3__TMeterIndication ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TMeterIndication * SOAP_FMAC4 soap_get_ns3__TMeterIndication(struct soap*, ns3__TMeterIndication *, const char*, const char*);

inline int soap_read_ns3__TMeterIndication(struct soap *soap, ns3__TMeterIndication *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TMeterIndication(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TMeterIndication(struct soap *soap, const char *URL, ns3__TMeterIndication *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TMeterIndication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TMeterIndication(struct soap *soap, ns3__TMeterIndication *p)
{
	if (::soap_read_ns3__TMeterIndication(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_TMeterIndications_DEFINED
#define SOAP_TYPE_TMeterIndications_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_TMeterIndications(struct soap*, const char*, int, const TMeterIndications *, const char*);
SOAP_FMAC3 TMeterIndications * SOAP_FMAC4 soap_in_TMeterIndications(struct soap*, const char*, TMeterIndications *, const char*);
SOAP_FMAC1 TMeterIndications * SOAP_FMAC2 soap_instantiate_TMeterIndications(struct soap*, int, const char*, const char*, size_t*);

inline TMeterIndications * soap_new_TMeterIndications(struct soap *soap, int n = -1)
{
	return soap_instantiate_TMeterIndications(soap, n, NULL, NULL, NULL);
}

inline TMeterIndications * soap_new_req_TMeterIndications(
	struct soap *soap)
{
	TMeterIndications *_p = ::soap_new_TMeterIndications(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline TMeterIndications * soap_new_set_TMeterIndications(
	struct soap *soap,
	ns3__TMeterIndication **__ptr,
	int __size)
{
	TMeterIndications *_p = ::soap_new_TMeterIndications(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->TMeterIndications::__ptr = __ptr;
		_p->TMeterIndications::__size = __size;
	}
	return _p;
}

inline int soap_write_TMeterIndications(struct soap *soap, TMeterIndications const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMeterIndications ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_TMeterIndications(struct soap *soap, const char *URL, TMeterIndications const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMeterIndications ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_TMeterIndications(struct soap *soap, const char *URL, TMeterIndications const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMeterIndications ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_TMeterIndications(struct soap *soap, const char *URL, TMeterIndications const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMeterIndications ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 TMeterIndications * SOAP_FMAC4 soap_get_TMeterIndications(struct soap*, TMeterIndications *, const char*, const char*);

inline int soap_read_TMeterIndications(struct soap *soap, TMeterIndications *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_TMeterIndications(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_TMeterIndications(struct soap *soap, const char *URL, TMeterIndications *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_TMeterIndications(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_TMeterIndications(struct soap *soap, TMeterIndications *p)
{
	if (::soap_read_TMeterIndications(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TMeterData_DEFINED
#define SOAP_TYPE_ns3__TMeterData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TMeterData(struct soap*, const char*, int, const ns3__TMeterData *, const char*);
SOAP_FMAC3 ns3__TMeterData * SOAP_FMAC4 soap_in_ns3__TMeterData(struct soap*, const char*, ns3__TMeterData *, const char*);
SOAP_FMAC1 ns3__TMeterData * SOAP_FMAC2 soap_instantiate_ns3__TMeterData(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TMeterData * soap_new_ns3__TMeterData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TMeterData(soap, n, NULL, NULL, NULL);
}

inline ns3__TMeterData * soap_new_req_ns3__TMeterData(
	struct soap *soap,
	int Position,
	const std::string& ProdNr,
	double MeterConstant)
{
	ns3__TMeterData *_p = ::soap_new_ns3__TMeterData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TMeterData::Position = Position;
		_p->ns3__TMeterData::ProdNr = ProdNr;
		_p->ns3__TMeterData::MeterConstant = MeterConstant;
	}
	return _p;
}

inline ns3__TMeterData * soap_new_set_ns3__TMeterData(
	struct soap *soap,
	int Position,
	const std::string& ProdNr,
	double MeterConstant)
{
	ns3__TMeterData *_p = ::soap_new_ns3__TMeterData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TMeterData::Position = Position;
		_p->ns3__TMeterData::ProdNr = ProdNr;
		_p->ns3__TMeterData::MeterConstant = MeterConstant;
	}
	return _p;
}

inline int soap_write_ns3__TMeterData(struct soap *soap, ns3__TMeterData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterData", p->soap_type() == SOAP_TYPE_ns3__TMeterData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TMeterData(struct soap *soap, const char *URL, ns3__TMeterData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterData", p->soap_type() == SOAP_TYPE_ns3__TMeterData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TMeterData(struct soap *soap, const char *URL, ns3__TMeterData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterData", p->soap_type() == SOAP_TYPE_ns3__TMeterData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TMeterData(struct soap *soap, const char *URL, ns3__TMeterData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TMeterData", p->soap_type() == SOAP_TYPE_ns3__TMeterData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TMeterData * SOAP_FMAC4 soap_get_ns3__TMeterData(struct soap*, ns3__TMeterData *, const char*, const char*);

inline int soap_read_ns3__TMeterData(struct soap *soap, ns3__TMeterData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TMeterData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TMeterData(struct soap *soap, const char *URL, ns3__TMeterData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TMeterData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TMeterData(struct soap *soap, ns3__TMeterData *p)
{
	if (::soap_read_ns3__TMeterData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_TMetersData_DEFINED
#define SOAP_TYPE_TMetersData_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_TMetersData(struct soap*, const char*, int, const TMetersData *, const char*);
SOAP_FMAC3 TMetersData * SOAP_FMAC4 soap_in_TMetersData(struct soap*, const char*, TMetersData *, const char*);
SOAP_FMAC1 TMetersData * SOAP_FMAC2 soap_instantiate_TMetersData(struct soap*, int, const char*, const char*, size_t*);

inline TMetersData * soap_new_TMetersData(struct soap *soap, int n = -1)
{
	return soap_instantiate_TMetersData(soap, n, NULL, NULL, NULL);
}

inline TMetersData * soap_new_req_TMetersData(
	struct soap *soap)
{
	TMetersData *_p = ::soap_new_TMetersData(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline TMetersData * soap_new_set_TMetersData(
	struct soap *soap,
	ns3__TMeterData **__ptr,
	int __size)
{
	TMetersData *_p = ::soap_new_TMetersData(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->TMetersData::__ptr = __ptr;
		_p->TMetersData::__size = __size;
	}
	return _p;
}

inline int soap_write_TMetersData(struct soap *soap, TMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMetersData ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_TMetersData(struct soap *soap, const char *URL, TMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMetersData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_TMetersData(struct soap *soap, const char *URL, TMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMetersData ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_TMetersData(struct soap *soap, const char *URL, TMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TMetersData ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 TMetersData * SOAP_FMAC4 soap_get_TMetersData(struct soap*, TMetersData *, const char*, const char*);

inline int soap_read_TMetersData(struct soap *soap, TMetersData *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_TMetersData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_TMetersData(struct soap *soap, const char *URL, TMetersData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_TMetersData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_TMetersData(struct soap *soap, TMetersData *p)
{
	if (::soap_read_TMetersData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TStatus_DEFINED
#define SOAP_TYPE_ns3__TStatus_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TStatus(struct soap*, const char*, int, const ns3__TStatus *, const char*);
SOAP_FMAC3 ns3__TStatus * SOAP_FMAC4 soap_in_ns3__TStatus(struct soap*, const char*, ns3__TStatus *, const char*);
SOAP_FMAC1 ns3__TStatus * SOAP_FMAC2 soap_instantiate_ns3__TStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TStatus * soap_new_ns3__TStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TStatus(soap, n, NULL, NULL, NULL);
}

inline ns3__TStatus * soap_new_req_ns3__TStatus(
	struct soap *soap,
	enum ns3__TStatusCode StatusCode,
	const std::string& TestName,
	bool InitializationEvent,
	bool CanceledEvent,
	bool FinishEvent,
	bool FinishTestEvent,
	const std::string& StatusMessage,
	const std::string& CancelMessage)
{
	ns3__TStatus *_p = ::soap_new_ns3__TStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TStatus::StatusCode = StatusCode;
		_p->ns3__TStatus::TestName = TestName;
		_p->ns3__TStatus::InitializationEvent = InitializationEvent;
		_p->ns3__TStatus::CanceledEvent = CanceledEvent;
		_p->ns3__TStatus::FinishEvent = FinishEvent;
		_p->ns3__TStatus::FinishTestEvent = FinishTestEvent;
		_p->ns3__TStatus::StatusMessage = StatusMessage;
		_p->ns3__TStatus::CancelMessage = CancelMessage;
	}
	return _p;
}

inline ns3__TStatus * soap_new_set_ns3__TStatus(
	struct soap *soap,
	enum ns3__TStatusCode StatusCode,
	const std::string& TestName,
	bool InitializationEvent,
	bool CanceledEvent,
	bool FinishEvent,
	bool FinishTestEvent,
	const std::string& StatusMessage,
	const std::string& CancelMessage)
{
	ns3__TStatus *_p = ::soap_new_ns3__TStatus(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TStatus::StatusCode = StatusCode;
		_p->ns3__TStatus::TestName = TestName;
		_p->ns3__TStatus::InitializationEvent = InitializationEvent;
		_p->ns3__TStatus::CanceledEvent = CanceledEvent;
		_p->ns3__TStatus::FinishEvent = FinishEvent;
		_p->ns3__TStatus::FinishTestEvent = FinishTestEvent;
		_p->ns3__TStatus::StatusMessage = StatusMessage;
		_p->ns3__TStatus::CancelMessage = CancelMessage;
	}
	return _p;
}

inline int soap_write_ns3__TStatus(struct soap *soap, ns3__TStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TStatus", p->soap_type() == SOAP_TYPE_ns3__TStatus ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TStatus(struct soap *soap, const char *URL, ns3__TStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TStatus", p->soap_type() == SOAP_TYPE_ns3__TStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TStatus(struct soap *soap, const char *URL, ns3__TStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TStatus", p->soap_type() == SOAP_TYPE_ns3__TStatus ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TStatus(struct soap *soap, const char *URL, ns3__TStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TStatus", p->soap_type() == SOAP_TYPE_ns3__TStatus ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TStatus * SOAP_FMAC4 soap_get_ns3__TStatus(struct soap*, ns3__TStatus *, const char*, const char*);

inline int soap_read_ns3__TStatus(struct soap *soap, ns3__TStatus *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TStatus(struct soap *soap, const char *URL, ns3__TStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TStatus(struct soap *soap, ns3__TStatus *p)
{
	if (::soap_read_ns3__TStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TWaitEvents_DEFINED
#define SOAP_TYPE_ns3__TWaitEvents_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TWaitEvents(struct soap*, const char*, int, const ns3__TWaitEvents *, const char*);
SOAP_FMAC3 ns3__TWaitEvents * SOAP_FMAC4 soap_in_ns3__TWaitEvents(struct soap*, const char*, ns3__TWaitEvents *, const char*);
SOAP_FMAC1 ns3__TWaitEvents * SOAP_FMAC2 soap_instantiate_ns3__TWaitEvents(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TWaitEvents * soap_new_ns3__TWaitEvents(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TWaitEvents(soap, n, NULL, NULL, NULL);
}

inline ns3__TWaitEvents * soap_new_req_ns3__TWaitEvents(
	struct soap *soap,
	bool StartTest,
	bool StopTest)
{
	ns3__TWaitEvents *_p = ::soap_new_ns3__TWaitEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TWaitEvents::StartTest = StartTest;
		_p->ns3__TWaitEvents::StopTest = StopTest;
	}
	return _p;
}

inline ns3__TWaitEvents * soap_new_set_ns3__TWaitEvents(
	struct soap *soap,
	bool StartTest,
	bool StopTest)
{
	ns3__TWaitEvents *_p = ::soap_new_ns3__TWaitEvents(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TWaitEvents::StartTest = StartTest;
		_p->ns3__TWaitEvents::StopTest = StopTest;
	}
	return _p;
}

inline int soap_write_ns3__TWaitEvents(struct soap *soap, ns3__TWaitEvents const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TWaitEvents", p->soap_type() == SOAP_TYPE_ns3__TWaitEvents ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TWaitEvents(struct soap *soap, const char *URL, ns3__TWaitEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TWaitEvents", p->soap_type() == SOAP_TYPE_ns3__TWaitEvents ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TWaitEvents(struct soap *soap, const char *URL, ns3__TWaitEvents const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TWaitEvents", p->soap_type() == SOAP_TYPE_ns3__TWaitEvents ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TWaitEvents(struct soap *soap, const char *URL, ns3__TWaitEvents const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TWaitEvents", p->soap_type() == SOAP_TYPE_ns3__TWaitEvents ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TWaitEvents * SOAP_FMAC4 soap_get_ns3__TWaitEvents(struct soap*, ns3__TWaitEvents *, const char*, const char*);

inline int soap_read_ns3__TWaitEvents(struct soap *soap, ns3__TWaitEvents *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TWaitEvents(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TWaitEvents(struct soap *soap, const char *URL, ns3__TWaitEvents *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TWaitEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TWaitEvents(struct soap *soap, ns3__TWaitEvents *p)
{
	if (::soap_read_ns3__TWaitEvents(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TPressTestParameters_DEFINED
#define SOAP_TYPE_ns3__TPressTestParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TPressTestParameters(struct soap*, const char*, int, const ns3__TPressTestParameters *, const char*);
SOAP_FMAC3 ns3__TPressTestParameters * SOAP_FMAC4 soap_in_ns3__TPressTestParameters(struct soap*, const char*, ns3__TPressTestParameters *, const char*);
SOAP_FMAC1 ns3__TPressTestParameters * SOAP_FMAC2 soap_instantiate_ns3__TPressTestParameters(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TPressTestParameters * soap_new_ns3__TPressTestParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TPressTestParameters(soap, n, NULL, NULL, NULL);
}

inline ns3__TPressTestParameters * soap_new_req_ns3__TPressTestParameters(
	struct soap *soap,
	double StartPress,
	double Duration,
	double MaxFall)
{
	ns3__TPressTestParameters *_p = ::soap_new_ns3__TPressTestParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TPressTestParameters::StartPress = StartPress;
		_p->ns3__TPressTestParameters::Duration = Duration;
		_p->ns3__TPressTestParameters::MaxFall = MaxFall;
	}
	return _p;
}

inline ns3__TPressTestParameters * soap_new_set_ns3__TPressTestParameters(
	struct soap *soap,
	double StartPress,
	double Duration,
	double MaxFall)
{
	ns3__TPressTestParameters *_p = ::soap_new_ns3__TPressTestParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TPressTestParameters::StartPress = StartPress;
		_p->ns3__TPressTestParameters::Duration = Duration;
		_p->ns3__TPressTestParameters::MaxFall = MaxFall;
	}
	return _p;
}

inline int soap_write_ns3__TPressTestParameters(struct soap *soap, ns3__TPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TPressTestParameters", p->soap_type() == SOAP_TYPE_ns3__TPressTestParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TPressTestParameters(struct soap *soap, const char *URL, ns3__TPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TPressTestParameters", p->soap_type() == SOAP_TYPE_ns3__TPressTestParameters ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TPressTestParameters(struct soap *soap, const char *URL, ns3__TPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TPressTestParameters", p->soap_type() == SOAP_TYPE_ns3__TPressTestParameters ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TPressTestParameters(struct soap *soap, const char *URL, ns3__TPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TPressTestParameters", p->soap_type() == SOAP_TYPE_ns3__TPressTestParameters ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TPressTestParameters * SOAP_FMAC4 soap_get_ns3__TPressTestParameters(struct soap*, ns3__TPressTestParameters *, const char*, const char*);

inline int soap_read_ns3__TPressTestParameters(struct soap *soap, ns3__TPressTestParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TPressTestParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TPressTestParameters(struct soap *soap, const char *URL, ns3__TPressTestParameters *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TPressTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TPressTestParameters(struct soap *soap, ns3__TPressTestParameters *p)
{
	if (::soap_read_ns3__TPressTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns3__TTestParameters_DEFINED
#define SOAP_TYPE_ns3__TTestParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TTestParameters(struct soap*, const char*, int, const ns3__TTestParameters *, const char*);
SOAP_FMAC3 ns3__TTestParameters * SOAP_FMAC4 soap_in_ns3__TTestParameters(struct soap*, const char*, ns3__TTestParameters *, const char*);
SOAP_FMAC1 ns3__TTestParameters * SOAP_FMAC2 soap_instantiate_ns3__TTestParameters(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TTestParameters * soap_new_ns3__TTestParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TTestParameters(soap, n, NULL, NULL, NULL);
}

inline ns3__TTestParameters * soap_new_req_ns3__TTestParameters(
	struct soap *soap,
	double MinFlowrate,
	double MaxFlowrate,
	double MinTemperature,
	double MaxTemperature,
	double MinVolume,
	enum ns3__TProofMethod ProofMethod,
	enum ns3__TMeterIndicationMethod MeterIndicationMethod,
	double MinError,
	double MaxError)
{
	ns3__TTestParameters *_p = ::soap_new_ns3__TTestParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TTestParameters::MinFlowrate = MinFlowrate;
		_p->ns3__TTestParameters::MaxFlowrate = MaxFlowrate;
		_p->ns3__TTestParameters::MinTemperature = MinTemperature;
		_p->ns3__TTestParameters::MaxTemperature = MaxTemperature;
		_p->ns3__TTestParameters::MinVolume = MinVolume;
		_p->ns3__TTestParameters::ProofMethod = ProofMethod;
		_p->ns3__TTestParameters::MeterIndicationMethod = MeterIndicationMethod;
		_p->ns3__TTestParameters::MinError = MinError;
		_p->ns3__TTestParameters::MaxError = MaxError;
	}
	return _p;
}

inline ns3__TTestParameters * soap_new_set_ns3__TTestParameters(
	struct soap *soap,
	double MinFlowrate,
	double MaxFlowrate,
	double MinTemperature,
	double MaxTemperature,
	double MinVolume,
	enum ns3__TProofMethod ProofMethod,
	enum ns3__TMeterIndicationMethod MeterIndicationMethod,
	double MinError,
	double MaxError)
{
	ns3__TTestParameters *_p = ::soap_new_ns3__TTestParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TTestParameters::MinFlowrate = MinFlowrate;
		_p->ns3__TTestParameters::MaxFlowrate = MaxFlowrate;
		_p->ns3__TTestParameters::MinTemperature = MinTemperature;
		_p->ns3__TTestParameters::MaxTemperature = MaxTemperature;
		_p->ns3__TTestParameters::MinVolume = MinVolume;
		_p->ns3__TTestParameters::ProofMethod = ProofMethod;
		_p->ns3__TTestParameters::MeterIndicationMethod = MeterIndicationMethod;
		_p->ns3__TTestParameters::MinError = MinError;
		_p->ns3__TTestParameters::MaxError = MaxError;
	}
	return _p;
}

inline int soap_write_ns3__TTestParameters(struct soap *soap, ns3__TTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestParameters", p->soap_type() == SOAP_TYPE_ns3__TTestParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TTestParameters(struct soap *soap, const char *URL, ns3__TTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestParameters", p->soap_type() == SOAP_TYPE_ns3__TTestParameters ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TTestParameters(struct soap *soap, const char *URL, ns3__TTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestParameters", p->soap_type() == SOAP_TYPE_ns3__TTestParameters ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TTestParameters(struct soap *soap, const char *URL, ns3__TTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TTestParameters", p->soap_type() == SOAP_TYPE_ns3__TTestParameters ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TTestParameters * SOAP_FMAC4 soap_get_ns3__TTestParameters(struct soap*, ns3__TTestParameters *, const char*, const char*);

inline int soap_read_ns3__TTestParameters(struct soap *soap, ns3__TTestParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_ns3__TTestParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TTestParameters(struct soap *soap, const char *URL, ns3__TTestParameters *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns3__TTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TTestParameters(struct soap *soap, ns3__TTestParameters *p)
{
	if (::soap_read_ns3__TTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_TBooleanDynArray_DEFINED
#define SOAP_TYPE_TBooleanDynArray_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_TBooleanDynArray(struct soap*, const char*, int, const TBooleanDynArray *, const char*);
SOAP_FMAC3 TBooleanDynArray * SOAP_FMAC4 soap_in_TBooleanDynArray(struct soap*, const char*, TBooleanDynArray *, const char*);
SOAP_FMAC1 TBooleanDynArray * SOAP_FMAC2 soap_instantiate_TBooleanDynArray(struct soap*, int, const char*, const char*, size_t*);

inline TBooleanDynArray * soap_new_TBooleanDynArray(struct soap *soap, int n = -1)
{
	return soap_instantiate_TBooleanDynArray(soap, n, NULL, NULL, NULL);
}

inline TBooleanDynArray * soap_new_req_TBooleanDynArray(
	struct soap *soap)
{
	TBooleanDynArray *_p = ::soap_new_TBooleanDynArray(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline TBooleanDynArray * soap_new_set_TBooleanDynArray(
	struct soap *soap,
	bool *__ptr,
	int __size)
{
	TBooleanDynArray *_p = ::soap_new_TBooleanDynArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->TBooleanDynArray::__ptr = __ptr;
		_p->TBooleanDynArray::__size = __size;
	}
	return _p;
}

inline int soap_write_TBooleanDynArray(struct soap *soap, TBooleanDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TBooleanDynArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_TBooleanDynArray(struct soap *soap, const char *URL, TBooleanDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TBooleanDynArray ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_TBooleanDynArray(struct soap *soap, const char *URL, TBooleanDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TBooleanDynArray ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_TBooleanDynArray(struct soap *soap, const char *URL, TBooleanDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TBooleanDynArray ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 TBooleanDynArray * SOAP_FMAC4 soap_get_TBooleanDynArray(struct soap*, TBooleanDynArray *, const char*, const char*);

inline int soap_read_TBooleanDynArray(struct soap *soap, TBooleanDynArray *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_TBooleanDynArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_TBooleanDynArray(struct soap *soap, const char *URL, TBooleanDynArray *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_TBooleanDynArray(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_TBooleanDynArray(struct soap *soap, TBooleanDynArray *p)
{
	if (::soap_read_TBooleanDynArray(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_TIntegerDynArray_DEFINED
#define SOAP_TYPE_TIntegerDynArray_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_TIntegerDynArray(struct soap*, const char*, int, const TIntegerDynArray *, const char*);
SOAP_FMAC3 TIntegerDynArray * SOAP_FMAC4 soap_in_TIntegerDynArray(struct soap*, const char*, TIntegerDynArray *, const char*);
SOAP_FMAC1 TIntegerDynArray * SOAP_FMAC2 soap_instantiate_TIntegerDynArray(struct soap*, int, const char*, const char*, size_t*);

inline TIntegerDynArray * soap_new_TIntegerDynArray(struct soap *soap, int n = -1)
{
	return soap_instantiate_TIntegerDynArray(soap, n, NULL, NULL, NULL);
}

inline TIntegerDynArray * soap_new_req_TIntegerDynArray(
	struct soap *soap)
{
	TIntegerDynArray *_p = ::soap_new_TIntegerDynArray(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline TIntegerDynArray * soap_new_set_TIntegerDynArray(
	struct soap *soap,
	int *__ptr,
	int __size)
{
	TIntegerDynArray *_p = ::soap_new_TIntegerDynArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->TIntegerDynArray::__ptr = __ptr;
		_p->TIntegerDynArray::__size = __size;
	}
	return _p;
}

inline int soap_write_TIntegerDynArray(struct soap *soap, TIntegerDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TIntegerDynArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_TIntegerDynArray(struct soap *soap, const char *URL, TIntegerDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TIntegerDynArray ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_TIntegerDynArray(struct soap *soap, const char *URL, TIntegerDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TIntegerDynArray ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_TIntegerDynArray(struct soap *soap, const char *URL, TIntegerDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TIntegerDynArray ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 TIntegerDynArray * SOAP_FMAC4 soap_get_TIntegerDynArray(struct soap*, TIntegerDynArray *, const char*, const char*);

inline int soap_read_TIntegerDynArray(struct soap *soap, TIntegerDynArray *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_TIntegerDynArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_TIntegerDynArray(struct soap *soap, const char *URL, TIntegerDynArray *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_TIntegerDynArray(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_TIntegerDynArray(struct soap *soap, TIntegerDynArray *p)
{
	if (::soap_read_TIntegerDynArray(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_TStringDynArray_DEFINED
#define SOAP_TYPE_TStringDynArray_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_TStringDynArray(struct soap*, const char*, int, const TStringDynArray *, const char*);
SOAP_FMAC3 TStringDynArray * SOAP_FMAC4 soap_in_TStringDynArray(struct soap*, const char*, TStringDynArray *, const char*);
SOAP_FMAC1 TStringDynArray * SOAP_FMAC2 soap_instantiate_TStringDynArray(struct soap*, int, const char*, const char*, size_t*);

inline TStringDynArray * soap_new_TStringDynArray(struct soap *soap, int n = -1)
{
	return soap_instantiate_TStringDynArray(soap, n, NULL, NULL, NULL);
}

inline TStringDynArray * soap_new_req_TStringDynArray(
	struct soap *soap)
{
	TStringDynArray *_p = ::soap_new_TStringDynArray(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline TStringDynArray * soap_new_set_TStringDynArray(
	struct soap *soap,
	std::string *__ptr,
	int __size)
{
	TStringDynArray *_p = ::soap_new_TStringDynArray(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->TStringDynArray::__ptr = __ptr;
		_p->TStringDynArray::__size = __size;
	}
	return _p;
}

inline int soap_write_TStringDynArray(struct soap *soap, TStringDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TStringDynArray ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_TStringDynArray(struct soap *soap, const char *URL, TStringDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TStringDynArray ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_TStringDynArray(struct soap *soap, const char *URL, TStringDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TStringDynArray ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_TStringDynArray(struct soap *soap, const char *URL, TStringDynArray const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_TStringDynArray ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 TStringDynArray * SOAP_FMAC4 soap_get_TStringDynArray(struct soap*, TStringDynArray *, const char*, const char*);

inline int soap_read_TStringDynArray(struct soap *soap, TStringDynArray *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_TStringDynArray(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_TStringDynArray(struct soap *soap, const char *URL, TStringDynArray *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_TStringDynArray(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_TStringDynArray(struct soap *soap, TStringDynArray *p)
{
	if (::soap_read_TStringDynArray(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_SOAP_ENC__Array_DEFINED
#define SOAP_TYPE_SOAP_ENC__Array_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENC__Array(struct soap*, const char*, int, const SOAP_ENC__Array *, const char*);
SOAP_FMAC3 SOAP_ENC__Array * SOAP_FMAC4 soap_in_SOAP_ENC__Array(struct soap*, const char*, SOAP_ENC__Array *, const char*);
SOAP_FMAC1 SOAP_ENC__Array * SOAP_FMAC2 soap_instantiate_SOAP_ENC__Array(struct soap*, int, const char*, const char*, size_t*);

inline SOAP_ENC__Array * soap_new_SOAP_ENC__Array(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENC__Array(soap, n, NULL, NULL, NULL);
}

inline SOAP_ENC__Array * soap_new_req_SOAP_ENC__Array(
	struct soap *soap)
{
	SOAP_ENC__Array *_p = ::soap_new_SOAP_ENC__Array(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline SOAP_ENC__Array * soap_new_set_SOAP_ENC__Array(
	struct soap *soap,
	char **__ptr,
	int __size)
{
	SOAP_ENC__Array *_p = ::soap_new_SOAP_ENC__Array(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->SOAP_ENC__Array::__ptr = __ptr;
		_p->SOAP_ENC__Array::__size = __size;
	}
	return _p;
}

inline int soap_write_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_SOAP_ENC__Array ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 SOAP_ENC__Array * SOAP_FMAC4 soap_get_SOAP_ENC__Array(struct soap*, SOAP_ENC__Array *, const char*, const char*);

inline int soap_read_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENC__Array(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENC__Array(struct soap *soap, const char *URL, SOAP_ENC__Array *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENC__Array(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENC__Array(struct soap *soap, SOAP_ENC__Array *p)
{
	if (::soap_read_SOAP_ENC__Array(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_ns4__SetTestConfiguration_DEFINED
#define SOAP_TYPE_ns4__SetTestConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetTestConfiguration(struct soap*, struct ns4__SetTestConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetTestConfiguration(struct soap*, const struct ns4__SetTestConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetTestConfiguration(struct soap*, const char*, int, const struct ns4__SetTestConfiguration *, const char*);
SOAP_FMAC3 struct ns4__SetTestConfiguration * SOAP_FMAC4 soap_in_ns4__SetTestConfiguration(struct soap*, const char*, struct ns4__SetTestConfiguration *, const char*);
SOAP_FMAC1 struct ns4__SetTestConfiguration * SOAP_FMAC2 soap_instantiate_ns4__SetTestConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetTestConfiguration * soap_new_ns4__SetTestConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetTestConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetTestConfiguration * soap_new_req_ns4__SetTestConfiguration(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	const std::string& Configuration)
{
	struct ns4__SetTestConfiguration *_p = ::soap_new_ns4__SetTestConfiguration(soap);
	if (_p)
	{	::soap_default_ns4__SetTestConfiguration(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->Configuration = Configuration;
	}
	return _p;
}

inline struct ns4__SetTestConfiguration * soap_new_set_ns4__SetTestConfiguration(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	const std::string& Configuration)
{
	struct ns4__SetTestConfiguration *_p = ::soap_new_ns4__SetTestConfiguration(soap);
	if (_p)
	{	::soap_default_ns4__SetTestConfiguration(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->Configuration = Configuration;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetTestConfiguration(struct soap*, const struct ns4__SetTestConfiguration *, const char*, const char*);

inline int soap_write_ns4__SetTestConfiguration(struct soap *soap, struct ns4__SetTestConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetTestConfiguration(soap, p), 0) || ::soap_put_ns4__SetTestConfiguration(soap, p, "ns4:SetTestConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetTestConfiguration(struct soap *soap, const char *URL, struct ns4__SetTestConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestConfiguration(soap, p), 0) || ::soap_put_ns4__SetTestConfiguration(soap, p, "ns4:SetTestConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetTestConfiguration(struct soap *soap, const char *URL, struct ns4__SetTestConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestConfiguration(soap, p), 0) || ::soap_put_ns4__SetTestConfiguration(soap, p, "ns4:SetTestConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetTestConfiguration(struct soap *soap, const char *URL, struct ns4__SetTestConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestConfiguration(soap, p), 0) || ::soap_put_ns4__SetTestConfiguration(soap, p, "ns4:SetTestConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetTestConfiguration * SOAP_FMAC4 soap_get_ns4__SetTestConfiguration(struct soap*, struct ns4__SetTestConfiguration *, const char*, const char*);

inline int soap_read_ns4__SetTestConfiguration(struct soap *soap, struct ns4__SetTestConfiguration *p)
{
	if (p)
	{	::soap_default_ns4__SetTestConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetTestConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetTestConfiguration(struct soap *soap, const char *URL, struct ns4__SetTestConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetTestConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetTestConfiguration(struct soap *soap, struct ns4__SetTestConfiguration *p)
{
	if (::soap_read_ns4__SetTestConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__SetTestConfigurationResponse_DEFINED
#define SOAP_TYPE_ns4__SetTestConfigurationResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetTestConfigurationResponse(struct soap*, struct ns4__SetTestConfigurationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetTestConfigurationResponse(struct soap*, const struct ns4__SetTestConfigurationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetTestConfigurationResponse(struct soap*, const char*, int, const struct ns4__SetTestConfigurationResponse *, const char*);
SOAP_FMAC3 struct ns4__SetTestConfigurationResponse * SOAP_FMAC4 soap_in_ns4__SetTestConfigurationResponse(struct soap*, const char*, struct ns4__SetTestConfigurationResponse *, const char*);
SOAP_FMAC1 struct ns4__SetTestConfigurationResponse * SOAP_FMAC2 soap_instantiate_ns4__SetTestConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetTestConfigurationResponse * soap_new_ns4__SetTestConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetTestConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetTestConfigurationResponse * soap_new_req_ns4__SetTestConfigurationResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetTestConfigurationResponse *_p = ::soap_new_ns4__SetTestConfigurationResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetTestConfigurationResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__SetTestConfigurationResponse * soap_new_set_ns4__SetTestConfigurationResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetTestConfigurationResponse *_p = ::soap_new_ns4__SetTestConfigurationResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetTestConfigurationResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetTestConfigurationResponse(struct soap*, const struct ns4__SetTestConfigurationResponse *, const char*, const char*);

inline int soap_write_ns4__SetTestConfigurationResponse(struct soap *soap, struct ns4__SetTestConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetTestConfigurationResponse(soap, p), 0) || ::soap_put_ns4__SetTestConfigurationResponse(soap, p, "ns4:SetTestConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetTestConfigurationResponse(struct soap *soap, const char *URL, struct ns4__SetTestConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestConfigurationResponse(soap, p), 0) || ::soap_put_ns4__SetTestConfigurationResponse(soap, p, "ns4:SetTestConfigurationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetTestConfigurationResponse(struct soap *soap, const char *URL, struct ns4__SetTestConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestConfigurationResponse(soap, p), 0) || ::soap_put_ns4__SetTestConfigurationResponse(soap, p, "ns4:SetTestConfigurationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetTestConfigurationResponse(struct soap *soap, const char *URL, struct ns4__SetTestConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestConfigurationResponse(soap, p), 0) || ::soap_put_ns4__SetTestConfigurationResponse(soap, p, "ns4:SetTestConfigurationResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetTestConfigurationResponse * SOAP_FMAC4 soap_get_ns4__SetTestConfigurationResponse(struct soap*, struct ns4__SetTestConfigurationResponse *, const char*, const char*);

inline int soap_read_ns4__SetTestConfigurationResponse(struct soap *soap, struct ns4__SetTestConfigurationResponse *p)
{
	if (p)
	{	::soap_default_ns4__SetTestConfigurationResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetTestConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetTestConfigurationResponse(struct soap *soap, const char *URL, struct ns4__SetTestConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetTestConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetTestConfigurationResponse(struct soap *soap, struct ns4__SetTestConfigurationResponse *p)
{
	if (::soap_read_ns4__SetTestConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTestConfiguration_DEFINED
#define SOAP_TYPE_ns4__GetTestConfiguration_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTestConfiguration(struct soap*, struct ns4__GetTestConfiguration *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTestConfiguration(struct soap*, const struct ns4__GetTestConfiguration *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTestConfiguration(struct soap*, const char*, int, const struct ns4__GetTestConfiguration *, const char*);
SOAP_FMAC3 struct ns4__GetTestConfiguration * SOAP_FMAC4 soap_in_ns4__GetTestConfiguration(struct soap*, const char*, struct ns4__GetTestConfiguration *, const char*);
SOAP_FMAC1 struct ns4__GetTestConfiguration * SOAP_FMAC2 soap_instantiate_ns4__GetTestConfiguration(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTestConfiguration * soap_new_ns4__GetTestConfiguration(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTestConfiguration(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTestConfiguration * soap_new_req_ns4__GetTestConfiguration(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetTestConfiguration *_p = ::soap_new_ns4__GetTestConfiguration(soap);
	if (_p)
	{	::soap_default_ns4__GetTestConfiguration(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}

inline struct ns4__GetTestConfiguration * soap_new_set_ns4__GetTestConfiguration(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetTestConfiguration *_p = ::soap_new_ns4__GetTestConfiguration(soap);
	if (_p)
	{	::soap_default_ns4__GetTestConfiguration(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTestConfiguration(struct soap*, const struct ns4__GetTestConfiguration *, const char*, const char*);

inline int soap_write_ns4__GetTestConfiguration(struct soap *soap, struct ns4__GetTestConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTestConfiguration(soap, p), 0) || ::soap_put_ns4__GetTestConfiguration(soap, p, "ns4:GetTestConfiguration", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTestConfiguration(struct soap *soap, const char *URL, struct ns4__GetTestConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestConfiguration(soap, p), 0) || ::soap_put_ns4__GetTestConfiguration(soap, p, "ns4:GetTestConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTestConfiguration(struct soap *soap, const char *URL, struct ns4__GetTestConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestConfiguration(soap, p), 0) || ::soap_put_ns4__GetTestConfiguration(soap, p, "ns4:GetTestConfiguration", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTestConfiguration(struct soap *soap, const char *URL, struct ns4__GetTestConfiguration const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestConfiguration(soap, p), 0) || ::soap_put_ns4__GetTestConfiguration(soap, p, "ns4:GetTestConfiguration", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTestConfiguration * SOAP_FMAC4 soap_get_ns4__GetTestConfiguration(struct soap*, struct ns4__GetTestConfiguration *, const char*, const char*);

inline int soap_read_ns4__GetTestConfiguration(struct soap *soap, struct ns4__GetTestConfiguration *p)
{
	if (p)
	{	::soap_default_ns4__GetTestConfiguration(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTestConfiguration(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTestConfiguration(struct soap *soap, const char *URL, struct ns4__GetTestConfiguration *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTestConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTestConfiguration(struct soap *soap, struct ns4__GetTestConfiguration *p)
{
	if (::soap_read_ns4__GetTestConfiguration(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTestConfigurationResponse_DEFINED
#define SOAP_TYPE_ns4__GetTestConfigurationResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTestConfigurationResponse(struct soap*, struct ns4__GetTestConfigurationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTestConfigurationResponse(struct soap*, const struct ns4__GetTestConfigurationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTestConfigurationResponse(struct soap*, const char*, int, const struct ns4__GetTestConfigurationResponse *, const char*);
SOAP_FMAC3 struct ns4__GetTestConfigurationResponse * SOAP_FMAC4 soap_in_ns4__GetTestConfigurationResponse(struct soap*, const char*, struct ns4__GetTestConfigurationResponse *, const char*);
SOAP_FMAC1 struct ns4__GetTestConfigurationResponse * SOAP_FMAC2 soap_instantiate_ns4__GetTestConfigurationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTestConfigurationResponse * soap_new_ns4__GetTestConfigurationResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTestConfigurationResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTestConfigurationResponse * soap_new_req_ns4__GetTestConfigurationResponse(
	struct soap *soap,
	const std::string& return_)
{
	struct ns4__GetTestConfigurationResponse *_p = ::soap_new_ns4__GetTestConfigurationResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTestConfigurationResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__GetTestConfigurationResponse * soap_new_set_ns4__GetTestConfigurationResponse(
	struct soap *soap,
	const std::string& return_)
{
	struct ns4__GetTestConfigurationResponse *_p = ::soap_new_ns4__GetTestConfigurationResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTestConfigurationResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTestConfigurationResponse(struct soap*, const struct ns4__GetTestConfigurationResponse *, const char*, const char*);

inline int soap_write_ns4__GetTestConfigurationResponse(struct soap *soap, struct ns4__GetTestConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTestConfigurationResponse(soap, p), 0) || ::soap_put_ns4__GetTestConfigurationResponse(soap, p, "ns4:GetTestConfigurationResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTestConfigurationResponse(struct soap *soap, const char *URL, struct ns4__GetTestConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestConfigurationResponse(soap, p), 0) || ::soap_put_ns4__GetTestConfigurationResponse(soap, p, "ns4:GetTestConfigurationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTestConfigurationResponse(struct soap *soap, const char *URL, struct ns4__GetTestConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestConfigurationResponse(soap, p), 0) || ::soap_put_ns4__GetTestConfigurationResponse(soap, p, "ns4:GetTestConfigurationResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTestConfigurationResponse(struct soap *soap, const char *URL, struct ns4__GetTestConfigurationResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestConfigurationResponse(soap, p), 0) || ::soap_put_ns4__GetTestConfigurationResponse(soap, p, "ns4:GetTestConfigurationResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTestConfigurationResponse * SOAP_FMAC4 soap_get_ns4__GetTestConfigurationResponse(struct soap*, struct ns4__GetTestConfigurationResponse *, const char*, const char*);

inline int soap_read_ns4__GetTestConfigurationResponse(struct soap *soap, struct ns4__GetTestConfigurationResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetTestConfigurationResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTestConfigurationResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTestConfigurationResponse(struct soap *soap, const char *URL, struct ns4__GetTestConfigurationResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTestConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTestConfigurationResponse(struct soap *soap, struct ns4__GetTestConfigurationResponse *p)
{
	if (::soap_read_ns4__GetTestConfigurationResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetPressTestResult_DEFINED
#define SOAP_TYPE_ns4__GetPressTestResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetPressTestResult(struct soap*, struct ns4__GetPressTestResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetPressTestResult(struct soap*, const struct ns4__GetPressTestResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetPressTestResult(struct soap*, const char*, int, const struct ns4__GetPressTestResult *, const char*);
SOAP_FMAC3 struct ns4__GetPressTestResult * SOAP_FMAC4 soap_in_ns4__GetPressTestResult(struct soap*, const char*, struct ns4__GetPressTestResult *, const char*);
SOAP_FMAC1 struct ns4__GetPressTestResult * SOAP_FMAC2 soap_instantiate_ns4__GetPressTestResult(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetPressTestResult * soap_new_ns4__GetPressTestResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetPressTestResult(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetPressTestResult * soap_new_req_ns4__GetPressTestResult(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetPressTestResult *_p = ::soap_new_ns4__GetPressTestResult(soap);
	if (_p)
	{	::soap_default_ns4__GetPressTestResult(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}

inline struct ns4__GetPressTestResult * soap_new_set_ns4__GetPressTestResult(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetPressTestResult *_p = ::soap_new_ns4__GetPressTestResult(soap);
	if (_p)
	{	::soap_default_ns4__GetPressTestResult(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetPressTestResult(struct soap*, const struct ns4__GetPressTestResult *, const char*, const char*);

inline int soap_write_ns4__GetPressTestResult(struct soap *soap, struct ns4__GetPressTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetPressTestResult(soap, p), 0) || ::soap_put_ns4__GetPressTestResult(soap, p, "ns4:GetPressTestResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetPressTestResult(struct soap *soap, const char *URL, struct ns4__GetPressTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestResult(soap, p), 0) || ::soap_put_ns4__GetPressTestResult(soap, p, "ns4:GetPressTestResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetPressTestResult(struct soap *soap, const char *URL, struct ns4__GetPressTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestResult(soap, p), 0) || ::soap_put_ns4__GetPressTestResult(soap, p, "ns4:GetPressTestResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetPressTestResult(struct soap *soap, const char *URL, struct ns4__GetPressTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestResult(soap, p), 0) || ::soap_put_ns4__GetPressTestResult(soap, p, "ns4:GetPressTestResult", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetPressTestResult * SOAP_FMAC4 soap_get_ns4__GetPressTestResult(struct soap*, struct ns4__GetPressTestResult *, const char*, const char*);

inline int soap_read_ns4__GetPressTestResult(struct soap *soap, struct ns4__GetPressTestResult *p)
{
	if (p)
	{	::soap_default_ns4__GetPressTestResult(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetPressTestResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetPressTestResult(struct soap *soap, const char *URL, struct ns4__GetPressTestResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetPressTestResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetPressTestResult(struct soap *soap, struct ns4__GetPressTestResult *p)
{
	if (::soap_read_ns4__GetPressTestResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetPressTestResultResponse_DEFINED
#define SOAP_TYPE_ns4__GetPressTestResultResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetPressTestResultResponse(struct soap*, struct ns4__GetPressTestResultResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetPressTestResultResponse(struct soap*, const struct ns4__GetPressTestResultResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetPressTestResultResponse(struct soap*, const char*, int, const struct ns4__GetPressTestResultResponse *, const char*);
SOAP_FMAC3 struct ns4__GetPressTestResultResponse * SOAP_FMAC4 soap_in_ns4__GetPressTestResultResponse(struct soap*, const char*, struct ns4__GetPressTestResultResponse *, const char*);
SOAP_FMAC1 struct ns4__GetPressTestResultResponse * SOAP_FMAC2 soap_instantiate_ns4__GetPressTestResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetPressTestResultResponse * soap_new_ns4__GetPressTestResultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetPressTestResultResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetPressTestResultResponse * soap_new_req_ns4__GetPressTestResultResponse(
	struct soap *soap)
{
	struct ns4__GetPressTestResultResponse *_p = ::soap_new_ns4__GetPressTestResultResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetPressTestResultResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetPressTestResultResponse * soap_new_set_ns4__GetPressTestResultResponse(
	struct soap *soap,
	ns3__TPressTestResult *return_)
{
	struct ns4__GetPressTestResultResponse *_p = ::soap_new_ns4__GetPressTestResultResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetPressTestResultResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetPressTestResultResponse(struct soap*, const struct ns4__GetPressTestResultResponse *, const char*, const char*);

inline int soap_write_ns4__GetPressTestResultResponse(struct soap *soap, struct ns4__GetPressTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetPressTestResultResponse(soap, p), 0) || ::soap_put_ns4__GetPressTestResultResponse(soap, p, "ns4:GetPressTestResultResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetPressTestResultResponse(struct soap *soap, const char *URL, struct ns4__GetPressTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestResultResponse(soap, p), 0) || ::soap_put_ns4__GetPressTestResultResponse(soap, p, "ns4:GetPressTestResultResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetPressTestResultResponse(struct soap *soap, const char *URL, struct ns4__GetPressTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestResultResponse(soap, p), 0) || ::soap_put_ns4__GetPressTestResultResponse(soap, p, "ns4:GetPressTestResultResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetPressTestResultResponse(struct soap *soap, const char *URL, struct ns4__GetPressTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestResultResponse(soap, p), 0) || ::soap_put_ns4__GetPressTestResultResponse(soap, p, "ns4:GetPressTestResultResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetPressTestResultResponse * SOAP_FMAC4 soap_get_ns4__GetPressTestResultResponse(struct soap*, struct ns4__GetPressTestResultResponse *, const char*, const char*);

inline int soap_read_ns4__GetPressTestResultResponse(struct soap *soap, struct ns4__GetPressTestResultResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetPressTestResultResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetPressTestResultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetPressTestResultResponse(struct soap *soap, const char *URL, struct ns4__GetPressTestResultResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetPressTestResultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetPressTestResultResponse(struct soap *soap, struct ns4__GetPressTestResultResponse *p)
{
	if (::soap_read_ns4__GetPressTestResultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTestResult_DEFINED
#define SOAP_TYPE_ns4__GetTestResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTestResult(struct soap*, struct ns4__GetTestResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTestResult(struct soap*, const struct ns4__GetTestResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTestResult(struct soap*, const char*, int, const struct ns4__GetTestResult *, const char*);
SOAP_FMAC3 struct ns4__GetTestResult * SOAP_FMAC4 soap_in_ns4__GetTestResult(struct soap*, const char*, struct ns4__GetTestResult *, const char*);
SOAP_FMAC1 struct ns4__GetTestResult * SOAP_FMAC2 soap_instantiate_ns4__GetTestResult(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTestResult * soap_new_ns4__GetTestResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTestResult(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTestResult * soap_new_req_ns4__GetTestResult(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetTestResult *_p = ::soap_new_ns4__GetTestResult(soap);
	if (_p)
	{	::soap_default_ns4__GetTestResult(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}

inline struct ns4__GetTestResult * soap_new_set_ns4__GetTestResult(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetTestResult *_p = ::soap_new_ns4__GetTestResult(soap);
	if (_p)
	{	::soap_default_ns4__GetTestResult(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTestResult(struct soap*, const struct ns4__GetTestResult *, const char*, const char*);

inline int soap_write_ns4__GetTestResult(struct soap *soap, struct ns4__GetTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTestResult(soap, p), 0) || ::soap_put_ns4__GetTestResult(soap, p, "ns4:GetTestResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTestResult(struct soap *soap, const char *URL, struct ns4__GetTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResult(soap, p), 0) || ::soap_put_ns4__GetTestResult(soap, p, "ns4:GetTestResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTestResult(struct soap *soap, const char *URL, struct ns4__GetTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResult(soap, p), 0) || ::soap_put_ns4__GetTestResult(soap, p, "ns4:GetTestResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTestResult(struct soap *soap, const char *URL, struct ns4__GetTestResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResult(soap, p), 0) || ::soap_put_ns4__GetTestResult(soap, p, "ns4:GetTestResult", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTestResult * SOAP_FMAC4 soap_get_ns4__GetTestResult(struct soap*, struct ns4__GetTestResult *, const char*, const char*);

inline int soap_read_ns4__GetTestResult(struct soap *soap, struct ns4__GetTestResult *p)
{
	if (p)
	{	::soap_default_ns4__GetTestResult(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTestResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTestResult(struct soap *soap, const char *URL, struct ns4__GetTestResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTestResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTestResult(struct soap *soap, struct ns4__GetTestResult *p)
{
	if (::soap_read_ns4__GetTestResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTestResultResponse_DEFINED
#define SOAP_TYPE_ns4__GetTestResultResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTestResultResponse(struct soap*, struct ns4__GetTestResultResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTestResultResponse(struct soap*, const struct ns4__GetTestResultResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTestResultResponse(struct soap*, const char*, int, const struct ns4__GetTestResultResponse *, const char*);
SOAP_FMAC3 struct ns4__GetTestResultResponse * SOAP_FMAC4 soap_in_ns4__GetTestResultResponse(struct soap*, const char*, struct ns4__GetTestResultResponse *, const char*);
SOAP_FMAC1 struct ns4__GetTestResultResponse * SOAP_FMAC2 soap_instantiate_ns4__GetTestResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTestResultResponse * soap_new_ns4__GetTestResultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTestResultResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTestResultResponse * soap_new_req_ns4__GetTestResultResponse(
	struct soap *soap)
{
	struct ns4__GetTestResultResponse *_p = ::soap_new_ns4__GetTestResultResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTestResultResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetTestResultResponse * soap_new_set_ns4__GetTestResultResponse(
	struct soap *soap,
	ns3__TTestResult *return_)
{
	struct ns4__GetTestResultResponse *_p = ::soap_new_ns4__GetTestResultResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTestResultResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTestResultResponse(struct soap*, const struct ns4__GetTestResultResponse *, const char*, const char*);

inline int soap_write_ns4__GetTestResultResponse(struct soap *soap, struct ns4__GetTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTestResultResponse(soap, p), 0) || ::soap_put_ns4__GetTestResultResponse(soap, p, "ns4:GetTestResultResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTestResultResponse(struct soap *soap, const char *URL, struct ns4__GetTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResultResponse(soap, p), 0) || ::soap_put_ns4__GetTestResultResponse(soap, p, "ns4:GetTestResultResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTestResultResponse(struct soap *soap, const char *URL, struct ns4__GetTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResultResponse(soap, p), 0) || ::soap_put_ns4__GetTestResultResponse(soap, p, "ns4:GetTestResultResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTestResultResponse(struct soap *soap, const char *URL, struct ns4__GetTestResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResultResponse(soap, p), 0) || ::soap_put_ns4__GetTestResultResponse(soap, p, "ns4:GetTestResultResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTestResultResponse * SOAP_FMAC4 soap_get_ns4__GetTestResultResponse(struct soap*, struct ns4__GetTestResultResponse *, const char*, const char*);

inline int soap_read_ns4__GetTestResultResponse(struct soap *soap, struct ns4__GetTestResultResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetTestResultResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTestResultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTestResultResponse(struct soap *soap, const char *URL, struct ns4__GetTestResultResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTestResultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTestResultResponse(struct soap *soap, struct ns4__GetTestResultResponse *p)
{
	if (::soap_read_ns4__GetTestResultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMeterResult_DEFINED
#define SOAP_TYPE_ns4__GetMeterResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMeterResult(struct soap*, struct ns4__GetMeterResult *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMeterResult(struct soap*, const struct ns4__GetMeterResult *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMeterResult(struct soap*, const char*, int, const struct ns4__GetMeterResult *, const char*);
SOAP_FMAC3 struct ns4__GetMeterResult * SOAP_FMAC4 soap_in_ns4__GetMeterResult(struct soap*, const char*, struct ns4__GetMeterResult *, const char*);
SOAP_FMAC1 struct ns4__GetMeterResult * SOAP_FMAC2 soap_instantiate_ns4__GetMeterResult(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMeterResult * soap_new_ns4__GetMeterResult(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMeterResult(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMeterResult * soap_new_req_ns4__GetMeterResult(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	int MeterPos)
{
	struct ns4__GetMeterResult *_p = ::soap_new_ns4__GetMeterResult(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterResult(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->MeterPos = MeterPos;
	}
	return _p;
}

inline struct ns4__GetMeterResult * soap_new_set_ns4__GetMeterResult(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	int MeterPos)
{
	struct ns4__GetMeterResult *_p = ::soap_new_ns4__GetMeterResult(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterResult(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->MeterPos = MeterPos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMeterResult(struct soap*, const struct ns4__GetMeterResult *, const char*, const char*);

inline int soap_write_ns4__GetMeterResult(struct soap *soap, struct ns4__GetMeterResult const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMeterResult(soap, p), 0) || ::soap_put_ns4__GetMeterResult(soap, p, "ns4:GetMeterResult", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMeterResult(struct soap *soap, const char *URL, struct ns4__GetMeterResult const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterResult(soap, p), 0) || ::soap_put_ns4__GetMeterResult(soap, p, "ns4:GetMeterResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMeterResult(struct soap *soap, const char *URL, struct ns4__GetMeterResult const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterResult(soap, p), 0) || ::soap_put_ns4__GetMeterResult(soap, p, "ns4:GetMeterResult", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMeterResult(struct soap *soap, const char *URL, struct ns4__GetMeterResult const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterResult(soap, p), 0) || ::soap_put_ns4__GetMeterResult(soap, p, "ns4:GetMeterResult", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMeterResult * SOAP_FMAC4 soap_get_ns4__GetMeterResult(struct soap*, struct ns4__GetMeterResult *, const char*, const char*);

inline int soap_read_ns4__GetMeterResult(struct soap *soap, struct ns4__GetMeterResult *p)
{
	if (p)
	{	::soap_default_ns4__GetMeterResult(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMeterResult(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMeterResult(struct soap *soap, const char *URL, struct ns4__GetMeterResult *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMeterResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMeterResult(struct soap *soap, struct ns4__GetMeterResult *p)
{
	if (::soap_read_ns4__GetMeterResult(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMeterResultResponse_DEFINED
#define SOAP_TYPE_ns4__GetMeterResultResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMeterResultResponse(struct soap*, struct ns4__GetMeterResultResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMeterResultResponse(struct soap*, const struct ns4__GetMeterResultResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMeterResultResponse(struct soap*, const char*, int, const struct ns4__GetMeterResultResponse *, const char*);
SOAP_FMAC3 struct ns4__GetMeterResultResponse * SOAP_FMAC4 soap_in_ns4__GetMeterResultResponse(struct soap*, const char*, struct ns4__GetMeterResultResponse *, const char*);
SOAP_FMAC1 struct ns4__GetMeterResultResponse * SOAP_FMAC2 soap_instantiate_ns4__GetMeterResultResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMeterResultResponse * soap_new_ns4__GetMeterResultResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMeterResultResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMeterResultResponse * soap_new_req_ns4__GetMeterResultResponse(
	struct soap *soap)
{
	struct ns4__GetMeterResultResponse *_p = ::soap_new_ns4__GetMeterResultResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterResultResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetMeterResultResponse * soap_new_set_ns4__GetMeterResultResponse(
	struct soap *soap,
	ns3__TMeterResult *return_)
{
	struct ns4__GetMeterResultResponse *_p = ::soap_new_ns4__GetMeterResultResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterResultResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMeterResultResponse(struct soap*, const struct ns4__GetMeterResultResponse *, const char*, const char*);

inline int soap_write_ns4__GetMeterResultResponse(struct soap *soap, struct ns4__GetMeterResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMeterResultResponse(soap, p), 0) || ::soap_put_ns4__GetMeterResultResponse(soap, p, "ns4:GetMeterResultResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMeterResultResponse(struct soap *soap, const char *URL, struct ns4__GetMeterResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterResultResponse(soap, p), 0) || ::soap_put_ns4__GetMeterResultResponse(soap, p, "ns4:GetMeterResultResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMeterResultResponse(struct soap *soap, const char *URL, struct ns4__GetMeterResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterResultResponse(soap, p), 0) || ::soap_put_ns4__GetMeterResultResponse(soap, p, "ns4:GetMeterResultResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMeterResultResponse(struct soap *soap, const char *URL, struct ns4__GetMeterResultResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterResultResponse(soap, p), 0) || ::soap_put_ns4__GetMeterResultResponse(soap, p, "ns4:GetMeterResultResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMeterResultResponse * SOAP_FMAC4 soap_get_ns4__GetMeterResultResponse(struct soap*, struct ns4__GetMeterResultResponse *, const char*, const char*);

inline int soap_read_ns4__GetMeterResultResponse(struct soap *soap, struct ns4__GetMeterResultResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetMeterResultResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMeterResultResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMeterResultResponse(struct soap *soap, const char *URL, struct ns4__GetMeterResultResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMeterResultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMeterResultResponse(struct soap *soap, struct ns4__GetMeterResultResponse *p)
{
	if (::soap_read_ns4__GetMeterResultResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTestResults_DEFINED
#define SOAP_TYPE_ns4__GetTestResults_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTestResults(struct soap*, struct ns4__GetTestResults *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTestResults(struct soap*, const struct ns4__GetTestResults *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTestResults(struct soap*, const char*, int, const struct ns4__GetTestResults *, const char*);
SOAP_FMAC3 struct ns4__GetTestResults * SOAP_FMAC4 soap_in_ns4__GetTestResults(struct soap*, const char*, struct ns4__GetTestResults *, const char*);
SOAP_FMAC1 struct ns4__GetTestResults * SOAP_FMAC2 soap_instantiate_ns4__GetTestResults(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTestResults * soap_new_ns4__GetTestResults(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTestResults(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTestResults * soap_new_req_ns4__GetTestResults(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetTestResults *_p = ::soap_new_ns4__GetTestResults(soap);
	if (_p)
	{	::soap_default_ns4__GetTestResults(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}

inline struct ns4__GetTestResults * soap_new_set_ns4__GetTestResults(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	TIntegerDynArray *MetersPos)
{
	struct ns4__GetTestResults *_p = ::soap_new_ns4__GetTestResults(soap);
	if (_p)
	{	::soap_default_ns4__GetTestResults(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->MetersPos = MetersPos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTestResults(struct soap*, const struct ns4__GetTestResults *, const char*, const char*);

inline int soap_write_ns4__GetTestResults(struct soap *soap, struct ns4__GetTestResults const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTestResults(soap, p), 0) || ::soap_put_ns4__GetTestResults(soap, p, "ns4:GetTestResults", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTestResults(struct soap *soap, const char *URL, struct ns4__GetTestResults const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResults(soap, p), 0) || ::soap_put_ns4__GetTestResults(soap, p, "ns4:GetTestResults", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTestResults(struct soap *soap, const char *URL, struct ns4__GetTestResults const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResults(soap, p), 0) || ::soap_put_ns4__GetTestResults(soap, p, "ns4:GetTestResults", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTestResults(struct soap *soap, const char *URL, struct ns4__GetTestResults const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResults(soap, p), 0) || ::soap_put_ns4__GetTestResults(soap, p, "ns4:GetTestResults", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTestResults * SOAP_FMAC4 soap_get_ns4__GetTestResults(struct soap*, struct ns4__GetTestResults *, const char*, const char*);

inline int soap_read_ns4__GetTestResults(struct soap *soap, struct ns4__GetTestResults *p)
{
	if (p)
	{	::soap_default_ns4__GetTestResults(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTestResults(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTestResults(struct soap *soap, const char *URL, struct ns4__GetTestResults *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTestResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTestResults(struct soap *soap, struct ns4__GetTestResults *p)
{
	if (::soap_read_ns4__GetTestResults(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTestResultsResponse_DEFINED
#define SOAP_TYPE_ns4__GetTestResultsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTestResultsResponse(struct soap*, struct ns4__GetTestResultsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTestResultsResponse(struct soap*, const struct ns4__GetTestResultsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTestResultsResponse(struct soap*, const char*, int, const struct ns4__GetTestResultsResponse *, const char*);
SOAP_FMAC3 struct ns4__GetTestResultsResponse * SOAP_FMAC4 soap_in_ns4__GetTestResultsResponse(struct soap*, const char*, struct ns4__GetTestResultsResponse *, const char*);
SOAP_FMAC1 struct ns4__GetTestResultsResponse * SOAP_FMAC2 soap_instantiate_ns4__GetTestResultsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTestResultsResponse * soap_new_ns4__GetTestResultsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTestResultsResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTestResultsResponse * soap_new_req_ns4__GetTestResultsResponse(
	struct soap *soap)
{
	struct ns4__GetTestResultsResponse *_p = ::soap_new_ns4__GetTestResultsResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTestResultsResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetTestResultsResponse * soap_new_set_ns4__GetTestResultsResponse(
	struct soap *soap,
	ns3__TTestResults *return_)
{
	struct ns4__GetTestResultsResponse *_p = ::soap_new_ns4__GetTestResultsResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTestResultsResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTestResultsResponse(struct soap*, const struct ns4__GetTestResultsResponse *, const char*, const char*);

inline int soap_write_ns4__GetTestResultsResponse(struct soap *soap, struct ns4__GetTestResultsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTestResultsResponse(soap, p), 0) || ::soap_put_ns4__GetTestResultsResponse(soap, p, "ns4:GetTestResultsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTestResultsResponse(struct soap *soap, const char *URL, struct ns4__GetTestResultsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResultsResponse(soap, p), 0) || ::soap_put_ns4__GetTestResultsResponse(soap, p, "ns4:GetTestResultsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTestResultsResponse(struct soap *soap, const char *URL, struct ns4__GetTestResultsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResultsResponse(soap, p), 0) || ::soap_put_ns4__GetTestResultsResponse(soap, p, "ns4:GetTestResultsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTestResultsResponse(struct soap *soap, const char *URL, struct ns4__GetTestResultsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestResultsResponse(soap, p), 0) || ::soap_put_ns4__GetTestResultsResponse(soap, p, "ns4:GetTestResultsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTestResultsResponse * SOAP_FMAC4 soap_get_ns4__GetTestResultsResponse(struct soap*, struct ns4__GetTestResultsResponse *, const char*, const char*);

inline int soap_read_ns4__GetTestResultsResponse(struct soap *soap, struct ns4__GetTestResultsResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetTestResultsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTestResultsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTestResultsResponse(struct soap *soap, const char *URL, struct ns4__GetTestResultsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTestResultsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTestResultsResponse(struct soap *soap, struct ns4__GetTestResultsResponse *p)
{
	if (::soap_read_ns4__GetTestResultsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMeasurementData_DEFINED
#define SOAP_TYPE_ns4__GetMeasurementData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMeasurementData(struct soap*, struct ns4__GetMeasurementData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMeasurementData(struct soap*, const struct ns4__GetMeasurementData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMeasurementData(struct soap*, const char*, int, const struct ns4__GetMeasurementData *, const char*);
SOAP_FMAC3 struct ns4__GetMeasurementData * SOAP_FMAC4 soap_in_ns4__GetMeasurementData(struct soap*, const char*, struct ns4__GetMeasurementData *, const char*);
SOAP_FMAC1 struct ns4__GetMeasurementData * SOAP_FMAC2 soap_instantiate_ns4__GetMeasurementData(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMeasurementData * soap_new_ns4__GetMeasurementData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMeasurementData(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMeasurementData * soap_new_req_ns4__GetMeasurementData(
	struct soap *soap,
	int Bench)
{
	struct ns4__GetMeasurementData *_p = ::soap_new_ns4__GetMeasurementData(soap);
	if (_p)
	{	::soap_default_ns4__GetMeasurementData(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}

inline struct ns4__GetMeasurementData * soap_new_set_ns4__GetMeasurementData(
	struct soap *soap,
	int Bench)
{
	struct ns4__GetMeasurementData *_p = ::soap_new_ns4__GetMeasurementData(soap);
	if (_p)
	{	::soap_default_ns4__GetMeasurementData(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMeasurementData(struct soap*, const struct ns4__GetMeasurementData *, const char*, const char*);

inline int soap_write_ns4__GetMeasurementData(struct soap *soap, struct ns4__GetMeasurementData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMeasurementData(soap, p), 0) || ::soap_put_ns4__GetMeasurementData(soap, p, "ns4:GetMeasurementData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMeasurementData(struct soap *soap, const char *URL, struct ns4__GetMeasurementData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeasurementData(soap, p), 0) || ::soap_put_ns4__GetMeasurementData(soap, p, "ns4:GetMeasurementData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMeasurementData(struct soap *soap, const char *URL, struct ns4__GetMeasurementData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeasurementData(soap, p), 0) || ::soap_put_ns4__GetMeasurementData(soap, p, "ns4:GetMeasurementData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMeasurementData(struct soap *soap, const char *URL, struct ns4__GetMeasurementData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeasurementData(soap, p), 0) || ::soap_put_ns4__GetMeasurementData(soap, p, "ns4:GetMeasurementData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMeasurementData * SOAP_FMAC4 soap_get_ns4__GetMeasurementData(struct soap*, struct ns4__GetMeasurementData *, const char*, const char*);

inline int soap_read_ns4__GetMeasurementData(struct soap *soap, struct ns4__GetMeasurementData *p)
{
	if (p)
	{	::soap_default_ns4__GetMeasurementData(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMeasurementData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMeasurementData(struct soap *soap, const char *URL, struct ns4__GetMeasurementData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMeasurementData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMeasurementData(struct soap *soap, struct ns4__GetMeasurementData *p)
{
	if (::soap_read_ns4__GetMeasurementData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMeasurementDataResponse_DEFINED
#define SOAP_TYPE_ns4__GetMeasurementDataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMeasurementDataResponse(struct soap*, struct ns4__GetMeasurementDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMeasurementDataResponse(struct soap*, const struct ns4__GetMeasurementDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMeasurementDataResponse(struct soap*, const char*, int, const struct ns4__GetMeasurementDataResponse *, const char*);
SOAP_FMAC3 struct ns4__GetMeasurementDataResponse * SOAP_FMAC4 soap_in_ns4__GetMeasurementDataResponse(struct soap*, const char*, struct ns4__GetMeasurementDataResponse *, const char*);
SOAP_FMAC1 struct ns4__GetMeasurementDataResponse * SOAP_FMAC2 soap_instantiate_ns4__GetMeasurementDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMeasurementDataResponse * soap_new_ns4__GetMeasurementDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMeasurementDataResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMeasurementDataResponse * soap_new_req_ns4__GetMeasurementDataResponse(
	struct soap *soap)
{
	struct ns4__GetMeasurementDataResponse *_p = ::soap_new_ns4__GetMeasurementDataResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMeasurementDataResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetMeasurementDataResponse * soap_new_set_ns4__GetMeasurementDataResponse(
	struct soap *soap,
	ns3__TMeasurementData *return_)
{
	struct ns4__GetMeasurementDataResponse *_p = ::soap_new_ns4__GetMeasurementDataResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMeasurementDataResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMeasurementDataResponse(struct soap*, const struct ns4__GetMeasurementDataResponse *, const char*, const char*);

inline int soap_write_ns4__GetMeasurementDataResponse(struct soap *soap, struct ns4__GetMeasurementDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMeasurementDataResponse(soap, p), 0) || ::soap_put_ns4__GetMeasurementDataResponse(soap, p, "ns4:GetMeasurementDataResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMeasurementDataResponse(struct soap *soap, const char *URL, struct ns4__GetMeasurementDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeasurementDataResponse(soap, p), 0) || ::soap_put_ns4__GetMeasurementDataResponse(soap, p, "ns4:GetMeasurementDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMeasurementDataResponse(struct soap *soap, const char *URL, struct ns4__GetMeasurementDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeasurementDataResponse(soap, p), 0) || ::soap_put_ns4__GetMeasurementDataResponse(soap, p, "ns4:GetMeasurementDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMeasurementDataResponse(struct soap *soap, const char *URL, struct ns4__GetMeasurementDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeasurementDataResponse(soap, p), 0) || ::soap_put_ns4__GetMeasurementDataResponse(soap, p, "ns4:GetMeasurementDataResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMeasurementDataResponse * SOAP_FMAC4 soap_get_ns4__GetMeasurementDataResponse(struct soap*, struct ns4__GetMeasurementDataResponse *, const char*, const char*);

inline int soap_read_ns4__GetMeasurementDataResponse(struct soap *soap, struct ns4__GetMeasurementDataResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetMeasurementDataResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMeasurementDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMeasurementDataResponse(struct soap *soap, const char *URL, struct ns4__GetMeasurementDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMeasurementDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMeasurementDataResponse(struct soap *soap, struct ns4__GetMeasurementDataResponse *p)
{
	if (::soap_read_ns4__GetMeasurementDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMeterPositions_DEFINED
#define SOAP_TYPE_ns4__GetMeterPositions_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMeterPositions(struct soap*, struct ns4__GetMeterPositions *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMeterPositions(struct soap*, const struct ns4__GetMeterPositions *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMeterPositions(struct soap*, const char*, int, const struct ns4__GetMeterPositions *, const char*);
SOAP_FMAC3 struct ns4__GetMeterPositions * SOAP_FMAC4 soap_in_ns4__GetMeterPositions(struct soap*, const char*, struct ns4__GetMeterPositions *, const char*);
SOAP_FMAC1 struct ns4__GetMeterPositions * SOAP_FMAC2 soap_instantiate_ns4__GetMeterPositions(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMeterPositions * soap_new_ns4__GetMeterPositions(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMeterPositions(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMeterPositions * soap_new_req_ns4__GetMeterPositions(
	struct soap *soap,
	int Bench)
{
	struct ns4__GetMeterPositions *_p = ::soap_new_ns4__GetMeterPositions(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterPositions(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}

inline struct ns4__GetMeterPositions * soap_new_set_ns4__GetMeterPositions(
	struct soap *soap,
	int Bench)
{
	struct ns4__GetMeterPositions *_p = ::soap_new_ns4__GetMeterPositions(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterPositions(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMeterPositions(struct soap*, const struct ns4__GetMeterPositions *, const char*, const char*);

inline int soap_write_ns4__GetMeterPositions(struct soap *soap, struct ns4__GetMeterPositions const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMeterPositions(soap, p), 0) || ::soap_put_ns4__GetMeterPositions(soap, p, "ns4:GetMeterPositions", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMeterPositions(struct soap *soap, const char *URL, struct ns4__GetMeterPositions const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterPositions(soap, p), 0) || ::soap_put_ns4__GetMeterPositions(soap, p, "ns4:GetMeterPositions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMeterPositions(struct soap *soap, const char *URL, struct ns4__GetMeterPositions const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterPositions(soap, p), 0) || ::soap_put_ns4__GetMeterPositions(soap, p, "ns4:GetMeterPositions", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMeterPositions(struct soap *soap, const char *URL, struct ns4__GetMeterPositions const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterPositions(soap, p), 0) || ::soap_put_ns4__GetMeterPositions(soap, p, "ns4:GetMeterPositions", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMeterPositions * SOAP_FMAC4 soap_get_ns4__GetMeterPositions(struct soap*, struct ns4__GetMeterPositions *, const char*, const char*);

inline int soap_read_ns4__GetMeterPositions(struct soap *soap, struct ns4__GetMeterPositions *p)
{
	if (p)
	{	::soap_default_ns4__GetMeterPositions(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMeterPositions(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMeterPositions(struct soap *soap, const char *URL, struct ns4__GetMeterPositions *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMeterPositions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMeterPositions(struct soap *soap, struct ns4__GetMeterPositions *p)
{
	if (::soap_read_ns4__GetMeterPositions(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMeterPositionsResponse_DEFINED
#define SOAP_TYPE_ns4__GetMeterPositionsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMeterPositionsResponse(struct soap*, struct ns4__GetMeterPositionsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMeterPositionsResponse(struct soap*, const struct ns4__GetMeterPositionsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMeterPositionsResponse(struct soap*, const char*, int, const struct ns4__GetMeterPositionsResponse *, const char*);
SOAP_FMAC3 struct ns4__GetMeterPositionsResponse * SOAP_FMAC4 soap_in_ns4__GetMeterPositionsResponse(struct soap*, const char*, struct ns4__GetMeterPositionsResponse *, const char*);
SOAP_FMAC1 struct ns4__GetMeterPositionsResponse * SOAP_FMAC2 soap_instantiate_ns4__GetMeterPositionsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMeterPositionsResponse * soap_new_ns4__GetMeterPositionsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMeterPositionsResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMeterPositionsResponse * soap_new_req_ns4__GetMeterPositionsResponse(
	struct soap *soap)
{
	struct ns4__GetMeterPositionsResponse *_p = ::soap_new_ns4__GetMeterPositionsResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterPositionsResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetMeterPositionsResponse * soap_new_set_ns4__GetMeterPositionsResponse(
	struct soap *soap,
	TBooleanDynArray *return_)
{
	struct ns4__GetMeterPositionsResponse *_p = ::soap_new_ns4__GetMeterPositionsResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterPositionsResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMeterPositionsResponse(struct soap*, const struct ns4__GetMeterPositionsResponse *, const char*, const char*);

inline int soap_write_ns4__GetMeterPositionsResponse(struct soap *soap, struct ns4__GetMeterPositionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMeterPositionsResponse(soap, p), 0) || ::soap_put_ns4__GetMeterPositionsResponse(soap, p, "ns4:GetMeterPositionsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMeterPositionsResponse(struct soap *soap, const char *URL, struct ns4__GetMeterPositionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterPositionsResponse(soap, p), 0) || ::soap_put_ns4__GetMeterPositionsResponse(soap, p, "ns4:GetMeterPositionsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMeterPositionsResponse(struct soap *soap, const char *URL, struct ns4__GetMeterPositionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterPositionsResponse(soap, p), 0) || ::soap_put_ns4__GetMeterPositionsResponse(soap, p, "ns4:GetMeterPositionsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMeterPositionsResponse(struct soap *soap, const char *URL, struct ns4__GetMeterPositionsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterPositionsResponse(soap, p), 0) || ::soap_put_ns4__GetMeterPositionsResponse(soap, p, "ns4:GetMeterPositionsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMeterPositionsResponse * SOAP_FMAC4 soap_get_ns4__GetMeterPositionsResponse(struct soap*, struct ns4__GetMeterPositionsResponse *, const char*, const char*);

inline int soap_read_ns4__GetMeterPositionsResponse(struct soap *soap, struct ns4__GetMeterPositionsResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetMeterPositionsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMeterPositionsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMeterPositionsResponse(struct soap *soap, const char *URL, struct ns4__GetMeterPositionsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMeterPositionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMeterPositionsResponse(struct soap *soap, struct ns4__GetMeterPositionsResponse *p)
{
	if (::soap_read_ns4__GetMeterPositionsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__SetMeterIndications_DEFINED
#define SOAP_TYPE_ns4__SetMeterIndications_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetMeterIndications(struct soap*, struct ns4__SetMeterIndications *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetMeterIndications(struct soap*, const struct ns4__SetMeterIndications *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetMeterIndications(struct soap*, const char*, int, const struct ns4__SetMeterIndications *, const char*);
SOAP_FMAC3 struct ns4__SetMeterIndications * SOAP_FMAC4 soap_in_ns4__SetMeterIndications(struct soap*, const char*, struct ns4__SetMeterIndications *, const char*);
SOAP_FMAC1 struct ns4__SetMeterIndications * SOAP_FMAC2 soap_instantiate_ns4__SetMeterIndications(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetMeterIndications * soap_new_ns4__SetMeterIndications(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetMeterIndications(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetMeterIndications * soap_new_req_ns4__SetMeterIndications(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__SetMeterIndications *_p = ::soap_new_ns4__SetMeterIndications(soap);
	if (_p)
	{	::soap_default_ns4__SetMeterIndications(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}

inline struct ns4__SetMeterIndications * soap_new_set_ns4__SetMeterIndications(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	TMeterIndications *MeterIndications)
{
	struct ns4__SetMeterIndications *_p = ::soap_new_ns4__SetMeterIndications(soap);
	if (_p)
	{	::soap_default_ns4__SetMeterIndications(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->MeterIndications = MeterIndications;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetMeterIndications(struct soap*, const struct ns4__SetMeterIndications *, const char*, const char*);

inline int soap_write_ns4__SetMeterIndications(struct soap *soap, struct ns4__SetMeterIndications const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetMeterIndications(soap, p), 0) || ::soap_put_ns4__SetMeterIndications(soap, p, "ns4:SetMeterIndications", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetMeterIndications(struct soap *soap, const char *URL, struct ns4__SetMeterIndications const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMeterIndications(soap, p), 0) || ::soap_put_ns4__SetMeterIndications(soap, p, "ns4:SetMeterIndications", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetMeterIndications(struct soap *soap, const char *URL, struct ns4__SetMeterIndications const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMeterIndications(soap, p), 0) || ::soap_put_ns4__SetMeterIndications(soap, p, "ns4:SetMeterIndications", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetMeterIndications(struct soap *soap, const char *URL, struct ns4__SetMeterIndications const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMeterIndications(soap, p), 0) || ::soap_put_ns4__SetMeterIndications(soap, p, "ns4:SetMeterIndications", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetMeterIndications * SOAP_FMAC4 soap_get_ns4__SetMeterIndications(struct soap*, struct ns4__SetMeterIndications *, const char*, const char*);

inline int soap_read_ns4__SetMeterIndications(struct soap *soap, struct ns4__SetMeterIndications *p)
{
	if (p)
	{	::soap_default_ns4__SetMeterIndications(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetMeterIndications(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetMeterIndications(struct soap *soap, const char *URL, struct ns4__SetMeterIndications *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetMeterIndications(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetMeterIndications(struct soap *soap, struct ns4__SetMeterIndications *p)
{
	if (::soap_read_ns4__SetMeterIndications(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__SetMeterIndicationsResponse_DEFINED
#define SOAP_TYPE_ns4__SetMeterIndicationsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetMeterIndicationsResponse(struct soap*, struct ns4__SetMeterIndicationsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetMeterIndicationsResponse(struct soap*, const struct ns4__SetMeterIndicationsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetMeterIndicationsResponse(struct soap*, const char*, int, const struct ns4__SetMeterIndicationsResponse *, const char*);
SOAP_FMAC3 struct ns4__SetMeterIndicationsResponse * SOAP_FMAC4 soap_in_ns4__SetMeterIndicationsResponse(struct soap*, const char*, struct ns4__SetMeterIndicationsResponse *, const char*);
SOAP_FMAC1 struct ns4__SetMeterIndicationsResponse * SOAP_FMAC2 soap_instantiate_ns4__SetMeterIndicationsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetMeterIndicationsResponse * soap_new_ns4__SetMeterIndicationsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetMeterIndicationsResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetMeterIndicationsResponse * soap_new_req_ns4__SetMeterIndicationsResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetMeterIndicationsResponse *_p = ::soap_new_ns4__SetMeterIndicationsResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetMeterIndicationsResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__SetMeterIndicationsResponse * soap_new_set_ns4__SetMeterIndicationsResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetMeterIndicationsResponse *_p = ::soap_new_ns4__SetMeterIndicationsResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetMeterIndicationsResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetMeterIndicationsResponse(struct soap*, const struct ns4__SetMeterIndicationsResponse *, const char*, const char*);

inline int soap_write_ns4__SetMeterIndicationsResponse(struct soap *soap, struct ns4__SetMeterIndicationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetMeterIndicationsResponse(soap, p), 0) || ::soap_put_ns4__SetMeterIndicationsResponse(soap, p, "ns4:SetMeterIndicationsResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetMeterIndicationsResponse(struct soap *soap, const char *URL, struct ns4__SetMeterIndicationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMeterIndicationsResponse(soap, p), 0) || ::soap_put_ns4__SetMeterIndicationsResponse(soap, p, "ns4:SetMeterIndicationsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetMeterIndicationsResponse(struct soap *soap, const char *URL, struct ns4__SetMeterIndicationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMeterIndicationsResponse(soap, p), 0) || ::soap_put_ns4__SetMeterIndicationsResponse(soap, p, "ns4:SetMeterIndicationsResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetMeterIndicationsResponse(struct soap *soap, const char *URL, struct ns4__SetMeterIndicationsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMeterIndicationsResponse(soap, p), 0) || ::soap_put_ns4__SetMeterIndicationsResponse(soap, p, "ns4:SetMeterIndicationsResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetMeterIndicationsResponse * SOAP_FMAC4 soap_get_ns4__SetMeterIndicationsResponse(struct soap*, struct ns4__SetMeterIndicationsResponse *, const char*, const char*);

inline int soap_read_ns4__SetMeterIndicationsResponse(struct soap *soap, struct ns4__SetMeterIndicationsResponse *p)
{
	if (p)
	{	::soap_default_ns4__SetMeterIndicationsResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetMeterIndicationsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetMeterIndicationsResponse(struct soap *soap, const char *URL, struct ns4__SetMeterIndicationsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetMeterIndicationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetMeterIndicationsResponse(struct soap *soap, struct ns4__SetMeterIndicationsResponse *p)
{
	if (::soap_read_ns4__SetMeterIndicationsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMeterData_DEFINED
#define SOAP_TYPE_ns4__GetMeterData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMeterData(struct soap*, struct ns4__GetMeterData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMeterData(struct soap*, const struct ns4__GetMeterData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMeterData(struct soap*, const char*, int, const struct ns4__GetMeterData *, const char*);
SOAP_FMAC3 struct ns4__GetMeterData * SOAP_FMAC4 soap_in_ns4__GetMeterData(struct soap*, const char*, struct ns4__GetMeterData *, const char*);
SOAP_FMAC1 struct ns4__GetMeterData * SOAP_FMAC2 soap_instantiate_ns4__GetMeterData(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMeterData * soap_new_ns4__GetMeterData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMeterData(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMeterData * soap_new_req_ns4__GetMeterData(
	struct soap *soap,
	int Bench,
	int MeterPos)
{
	struct ns4__GetMeterData *_p = ::soap_new_ns4__GetMeterData(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterData(soap, _p);
		_p->Bench = Bench;
		_p->MeterPos = MeterPos;
	}
	return _p;
}

inline struct ns4__GetMeterData * soap_new_set_ns4__GetMeterData(
	struct soap *soap,
	int Bench,
	int MeterPos)
{
	struct ns4__GetMeterData *_p = ::soap_new_ns4__GetMeterData(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterData(soap, _p);
		_p->Bench = Bench;
		_p->MeterPos = MeterPos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMeterData(struct soap*, const struct ns4__GetMeterData *, const char*, const char*);

inline int soap_write_ns4__GetMeterData(struct soap *soap, struct ns4__GetMeterData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMeterData(soap, p), 0) || ::soap_put_ns4__GetMeterData(soap, p, "ns4:GetMeterData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMeterData(struct soap *soap, const char *URL, struct ns4__GetMeterData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterData(soap, p), 0) || ::soap_put_ns4__GetMeterData(soap, p, "ns4:GetMeterData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMeterData(struct soap *soap, const char *URL, struct ns4__GetMeterData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterData(soap, p), 0) || ::soap_put_ns4__GetMeterData(soap, p, "ns4:GetMeterData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMeterData(struct soap *soap, const char *URL, struct ns4__GetMeterData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterData(soap, p), 0) || ::soap_put_ns4__GetMeterData(soap, p, "ns4:GetMeterData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMeterData * SOAP_FMAC4 soap_get_ns4__GetMeterData(struct soap*, struct ns4__GetMeterData *, const char*, const char*);

inline int soap_read_ns4__GetMeterData(struct soap *soap, struct ns4__GetMeterData *p)
{
	if (p)
	{	::soap_default_ns4__GetMeterData(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMeterData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMeterData(struct soap *soap, const char *URL, struct ns4__GetMeterData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMeterData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMeterData(struct soap *soap, struct ns4__GetMeterData *p)
{
	if (::soap_read_ns4__GetMeterData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMeterDataResponse_DEFINED
#define SOAP_TYPE_ns4__GetMeterDataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMeterDataResponse(struct soap*, struct ns4__GetMeterDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMeterDataResponse(struct soap*, const struct ns4__GetMeterDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMeterDataResponse(struct soap*, const char*, int, const struct ns4__GetMeterDataResponse *, const char*);
SOAP_FMAC3 struct ns4__GetMeterDataResponse * SOAP_FMAC4 soap_in_ns4__GetMeterDataResponse(struct soap*, const char*, struct ns4__GetMeterDataResponse *, const char*);
SOAP_FMAC1 struct ns4__GetMeterDataResponse * SOAP_FMAC2 soap_instantiate_ns4__GetMeterDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMeterDataResponse * soap_new_ns4__GetMeterDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMeterDataResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMeterDataResponse * soap_new_req_ns4__GetMeterDataResponse(
	struct soap *soap)
{
	struct ns4__GetMeterDataResponse *_p = ::soap_new_ns4__GetMeterDataResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterDataResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetMeterDataResponse * soap_new_set_ns4__GetMeterDataResponse(
	struct soap *soap,
	ns3__TMeterData *return_)
{
	struct ns4__GetMeterDataResponse *_p = ::soap_new_ns4__GetMeterDataResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMeterDataResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMeterDataResponse(struct soap*, const struct ns4__GetMeterDataResponse *, const char*, const char*);

inline int soap_write_ns4__GetMeterDataResponse(struct soap *soap, struct ns4__GetMeterDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMeterDataResponse(soap, p), 0) || ::soap_put_ns4__GetMeterDataResponse(soap, p, "ns4:GetMeterDataResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMeterDataResponse(struct soap *soap, const char *URL, struct ns4__GetMeterDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterDataResponse(soap, p), 0) || ::soap_put_ns4__GetMeterDataResponse(soap, p, "ns4:GetMeterDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMeterDataResponse(struct soap *soap, const char *URL, struct ns4__GetMeterDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterDataResponse(soap, p), 0) || ::soap_put_ns4__GetMeterDataResponse(soap, p, "ns4:GetMeterDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMeterDataResponse(struct soap *soap, const char *URL, struct ns4__GetMeterDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMeterDataResponse(soap, p), 0) || ::soap_put_ns4__GetMeterDataResponse(soap, p, "ns4:GetMeterDataResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMeterDataResponse * SOAP_FMAC4 soap_get_ns4__GetMeterDataResponse(struct soap*, struct ns4__GetMeterDataResponse *, const char*, const char*);

inline int soap_read_ns4__GetMeterDataResponse(struct soap *soap, struct ns4__GetMeterDataResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetMeterDataResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMeterDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMeterDataResponse(struct soap *soap, const char *URL, struct ns4__GetMeterDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMeterDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMeterDataResponse(struct soap *soap, struct ns4__GetMeterDataResponse *p)
{
	if (::soap_read_ns4__GetMeterDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMetersData_DEFINED
#define SOAP_TYPE_ns4__GetMetersData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMetersData(struct soap*, struct ns4__GetMetersData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMetersData(struct soap*, const struct ns4__GetMetersData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMetersData(struct soap*, const char*, int, const struct ns4__GetMetersData *, const char*);
SOAP_FMAC3 struct ns4__GetMetersData * SOAP_FMAC4 soap_in_ns4__GetMetersData(struct soap*, const char*, struct ns4__GetMetersData *, const char*);
SOAP_FMAC1 struct ns4__GetMetersData * SOAP_FMAC2 soap_instantiate_ns4__GetMetersData(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMetersData * soap_new_ns4__GetMetersData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMetersData(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMetersData * soap_new_req_ns4__GetMetersData(
	struct soap *soap,
	int Bench)
{
	struct ns4__GetMetersData *_p = ::soap_new_ns4__GetMetersData(soap);
	if (_p)
	{	::soap_default_ns4__GetMetersData(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}

inline struct ns4__GetMetersData * soap_new_set_ns4__GetMetersData(
	struct soap *soap,
	int Bench,
	TIntegerDynArray *MetersPos)
{
	struct ns4__GetMetersData *_p = ::soap_new_ns4__GetMetersData(soap);
	if (_p)
	{	::soap_default_ns4__GetMetersData(soap, _p);
		_p->Bench = Bench;
		_p->MetersPos = MetersPos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMetersData(struct soap*, const struct ns4__GetMetersData *, const char*, const char*);

inline int soap_write_ns4__GetMetersData(struct soap *soap, struct ns4__GetMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMetersData(soap, p), 0) || ::soap_put_ns4__GetMetersData(soap, p, "ns4:GetMetersData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMetersData(struct soap *soap, const char *URL, struct ns4__GetMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMetersData(soap, p), 0) || ::soap_put_ns4__GetMetersData(soap, p, "ns4:GetMetersData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMetersData(struct soap *soap, const char *URL, struct ns4__GetMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMetersData(soap, p), 0) || ::soap_put_ns4__GetMetersData(soap, p, "ns4:GetMetersData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMetersData(struct soap *soap, const char *URL, struct ns4__GetMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMetersData(soap, p), 0) || ::soap_put_ns4__GetMetersData(soap, p, "ns4:GetMetersData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMetersData * SOAP_FMAC4 soap_get_ns4__GetMetersData(struct soap*, struct ns4__GetMetersData *, const char*, const char*);

inline int soap_read_ns4__GetMetersData(struct soap *soap, struct ns4__GetMetersData *p)
{
	if (p)
	{	::soap_default_ns4__GetMetersData(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMetersData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMetersData(struct soap *soap, const char *URL, struct ns4__GetMetersData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMetersData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMetersData(struct soap *soap, struct ns4__GetMetersData *p)
{
	if (::soap_read_ns4__GetMetersData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetMetersDataResponse_DEFINED
#define SOAP_TYPE_ns4__GetMetersDataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetMetersDataResponse(struct soap*, struct ns4__GetMetersDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetMetersDataResponse(struct soap*, const struct ns4__GetMetersDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetMetersDataResponse(struct soap*, const char*, int, const struct ns4__GetMetersDataResponse *, const char*);
SOAP_FMAC3 struct ns4__GetMetersDataResponse * SOAP_FMAC4 soap_in_ns4__GetMetersDataResponse(struct soap*, const char*, struct ns4__GetMetersDataResponse *, const char*);
SOAP_FMAC1 struct ns4__GetMetersDataResponse * SOAP_FMAC2 soap_instantiate_ns4__GetMetersDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetMetersDataResponse * soap_new_ns4__GetMetersDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetMetersDataResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetMetersDataResponse * soap_new_req_ns4__GetMetersDataResponse(
	struct soap *soap)
{
	struct ns4__GetMetersDataResponse *_p = ::soap_new_ns4__GetMetersDataResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMetersDataResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetMetersDataResponse * soap_new_set_ns4__GetMetersDataResponse(
	struct soap *soap,
	TMetersData *return_)
{
	struct ns4__GetMetersDataResponse *_p = ::soap_new_ns4__GetMetersDataResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetMetersDataResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetMetersDataResponse(struct soap*, const struct ns4__GetMetersDataResponse *, const char*, const char*);

inline int soap_write_ns4__GetMetersDataResponse(struct soap *soap, struct ns4__GetMetersDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetMetersDataResponse(soap, p), 0) || ::soap_put_ns4__GetMetersDataResponse(soap, p, "ns4:GetMetersDataResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetMetersDataResponse(struct soap *soap, const char *URL, struct ns4__GetMetersDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMetersDataResponse(soap, p), 0) || ::soap_put_ns4__GetMetersDataResponse(soap, p, "ns4:GetMetersDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetMetersDataResponse(struct soap *soap, const char *URL, struct ns4__GetMetersDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMetersDataResponse(soap, p), 0) || ::soap_put_ns4__GetMetersDataResponse(soap, p, "ns4:GetMetersDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetMetersDataResponse(struct soap *soap, const char *URL, struct ns4__GetMetersDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetMetersDataResponse(soap, p), 0) || ::soap_put_ns4__GetMetersDataResponse(soap, p, "ns4:GetMetersDataResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetMetersDataResponse * SOAP_FMAC4 soap_get_ns4__GetMetersDataResponse(struct soap*, struct ns4__GetMetersDataResponse *, const char*, const char*);

inline int soap_read_ns4__GetMetersDataResponse(struct soap *soap, struct ns4__GetMetersDataResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetMetersDataResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetMetersDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetMetersDataResponse(struct soap *soap, const char *URL, struct ns4__GetMetersDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetMetersDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetMetersDataResponse(struct soap *soap, struct ns4__GetMetersDataResponse *p)
{
	if (::soap_read_ns4__GetMetersDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__SetMetersData_DEFINED
#define SOAP_TYPE_ns4__SetMetersData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetMetersData(struct soap*, struct ns4__SetMetersData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetMetersData(struct soap*, const struct ns4__SetMetersData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetMetersData(struct soap*, const char*, int, const struct ns4__SetMetersData *, const char*);
SOAP_FMAC3 struct ns4__SetMetersData * SOAP_FMAC4 soap_in_ns4__SetMetersData(struct soap*, const char*, struct ns4__SetMetersData *, const char*);
SOAP_FMAC1 struct ns4__SetMetersData * SOAP_FMAC2 soap_instantiate_ns4__SetMetersData(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetMetersData * soap_new_ns4__SetMetersData(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetMetersData(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetMetersData * soap_new_req_ns4__SetMetersData(
	struct soap *soap,
	int Bench)
{
	struct ns4__SetMetersData *_p = ::soap_new_ns4__SetMetersData(soap);
	if (_p)
	{	::soap_default_ns4__SetMetersData(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}

inline struct ns4__SetMetersData * soap_new_set_ns4__SetMetersData(
	struct soap *soap,
	int Bench,
	TMetersData *MetersData)
{
	struct ns4__SetMetersData *_p = ::soap_new_ns4__SetMetersData(soap);
	if (_p)
	{	::soap_default_ns4__SetMetersData(soap, _p);
		_p->Bench = Bench;
		_p->MetersData = MetersData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetMetersData(struct soap*, const struct ns4__SetMetersData *, const char*, const char*);

inline int soap_write_ns4__SetMetersData(struct soap *soap, struct ns4__SetMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetMetersData(soap, p), 0) || ::soap_put_ns4__SetMetersData(soap, p, "ns4:SetMetersData", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetMetersData(struct soap *soap, const char *URL, struct ns4__SetMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMetersData(soap, p), 0) || ::soap_put_ns4__SetMetersData(soap, p, "ns4:SetMetersData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetMetersData(struct soap *soap, const char *URL, struct ns4__SetMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMetersData(soap, p), 0) || ::soap_put_ns4__SetMetersData(soap, p, "ns4:SetMetersData", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetMetersData(struct soap *soap, const char *URL, struct ns4__SetMetersData const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMetersData(soap, p), 0) || ::soap_put_ns4__SetMetersData(soap, p, "ns4:SetMetersData", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetMetersData * SOAP_FMAC4 soap_get_ns4__SetMetersData(struct soap*, struct ns4__SetMetersData *, const char*, const char*);

inline int soap_read_ns4__SetMetersData(struct soap *soap, struct ns4__SetMetersData *p)
{
	if (p)
	{	::soap_default_ns4__SetMetersData(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetMetersData(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetMetersData(struct soap *soap, const char *URL, struct ns4__SetMetersData *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetMetersData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetMetersData(struct soap *soap, struct ns4__SetMetersData *p)
{
	if (::soap_read_ns4__SetMetersData(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__SetMetersDataResponse_DEFINED
#define SOAP_TYPE_ns4__SetMetersDataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetMetersDataResponse(struct soap*, struct ns4__SetMetersDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetMetersDataResponse(struct soap*, const struct ns4__SetMetersDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetMetersDataResponse(struct soap*, const char*, int, const struct ns4__SetMetersDataResponse *, const char*);
SOAP_FMAC3 struct ns4__SetMetersDataResponse * SOAP_FMAC4 soap_in_ns4__SetMetersDataResponse(struct soap*, const char*, struct ns4__SetMetersDataResponse *, const char*);
SOAP_FMAC1 struct ns4__SetMetersDataResponse * SOAP_FMAC2 soap_instantiate_ns4__SetMetersDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetMetersDataResponse * soap_new_ns4__SetMetersDataResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetMetersDataResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetMetersDataResponse * soap_new_req_ns4__SetMetersDataResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetMetersDataResponse *_p = ::soap_new_ns4__SetMetersDataResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetMetersDataResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__SetMetersDataResponse * soap_new_set_ns4__SetMetersDataResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetMetersDataResponse *_p = ::soap_new_ns4__SetMetersDataResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetMetersDataResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetMetersDataResponse(struct soap*, const struct ns4__SetMetersDataResponse *, const char*, const char*);

inline int soap_write_ns4__SetMetersDataResponse(struct soap *soap, struct ns4__SetMetersDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetMetersDataResponse(soap, p), 0) || ::soap_put_ns4__SetMetersDataResponse(soap, p, "ns4:SetMetersDataResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetMetersDataResponse(struct soap *soap, const char *URL, struct ns4__SetMetersDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMetersDataResponse(soap, p), 0) || ::soap_put_ns4__SetMetersDataResponse(soap, p, "ns4:SetMetersDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetMetersDataResponse(struct soap *soap, const char *URL, struct ns4__SetMetersDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMetersDataResponse(soap, p), 0) || ::soap_put_ns4__SetMetersDataResponse(soap, p, "ns4:SetMetersDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetMetersDataResponse(struct soap *soap, const char *URL, struct ns4__SetMetersDataResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetMetersDataResponse(soap, p), 0) || ::soap_put_ns4__SetMetersDataResponse(soap, p, "ns4:SetMetersDataResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetMetersDataResponse * SOAP_FMAC4 soap_get_ns4__SetMetersDataResponse(struct soap*, struct ns4__SetMetersDataResponse *, const char*, const char*);

inline int soap_read_ns4__SetMetersDataResponse(struct soap *soap, struct ns4__SetMetersDataResponse *p)
{
	if (p)
	{	::soap_default_ns4__SetMetersDataResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetMetersDataResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetMetersDataResponse(struct soap *soap, const char *URL, struct ns4__SetMetersDataResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetMetersDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetMetersDataResponse(struct soap *soap, struct ns4__SetMetersDataResponse *p)
{
	if (::soap_read_ns4__SetMetersDataResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetStatus_DEFINED
#define SOAP_TYPE_ns4__GetStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetStatus(struct soap*, struct ns4__GetStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetStatus(struct soap*, const struct ns4__GetStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetStatus(struct soap*, const char*, int, const struct ns4__GetStatus *, const char*);
SOAP_FMAC3 struct ns4__GetStatus * SOAP_FMAC4 soap_in_ns4__GetStatus(struct soap*, const char*, struct ns4__GetStatus *, const char*);
SOAP_FMAC1 struct ns4__GetStatus * SOAP_FMAC2 soap_instantiate_ns4__GetStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetStatus * soap_new_ns4__GetStatus(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetStatus(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetStatus * soap_new_req_ns4__GetStatus(
	struct soap *soap,
	int Bench)
{
	struct ns4__GetStatus *_p = ::soap_new_ns4__GetStatus(soap);
	if (_p)
	{	::soap_default_ns4__GetStatus(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}

inline struct ns4__GetStatus * soap_new_set_ns4__GetStatus(
	struct soap *soap,
	int Bench)
{
	struct ns4__GetStatus *_p = ::soap_new_ns4__GetStatus(soap);
	if (_p)
	{	::soap_default_ns4__GetStatus(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetStatus(struct soap*, const struct ns4__GetStatus *, const char*, const char*);

inline int soap_write_ns4__GetStatus(struct soap *soap, struct ns4__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetStatus(soap, p), 0) || ::soap_put_ns4__GetStatus(soap, p, "ns4:GetStatus", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetStatus(struct soap *soap, const char *URL, struct ns4__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetStatus(soap, p), 0) || ::soap_put_ns4__GetStatus(soap, p, "ns4:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetStatus(struct soap *soap, const char *URL, struct ns4__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetStatus(soap, p), 0) || ::soap_put_ns4__GetStatus(soap, p, "ns4:GetStatus", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetStatus(struct soap *soap, const char *URL, struct ns4__GetStatus const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetStatus(soap, p), 0) || ::soap_put_ns4__GetStatus(soap, p, "ns4:GetStatus", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetStatus * SOAP_FMAC4 soap_get_ns4__GetStatus(struct soap*, struct ns4__GetStatus *, const char*, const char*);

inline int soap_read_ns4__GetStatus(struct soap *soap, struct ns4__GetStatus *p)
{
	if (p)
	{	::soap_default_ns4__GetStatus(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetStatus(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetStatus(struct soap *soap, const char *URL, struct ns4__GetStatus *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetStatus(struct soap *soap, struct ns4__GetStatus *p)
{
	if (::soap_read_ns4__GetStatus(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetStatusResponse_DEFINED
#define SOAP_TYPE_ns4__GetStatusResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetStatusResponse(struct soap*, struct ns4__GetStatusResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetStatusResponse(struct soap*, const struct ns4__GetStatusResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetStatusResponse(struct soap*, const char*, int, const struct ns4__GetStatusResponse *, const char*);
SOAP_FMAC3 struct ns4__GetStatusResponse * SOAP_FMAC4 soap_in_ns4__GetStatusResponse(struct soap*, const char*, struct ns4__GetStatusResponse *, const char*);
SOAP_FMAC1 struct ns4__GetStatusResponse * SOAP_FMAC2 soap_instantiate_ns4__GetStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetStatusResponse * soap_new_ns4__GetStatusResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetStatusResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetStatusResponse * soap_new_req_ns4__GetStatusResponse(
	struct soap *soap)
{
	struct ns4__GetStatusResponse *_p = ::soap_new_ns4__GetStatusResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetStatusResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetStatusResponse * soap_new_set_ns4__GetStatusResponse(
	struct soap *soap,
	ns3__TStatus *return_)
{
	struct ns4__GetStatusResponse *_p = ::soap_new_ns4__GetStatusResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetStatusResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetStatusResponse(struct soap*, const struct ns4__GetStatusResponse *, const char*, const char*);

inline int soap_write_ns4__GetStatusResponse(struct soap *soap, struct ns4__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetStatusResponse(soap, p), 0) || ::soap_put_ns4__GetStatusResponse(soap, p, "ns4:GetStatusResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetStatusResponse(struct soap *soap, const char *URL, struct ns4__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetStatusResponse(soap, p), 0) || ::soap_put_ns4__GetStatusResponse(soap, p, "ns4:GetStatusResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetStatusResponse(struct soap *soap, const char *URL, struct ns4__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetStatusResponse(soap, p), 0) || ::soap_put_ns4__GetStatusResponse(soap, p, "ns4:GetStatusResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetStatusResponse(struct soap *soap, const char *URL, struct ns4__GetStatusResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetStatusResponse(soap, p), 0) || ::soap_put_ns4__GetStatusResponse(soap, p, "ns4:GetStatusResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetStatusResponse * SOAP_FMAC4 soap_get_ns4__GetStatusResponse(struct soap*, struct ns4__GetStatusResponse *, const char*, const char*);

inline int soap_read_ns4__GetStatusResponse(struct soap *soap, struct ns4__GetStatusResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetStatusResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetStatusResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetStatusResponse(struct soap *soap, const char *URL, struct ns4__GetStatusResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetStatusResponse(struct soap *soap, struct ns4__GetStatusResponse *p)
{
	if (::soap_read_ns4__GetStatusResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__Continue_DEFINED
#define SOAP_TYPE_ns4__Continue_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__Continue(struct soap*, struct ns4__Continue *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__Continue(struct soap*, const struct ns4__Continue *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Continue(struct soap*, const char*, int, const struct ns4__Continue *, const char*);
SOAP_FMAC3 struct ns4__Continue * SOAP_FMAC4 soap_in_ns4__Continue(struct soap*, const char*, struct ns4__Continue *, const char*);
SOAP_FMAC1 struct ns4__Continue * SOAP_FMAC2 soap_instantiate_ns4__Continue(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__Continue * soap_new_ns4__Continue(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Continue(soap, n, NULL, NULL, NULL);
}

inline struct ns4__Continue * soap_new_req_ns4__Continue(
	struct soap *soap,
	int Bench)
{
	struct ns4__Continue *_p = ::soap_new_ns4__Continue(soap);
	if (_p)
	{	::soap_default_ns4__Continue(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}

inline struct ns4__Continue * soap_new_set_ns4__Continue(
	struct soap *soap,
	int Bench)
{
	struct ns4__Continue *_p = ::soap_new_ns4__Continue(soap);
	if (_p)
	{	::soap_default_ns4__Continue(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__Continue(struct soap*, const struct ns4__Continue *, const char*, const char*);

inline int soap_write_ns4__Continue(struct soap *soap, struct ns4__Continue const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__Continue(soap, p), 0) || ::soap_put_ns4__Continue(soap, p, "ns4:Continue", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__Continue(struct soap *soap, const char *URL, struct ns4__Continue const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__Continue(soap, p), 0) || ::soap_put_ns4__Continue(soap, p, "ns4:Continue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__Continue(struct soap *soap, const char *URL, struct ns4__Continue const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__Continue(soap, p), 0) || ::soap_put_ns4__Continue(soap, p, "ns4:Continue", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__Continue(struct soap *soap, const char *URL, struct ns4__Continue const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__Continue(soap, p), 0) || ::soap_put_ns4__Continue(soap, p, "ns4:Continue", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__Continue * SOAP_FMAC4 soap_get_ns4__Continue(struct soap*, struct ns4__Continue *, const char*, const char*);

inline int soap_read_ns4__Continue(struct soap *soap, struct ns4__Continue *p)
{
	if (p)
	{	::soap_default_ns4__Continue(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__Continue(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__Continue(struct soap *soap, const char *URL, struct ns4__Continue *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__Continue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__Continue(struct soap *soap, struct ns4__Continue *p)
{
	if (::soap_read_ns4__Continue(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__ContinueResponse_DEFINED
#define SOAP_TYPE_ns4__ContinueResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__ContinueResponse(struct soap*, struct ns4__ContinueResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__ContinueResponse(struct soap*, const struct ns4__ContinueResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ContinueResponse(struct soap*, const char*, int, const struct ns4__ContinueResponse *, const char*);
SOAP_FMAC3 struct ns4__ContinueResponse * SOAP_FMAC4 soap_in_ns4__ContinueResponse(struct soap*, const char*, struct ns4__ContinueResponse *, const char*);
SOAP_FMAC1 struct ns4__ContinueResponse * SOAP_FMAC2 soap_instantiate_ns4__ContinueResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__ContinueResponse * soap_new_ns4__ContinueResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__ContinueResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__ContinueResponse * soap_new_req_ns4__ContinueResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__ContinueResponse *_p = ::soap_new_ns4__ContinueResponse(soap);
	if (_p)
	{	::soap_default_ns4__ContinueResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__ContinueResponse * soap_new_set_ns4__ContinueResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__ContinueResponse *_p = ::soap_new_ns4__ContinueResponse(soap);
	if (_p)
	{	::soap_default_ns4__ContinueResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ContinueResponse(struct soap*, const struct ns4__ContinueResponse *, const char*, const char*);

inline int soap_write_ns4__ContinueResponse(struct soap *soap, struct ns4__ContinueResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__ContinueResponse(soap, p), 0) || ::soap_put_ns4__ContinueResponse(soap, p, "ns4:ContinueResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__ContinueResponse(struct soap *soap, const char *URL, struct ns4__ContinueResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__ContinueResponse(soap, p), 0) || ::soap_put_ns4__ContinueResponse(soap, p, "ns4:ContinueResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__ContinueResponse(struct soap *soap, const char *URL, struct ns4__ContinueResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__ContinueResponse(soap, p), 0) || ::soap_put_ns4__ContinueResponse(soap, p, "ns4:ContinueResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__ContinueResponse(struct soap *soap, const char *URL, struct ns4__ContinueResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__ContinueResponse(soap, p), 0) || ::soap_put_ns4__ContinueResponse(soap, p, "ns4:ContinueResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__ContinueResponse * SOAP_FMAC4 soap_get_ns4__ContinueResponse(struct soap*, struct ns4__ContinueResponse *, const char*, const char*);

inline int soap_read_ns4__ContinueResponse(struct soap *soap, struct ns4__ContinueResponse *p)
{
	if (p)
	{	::soap_default_ns4__ContinueResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__ContinueResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__ContinueResponse(struct soap *soap, const char *URL, struct ns4__ContinueResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__ContinueResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__ContinueResponse(struct soap *soap, struct ns4__ContinueResponse *p)
{
	if (::soap_read_ns4__ContinueResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__Stop_DEFINED
#define SOAP_TYPE_ns4__Stop_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__Stop(struct soap*, struct ns4__Stop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__Stop(struct soap*, const struct ns4__Stop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Stop(struct soap*, const char*, int, const struct ns4__Stop *, const char*);
SOAP_FMAC3 struct ns4__Stop * SOAP_FMAC4 soap_in_ns4__Stop(struct soap*, const char*, struct ns4__Stop *, const char*);
SOAP_FMAC1 struct ns4__Stop * SOAP_FMAC2 soap_instantiate_ns4__Stop(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__Stop * soap_new_ns4__Stop(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Stop(soap, n, NULL, NULL, NULL);
}

inline struct ns4__Stop * soap_new_req_ns4__Stop(
	struct soap *soap,
	int Bench)
{
	struct ns4__Stop *_p = ::soap_new_ns4__Stop(soap);
	if (_p)
	{	::soap_default_ns4__Stop(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}

inline struct ns4__Stop * soap_new_set_ns4__Stop(
	struct soap *soap,
	int Bench)
{
	struct ns4__Stop *_p = ::soap_new_ns4__Stop(soap);
	if (_p)
	{	::soap_default_ns4__Stop(soap, _p);
		_p->Bench = Bench;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__Stop(struct soap*, const struct ns4__Stop *, const char*, const char*);

inline int soap_write_ns4__Stop(struct soap *soap, struct ns4__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__Stop(soap, p), 0) || ::soap_put_ns4__Stop(soap, p, "ns4:Stop", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__Stop(struct soap *soap, const char *URL, struct ns4__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__Stop(soap, p), 0) || ::soap_put_ns4__Stop(soap, p, "ns4:Stop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__Stop(struct soap *soap, const char *URL, struct ns4__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__Stop(soap, p), 0) || ::soap_put_ns4__Stop(soap, p, "ns4:Stop", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__Stop(struct soap *soap, const char *URL, struct ns4__Stop const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__Stop(soap, p), 0) || ::soap_put_ns4__Stop(soap, p, "ns4:Stop", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__Stop * SOAP_FMAC4 soap_get_ns4__Stop(struct soap*, struct ns4__Stop *, const char*, const char*);

inline int soap_read_ns4__Stop(struct soap *soap, struct ns4__Stop *p)
{
	if (p)
	{	::soap_default_ns4__Stop(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__Stop(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__Stop(struct soap *soap, const char *URL, struct ns4__Stop *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__Stop(struct soap *soap, struct ns4__Stop *p)
{
	if (::soap_read_ns4__Stop(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__StopResponse_DEFINED
#define SOAP_TYPE_ns4__StopResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__StopResponse(struct soap*, struct ns4__StopResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__StopResponse(struct soap*, const struct ns4__StopResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__StopResponse(struct soap*, const char*, int, const struct ns4__StopResponse *, const char*);
SOAP_FMAC3 struct ns4__StopResponse * SOAP_FMAC4 soap_in_ns4__StopResponse(struct soap*, const char*, struct ns4__StopResponse *, const char*);
SOAP_FMAC1 struct ns4__StopResponse * SOAP_FMAC2 soap_instantiate_ns4__StopResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__StopResponse * soap_new_ns4__StopResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__StopResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__StopResponse * soap_new_req_ns4__StopResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__StopResponse *_p = ::soap_new_ns4__StopResponse(soap);
	if (_p)
	{	::soap_default_ns4__StopResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__StopResponse * soap_new_set_ns4__StopResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__StopResponse *_p = ::soap_new_ns4__StopResponse(soap);
	if (_p)
	{	::soap_default_ns4__StopResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__StopResponse(struct soap*, const struct ns4__StopResponse *, const char*, const char*);

inline int soap_write_ns4__StopResponse(struct soap *soap, struct ns4__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__StopResponse(soap, p), 0) || ::soap_put_ns4__StopResponse(soap, p, "ns4:StopResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__StopResponse(struct soap *soap, const char *URL, struct ns4__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__StopResponse(soap, p), 0) || ::soap_put_ns4__StopResponse(soap, p, "ns4:StopResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__StopResponse(struct soap *soap, const char *URL, struct ns4__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__StopResponse(soap, p), 0) || ::soap_put_ns4__StopResponse(soap, p, "ns4:StopResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__StopResponse(struct soap *soap, const char *URL, struct ns4__StopResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__StopResponse(soap, p), 0) || ::soap_put_ns4__StopResponse(soap, p, "ns4:StopResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__StopResponse * SOAP_FMAC4 soap_get_ns4__StopResponse(struct soap*, struct ns4__StopResponse *, const char*, const char*);

inline int soap_read_ns4__StopResponse(struct soap *soap, struct ns4__StopResponse *p)
{
	if (p)
	{	::soap_default_ns4__StopResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__StopResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__StopResponse(struct soap *soap, const char *URL, struct ns4__StopResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__StopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__StopResponse(struct soap *soap, struct ns4__StopResponse *p)
{
	if (::soap_read_ns4__StopResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__Start_DEFINED
#define SOAP_TYPE_ns4__Start_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__Start(struct soap*, struct ns4__Start *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__Start(struct soap*, const struct ns4__Start *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Start(struct soap*, const char*, int, const struct ns4__Start *, const char*);
SOAP_FMAC3 struct ns4__Start * SOAP_FMAC4 soap_in_ns4__Start(struct soap*, const char*, struct ns4__Start *, const char*);
SOAP_FMAC1 struct ns4__Start * SOAP_FMAC2 soap_instantiate_ns4__Start(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__Start * soap_new_ns4__Start(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__Start(soap, n, NULL, NULL, NULL);
}

inline struct ns4__Start * soap_new_req_ns4__Start(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__Start *_p = ::soap_new_ns4__Start(soap);
	if (_p)
	{	::soap_default_ns4__Start(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}

inline struct ns4__Start * soap_new_set_ns4__Start(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	ns3__TWaitEvents *WaitEvents)
{
	struct ns4__Start *_p = ::soap_new_ns4__Start(soap);
	if (_p)
	{	::soap_default_ns4__Start(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->WaitEvents = WaitEvents;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__Start(struct soap*, const struct ns4__Start *, const char*, const char*);

inline int soap_write_ns4__Start(struct soap *soap, struct ns4__Start const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__Start(soap, p), 0) || ::soap_put_ns4__Start(soap, p, "ns4:Start", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__Start(struct soap *soap, const char *URL, struct ns4__Start const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__Start(soap, p), 0) || ::soap_put_ns4__Start(soap, p, "ns4:Start", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__Start(struct soap *soap, const char *URL, struct ns4__Start const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__Start(soap, p), 0) || ::soap_put_ns4__Start(soap, p, "ns4:Start", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__Start(struct soap *soap, const char *URL, struct ns4__Start const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__Start(soap, p), 0) || ::soap_put_ns4__Start(soap, p, "ns4:Start", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__Start * SOAP_FMAC4 soap_get_ns4__Start(struct soap*, struct ns4__Start *, const char*, const char*);

inline int soap_read_ns4__Start(struct soap *soap, struct ns4__Start *p)
{
	if (p)
	{	::soap_default_ns4__Start(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__Start(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__Start(struct soap *soap, const char *URL, struct ns4__Start *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__Start(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__Start(struct soap *soap, struct ns4__Start *p)
{
	if (::soap_read_ns4__Start(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__StartResponse_DEFINED
#define SOAP_TYPE_ns4__StartResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__StartResponse(struct soap*, struct ns4__StartResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__StartResponse(struct soap*, const struct ns4__StartResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__StartResponse(struct soap*, const char*, int, const struct ns4__StartResponse *, const char*);
SOAP_FMAC3 struct ns4__StartResponse * SOAP_FMAC4 soap_in_ns4__StartResponse(struct soap*, const char*, struct ns4__StartResponse *, const char*);
SOAP_FMAC1 struct ns4__StartResponse * SOAP_FMAC2 soap_instantiate_ns4__StartResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__StartResponse * soap_new_ns4__StartResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__StartResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__StartResponse * soap_new_req_ns4__StartResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__StartResponse *_p = ::soap_new_ns4__StartResponse(soap);
	if (_p)
	{	::soap_default_ns4__StartResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__StartResponse * soap_new_set_ns4__StartResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__StartResponse *_p = ::soap_new_ns4__StartResponse(soap);
	if (_p)
	{	::soap_default_ns4__StartResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__StartResponse(struct soap*, const struct ns4__StartResponse *, const char*, const char*);

inline int soap_write_ns4__StartResponse(struct soap *soap, struct ns4__StartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__StartResponse(soap, p), 0) || ::soap_put_ns4__StartResponse(soap, p, "ns4:StartResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__StartResponse(struct soap *soap, const char *URL, struct ns4__StartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__StartResponse(soap, p), 0) || ::soap_put_ns4__StartResponse(soap, p, "ns4:StartResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__StartResponse(struct soap *soap, const char *URL, struct ns4__StartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__StartResponse(soap, p), 0) || ::soap_put_ns4__StartResponse(soap, p, "ns4:StartResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__StartResponse(struct soap *soap, const char *URL, struct ns4__StartResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__StartResponse(soap, p), 0) || ::soap_put_ns4__StartResponse(soap, p, "ns4:StartResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__StartResponse * SOAP_FMAC4 soap_get_ns4__StartResponse(struct soap*, struct ns4__StartResponse *, const char*, const char*);

inline int soap_read_ns4__StartResponse(struct soap *soap, struct ns4__StartResponse *p)
{
	if (p)
	{	::soap_default_ns4__StartResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__StartResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__StartResponse(struct soap *soap, const char *URL, struct ns4__StartResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__StartResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__StartResponse(struct soap *soap, struct ns4__StartResponse *p)
{
	if (::soap_read_ns4__StartResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__SetPressTestParameters_DEFINED
#define SOAP_TYPE_ns4__SetPressTestParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetPressTestParameters(struct soap*, struct ns4__SetPressTestParameters *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetPressTestParameters(struct soap*, const struct ns4__SetPressTestParameters *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetPressTestParameters(struct soap*, const char*, int, const struct ns4__SetPressTestParameters *, const char*);
SOAP_FMAC3 struct ns4__SetPressTestParameters * SOAP_FMAC4 soap_in_ns4__SetPressTestParameters(struct soap*, const char*, struct ns4__SetPressTestParameters *, const char*);
SOAP_FMAC1 struct ns4__SetPressTestParameters * SOAP_FMAC2 soap_instantiate_ns4__SetPressTestParameters(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetPressTestParameters * soap_new_ns4__SetPressTestParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetPressTestParameters(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetPressTestParameters * soap_new_req_ns4__SetPressTestParameters(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	bool CreateTest)
{
	struct ns4__SetPressTestParameters *_p = ::soap_new_ns4__SetPressTestParameters(soap);
	if (_p)
	{	::soap_default_ns4__SetPressTestParameters(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->CreateTest = CreateTest;
	}
	return _p;
}

inline struct ns4__SetPressTestParameters * soap_new_set_ns4__SetPressTestParameters(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	ns3__TPressTestParameters *TestParameters,
	bool CreateTest)
{
	struct ns4__SetPressTestParameters *_p = ::soap_new_ns4__SetPressTestParameters(soap);
	if (_p)
	{	::soap_default_ns4__SetPressTestParameters(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->TestParameters = TestParameters;
		_p->CreateTest = CreateTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetPressTestParameters(struct soap*, const struct ns4__SetPressTestParameters *, const char*, const char*);

inline int soap_write_ns4__SetPressTestParameters(struct soap *soap, struct ns4__SetPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetPressTestParameters(soap, p), 0) || ::soap_put_ns4__SetPressTestParameters(soap, p, "ns4:SetPressTestParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetPressTestParameters(struct soap *soap, const char *URL, struct ns4__SetPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetPressTestParameters(soap, p), 0) || ::soap_put_ns4__SetPressTestParameters(soap, p, "ns4:SetPressTestParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetPressTestParameters(struct soap *soap, const char *URL, struct ns4__SetPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetPressTestParameters(soap, p), 0) || ::soap_put_ns4__SetPressTestParameters(soap, p, "ns4:SetPressTestParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetPressTestParameters(struct soap *soap, const char *URL, struct ns4__SetPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetPressTestParameters(soap, p), 0) || ::soap_put_ns4__SetPressTestParameters(soap, p, "ns4:SetPressTestParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetPressTestParameters * SOAP_FMAC4 soap_get_ns4__SetPressTestParameters(struct soap*, struct ns4__SetPressTestParameters *, const char*, const char*);

inline int soap_read_ns4__SetPressTestParameters(struct soap *soap, struct ns4__SetPressTestParameters *p)
{
	if (p)
	{	::soap_default_ns4__SetPressTestParameters(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetPressTestParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetPressTestParameters(struct soap *soap, const char *URL, struct ns4__SetPressTestParameters *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetPressTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetPressTestParameters(struct soap *soap, struct ns4__SetPressTestParameters *p)
{
	if (::soap_read_ns4__SetPressTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__SetPressTestParametersResponse_DEFINED
#define SOAP_TYPE_ns4__SetPressTestParametersResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetPressTestParametersResponse(struct soap*, struct ns4__SetPressTestParametersResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetPressTestParametersResponse(struct soap*, const struct ns4__SetPressTestParametersResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetPressTestParametersResponse(struct soap*, const char*, int, const struct ns4__SetPressTestParametersResponse *, const char*);
SOAP_FMAC3 struct ns4__SetPressTestParametersResponse * SOAP_FMAC4 soap_in_ns4__SetPressTestParametersResponse(struct soap*, const char*, struct ns4__SetPressTestParametersResponse *, const char*);
SOAP_FMAC1 struct ns4__SetPressTestParametersResponse * SOAP_FMAC2 soap_instantiate_ns4__SetPressTestParametersResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetPressTestParametersResponse * soap_new_ns4__SetPressTestParametersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetPressTestParametersResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetPressTestParametersResponse * soap_new_req_ns4__SetPressTestParametersResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetPressTestParametersResponse *_p = ::soap_new_ns4__SetPressTestParametersResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetPressTestParametersResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__SetPressTestParametersResponse * soap_new_set_ns4__SetPressTestParametersResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetPressTestParametersResponse *_p = ::soap_new_ns4__SetPressTestParametersResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetPressTestParametersResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetPressTestParametersResponse(struct soap*, const struct ns4__SetPressTestParametersResponse *, const char*, const char*);

inline int soap_write_ns4__SetPressTestParametersResponse(struct soap *soap, struct ns4__SetPressTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetPressTestParametersResponse(soap, p), 0) || ::soap_put_ns4__SetPressTestParametersResponse(soap, p, "ns4:SetPressTestParametersResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetPressTestParametersResponse(struct soap *soap, const char *URL, struct ns4__SetPressTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetPressTestParametersResponse(soap, p), 0) || ::soap_put_ns4__SetPressTestParametersResponse(soap, p, "ns4:SetPressTestParametersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetPressTestParametersResponse(struct soap *soap, const char *URL, struct ns4__SetPressTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetPressTestParametersResponse(soap, p), 0) || ::soap_put_ns4__SetPressTestParametersResponse(soap, p, "ns4:SetPressTestParametersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetPressTestParametersResponse(struct soap *soap, const char *URL, struct ns4__SetPressTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetPressTestParametersResponse(soap, p), 0) || ::soap_put_ns4__SetPressTestParametersResponse(soap, p, "ns4:SetPressTestParametersResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetPressTestParametersResponse * SOAP_FMAC4 soap_get_ns4__SetPressTestParametersResponse(struct soap*, struct ns4__SetPressTestParametersResponse *, const char*, const char*);

inline int soap_read_ns4__SetPressTestParametersResponse(struct soap *soap, struct ns4__SetPressTestParametersResponse *p)
{
	if (p)
	{	::soap_default_ns4__SetPressTestParametersResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetPressTestParametersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetPressTestParametersResponse(struct soap *soap, const char *URL, struct ns4__SetPressTestParametersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetPressTestParametersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetPressTestParametersResponse(struct soap *soap, struct ns4__SetPressTestParametersResponse *p)
{
	if (::soap_read_ns4__SetPressTestParametersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetPressTestParameters_DEFINED
#define SOAP_TYPE_ns4__GetPressTestParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetPressTestParameters(struct soap*, struct ns4__GetPressTestParameters *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetPressTestParameters(struct soap*, const struct ns4__GetPressTestParameters *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetPressTestParameters(struct soap*, const char*, int, const struct ns4__GetPressTestParameters *, const char*);
SOAP_FMAC3 struct ns4__GetPressTestParameters * SOAP_FMAC4 soap_in_ns4__GetPressTestParameters(struct soap*, const char*, struct ns4__GetPressTestParameters *, const char*);
SOAP_FMAC1 struct ns4__GetPressTestParameters * SOAP_FMAC2 soap_instantiate_ns4__GetPressTestParameters(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetPressTestParameters * soap_new_ns4__GetPressTestParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetPressTestParameters(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetPressTestParameters * soap_new_req_ns4__GetPressTestParameters(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetPressTestParameters *_p = ::soap_new_ns4__GetPressTestParameters(soap);
	if (_p)
	{	::soap_default_ns4__GetPressTestParameters(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}

inline struct ns4__GetPressTestParameters * soap_new_set_ns4__GetPressTestParameters(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetPressTestParameters *_p = ::soap_new_ns4__GetPressTestParameters(soap);
	if (_p)
	{	::soap_default_ns4__GetPressTestParameters(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetPressTestParameters(struct soap*, const struct ns4__GetPressTestParameters *, const char*, const char*);

inline int soap_write_ns4__GetPressTestParameters(struct soap *soap, struct ns4__GetPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetPressTestParameters(soap, p), 0) || ::soap_put_ns4__GetPressTestParameters(soap, p, "ns4:GetPressTestParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetPressTestParameters(struct soap *soap, const char *URL, struct ns4__GetPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestParameters(soap, p), 0) || ::soap_put_ns4__GetPressTestParameters(soap, p, "ns4:GetPressTestParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetPressTestParameters(struct soap *soap, const char *URL, struct ns4__GetPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestParameters(soap, p), 0) || ::soap_put_ns4__GetPressTestParameters(soap, p, "ns4:GetPressTestParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetPressTestParameters(struct soap *soap, const char *URL, struct ns4__GetPressTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestParameters(soap, p), 0) || ::soap_put_ns4__GetPressTestParameters(soap, p, "ns4:GetPressTestParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetPressTestParameters * SOAP_FMAC4 soap_get_ns4__GetPressTestParameters(struct soap*, struct ns4__GetPressTestParameters *, const char*, const char*);

inline int soap_read_ns4__GetPressTestParameters(struct soap *soap, struct ns4__GetPressTestParameters *p)
{
	if (p)
	{	::soap_default_ns4__GetPressTestParameters(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetPressTestParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetPressTestParameters(struct soap *soap, const char *URL, struct ns4__GetPressTestParameters *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetPressTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetPressTestParameters(struct soap *soap, struct ns4__GetPressTestParameters *p)
{
	if (::soap_read_ns4__GetPressTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetPressTestParametersResponse_DEFINED
#define SOAP_TYPE_ns4__GetPressTestParametersResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetPressTestParametersResponse(struct soap*, struct ns4__GetPressTestParametersResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetPressTestParametersResponse(struct soap*, const struct ns4__GetPressTestParametersResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetPressTestParametersResponse(struct soap*, const char*, int, const struct ns4__GetPressTestParametersResponse *, const char*);
SOAP_FMAC3 struct ns4__GetPressTestParametersResponse * SOAP_FMAC4 soap_in_ns4__GetPressTestParametersResponse(struct soap*, const char*, struct ns4__GetPressTestParametersResponse *, const char*);
SOAP_FMAC1 struct ns4__GetPressTestParametersResponse * SOAP_FMAC2 soap_instantiate_ns4__GetPressTestParametersResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetPressTestParametersResponse * soap_new_ns4__GetPressTestParametersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetPressTestParametersResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetPressTestParametersResponse * soap_new_req_ns4__GetPressTestParametersResponse(
	struct soap *soap)
{
	struct ns4__GetPressTestParametersResponse *_p = ::soap_new_ns4__GetPressTestParametersResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetPressTestParametersResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetPressTestParametersResponse * soap_new_set_ns4__GetPressTestParametersResponse(
	struct soap *soap,
	ns3__TPressTestParameters *return_)
{
	struct ns4__GetPressTestParametersResponse *_p = ::soap_new_ns4__GetPressTestParametersResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetPressTestParametersResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetPressTestParametersResponse(struct soap*, const struct ns4__GetPressTestParametersResponse *, const char*, const char*);

inline int soap_write_ns4__GetPressTestParametersResponse(struct soap *soap, struct ns4__GetPressTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetPressTestParametersResponse(soap, p), 0) || ::soap_put_ns4__GetPressTestParametersResponse(soap, p, "ns4:GetPressTestParametersResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetPressTestParametersResponse(struct soap *soap, const char *URL, struct ns4__GetPressTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestParametersResponse(soap, p), 0) || ::soap_put_ns4__GetPressTestParametersResponse(soap, p, "ns4:GetPressTestParametersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetPressTestParametersResponse(struct soap *soap, const char *URL, struct ns4__GetPressTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestParametersResponse(soap, p), 0) || ::soap_put_ns4__GetPressTestParametersResponse(soap, p, "ns4:GetPressTestParametersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetPressTestParametersResponse(struct soap *soap, const char *URL, struct ns4__GetPressTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetPressTestParametersResponse(soap, p), 0) || ::soap_put_ns4__GetPressTestParametersResponse(soap, p, "ns4:GetPressTestParametersResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetPressTestParametersResponse * SOAP_FMAC4 soap_get_ns4__GetPressTestParametersResponse(struct soap*, struct ns4__GetPressTestParametersResponse *, const char*, const char*);

inline int soap_read_ns4__GetPressTestParametersResponse(struct soap *soap, struct ns4__GetPressTestParametersResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetPressTestParametersResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetPressTestParametersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetPressTestParametersResponse(struct soap *soap, const char *URL, struct ns4__GetPressTestParametersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetPressTestParametersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetPressTestParametersResponse(struct soap *soap, struct ns4__GetPressTestParametersResponse *p)
{
	if (::soap_read_ns4__GetPressTestParametersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__SetTestParameters_DEFINED
#define SOAP_TYPE_ns4__SetTestParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetTestParameters(struct soap*, struct ns4__SetTestParameters *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetTestParameters(struct soap*, const struct ns4__SetTestParameters *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetTestParameters(struct soap*, const char*, int, const struct ns4__SetTestParameters *, const char*);
SOAP_FMAC3 struct ns4__SetTestParameters * SOAP_FMAC4 soap_in_ns4__SetTestParameters(struct soap*, const char*, struct ns4__SetTestParameters *, const char*);
SOAP_FMAC1 struct ns4__SetTestParameters * SOAP_FMAC2 soap_instantiate_ns4__SetTestParameters(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetTestParameters * soap_new_ns4__SetTestParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetTestParameters(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetTestParameters * soap_new_req_ns4__SetTestParameters(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	bool CreateTest)
{
	struct ns4__SetTestParameters *_p = ::soap_new_ns4__SetTestParameters(soap);
	if (_p)
	{	::soap_default_ns4__SetTestParameters(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->CreateTest = CreateTest;
	}
	return _p;
}

inline struct ns4__SetTestParameters * soap_new_set_ns4__SetTestParameters(
	struct soap *soap,
	int Bench,
	const std::string& TestName,
	ns3__TTestParameters *TestParameters,
	bool CreateTest)
{
	struct ns4__SetTestParameters *_p = ::soap_new_ns4__SetTestParameters(soap);
	if (_p)
	{	::soap_default_ns4__SetTestParameters(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
		_p->TestParameters = TestParameters;
		_p->CreateTest = CreateTest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetTestParameters(struct soap*, const struct ns4__SetTestParameters *, const char*, const char*);

inline int soap_write_ns4__SetTestParameters(struct soap *soap, struct ns4__SetTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetTestParameters(soap, p), 0) || ::soap_put_ns4__SetTestParameters(soap, p, "ns4:SetTestParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetTestParameters(struct soap *soap, const char *URL, struct ns4__SetTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestParameters(soap, p), 0) || ::soap_put_ns4__SetTestParameters(soap, p, "ns4:SetTestParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetTestParameters(struct soap *soap, const char *URL, struct ns4__SetTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestParameters(soap, p), 0) || ::soap_put_ns4__SetTestParameters(soap, p, "ns4:SetTestParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetTestParameters(struct soap *soap, const char *URL, struct ns4__SetTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestParameters(soap, p), 0) || ::soap_put_ns4__SetTestParameters(soap, p, "ns4:SetTestParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetTestParameters * SOAP_FMAC4 soap_get_ns4__SetTestParameters(struct soap*, struct ns4__SetTestParameters *, const char*, const char*);

inline int soap_read_ns4__SetTestParameters(struct soap *soap, struct ns4__SetTestParameters *p)
{
	if (p)
	{	::soap_default_ns4__SetTestParameters(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetTestParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetTestParameters(struct soap *soap, const char *URL, struct ns4__SetTestParameters *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetTestParameters(struct soap *soap, struct ns4__SetTestParameters *p)
{
	if (::soap_read_ns4__SetTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__SetTestParametersResponse_DEFINED
#define SOAP_TYPE_ns4__SetTestParametersResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__SetTestParametersResponse(struct soap*, struct ns4__SetTestParametersResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__SetTestParametersResponse(struct soap*, const struct ns4__SetTestParametersResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SetTestParametersResponse(struct soap*, const char*, int, const struct ns4__SetTestParametersResponse *, const char*);
SOAP_FMAC3 struct ns4__SetTestParametersResponse * SOAP_FMAC4 soap_in_ns4__SetTestParametersResponse(struct soap*, const char*, struct ns4__SetTestParametersResponse *, const char*);
SOAP_FMAC1 struct ns4__SetTestParametersResponse * SOAP_FMAC2 soap_instantiate_ns4__SetTestParametersResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__SetTestParametersResponse * soap_new_ns4__SetTestParametersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__SetTestParametersResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__SetTestParametersResponse * soap_new_req_ns4__SetTestParametersResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetTestParametersResponse *_p = ::soap_new_ns4__SetTestParametersResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetTestParametersResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__SetTestParametersResponse * soap_new_set_ns4__SetTestParametersResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__SetTestParametersResponse *_p = ::soap_new_ns4__SetTestParametersResponse(soap);
	if (_p)
	{	::soap_default_ns4__SetTestParametersResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__SetTestParametersResponse(struct soap*, const struct ns4__SetTestParametersResponse *, const char*, const char*);

inline int soap_write_ns4__SetTestParametersResponse(struct soap *soap, struct ns4__SetTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__SetTestParametersResponse(soap, p), 0) || ::soap_put_ns4__SetTestParametersResponse(soap, p, "ns4:SetTestParametersResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__SetTestParametersResponse(struct soap *soap, const char *URL, struct ns4__SetTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestParametersResponse(soap, p), 0) || ::soap_put_ns4__SetTestParametersResponse(soap, p, "ns4:SetTestParametersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__SetTestParametersResponse(struct soap *soap, const char *URL, struct ns4__SetTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestParametersResponse(soap, p), 0) || ::soap_put_ns4__SetTestParametersResponse(soap, p, "ns4:SetTestParametersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__SetTestParametersResponse(struct soap *soap, const char *URL, struct ns4__SetTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__SetTestParametersResponse(soap, p), 0) || ::soap_put_ns4__SetTestParametersResponse(soap, p, "ns4:SetTestParametersResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__SetTestParametersResponse * SOAP_FMAC4 soap_get_ns4__SetTestParametersResponse(struct soap*, struct ns4__SetTestParametersResponse *, const char*, const char*);

inline int soap_read_ns4__SetTestParametersResponse(struct soap *soap, struct ns4__SetTestParametersResponse *p)
{
	if (p)
	{	::soap_default_ns4__SetTestParametersResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__SetTestParametersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__SetTestParametersResponse(struct soap *soap, const char *URL, struct ns4__SetTestParametersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__SetTestParametersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__SetTestParametersResponse(struct soap *soap, struct ns4__SetTestParametersResponse *p)
{
	if (::soap_read_ns4__SetTestParametersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTestParameters_DEFINED
#define SOAP_TYPE_ns4__GetTestParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTestParameters(struct soap*, struct ns4__GetTestParameters *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTestParameters(struct soap*, const struct ns4__GetTestParameters *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTestParameters(struct soap*, const char*, int, const struct ns4__GetTestParameters *, const char*);
SOAP_FMAC3 struct ns4__GetTestParameters * SOAP_FMAC4 soap_in_ns4__GetTestParameters(struct soap*, const char*, struct ns4__GetTestParameters *, const char*);
SOAP_FMAC1 struct ns4__GetTestParameters * SOAP_FMAC2 soap_instantiate_ns4__GetTestParameters(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTestParameters * soap_new_ns4__GetTestParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTestParameters(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTestParameters * soap_new_req_ns4__GetTestParameters(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetTestParameters *_p = ::soap_new_ns4__GetTestParameters(soap);
	if (_p)
	{	::soap_default_ns4__GetTestParameters(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}

inline struct ns4__GetTestParameters * soap_new_set_ns4__GetTestParameters(
	struct soap *soap,
	int Bench,
	const std::string& TestName)
{
	struct ns4__GetTestParameters *_p = ::soap_new_ns4__GetTestParameters(soap);
	if (_p)
	{	::soap_default_ns4__GetTestParameters(soap, _p);
		_p->Bench = Bench;
		_p->TestName = TestName;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTestParameters(struct soap*, const struct ns4__GetTestParameters *, const char*, const char*);

inline int soap_write_ns4__GetTestParameters(struct soap *soap, struct ns4__GetTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTestParameters(soap, p), 0) || ::soap_put_ns4__GetTestParameters(soap, p, "ns4:GetTestParameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTestParameters(struct soap *soap, const char *URL, struct ns4__GetTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestParameters(soap, p), 0) || ::soap_put_ns4__GetTestParameters(soap, p, "ns4:GetTestParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTestParameters(struct soap *soap, const char *URL, struct ns4__GetTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestParameters(soap, p), 0) || ::soap_put_ns4__GetTestParameters(soap, p, "ns4:GetTestParameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTestParameters(struct soap *soap, const char *URL, struct ns4__GetTestParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestParameters(soap, p), 0) || ::soap_put_ns4__GetTestParameters(soap, p, "ns4:GetTestParameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTestParameters * SOAP_FMAC4 soap_get_ns4__GetTestParameters(struct soap*, struct ns4__GetTestParameters *, const char*, const char*);

inline int soap_read_ns4__GetTestParameters(struct soap *soap, struct ns4__GetTestParameters *p)
{
	if (p)
	{	::soap_default_ns4__GetTestParameters(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTestParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTestParameters(struct soap *soap, const char *URL, struct ns4__GetTestParameters *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTestParameters(struct soap *soap, struct ns4__GetTestParameters *p)
{
	if (::soap_read_ns4__GetTestParameters(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTestParametersResponse_DEFINED
#define SOAP_TYPE_ns4__GetTestParametersResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTestParametersResponse(struct soap*, struct ns4__GetTestParametersResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTestParametersResponse(struct soap*, const struct ns4__GetTestParametersResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTestParametersResponse(struct soap*, const char*, int, const struct ns4__GetTestParametersResponse *, const char*);
SOAP_FMAC3 struct ns4__GetTestParametersResponse * SOAP_FMAC4 soap_in_ns4__GetTestParametersResponse(struct soap*, const char*, struct ns4__GetTestParametersResponse *, const char*);
SOAP_FMAC1 struct ns4__GetTestParametersResponse * SOAP_FMAC2 soap_instantiate_ns4__GetTestParametersResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTestParametersResponse * soap_new_ns4__GetTestParametersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTestParametersResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTestParametersResponse * soap_new_req_ns4__GetTestParametersResponse(
	struct soap *soap)
{
	struct ns4__GetTestParametersResponse *_p = ::soap_new_ns4__GetTestParametersResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTestParametersResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetTestParametersResponse * soap_new_set_ns4__GetTestParametersResponse(
	struct soap *soap,
	ns3__TTestParameters *return_)
{
	struct ns4__GetTestParametersResponse *_p = ::soap_new_ns4__GetTestParametersResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTestParametersResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTestParametersResponse(struct soap*, const struct ns4__GetTestParametersResponse *, const char*, const char*);

inline int soap_write_ns4__GetTestParametersResponse(struct soap *soap, struct ns4__GetTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTestParametersResponse(soap, p), 0) || ::soap_put_ns4__GetTestParametersResponse(soap, p, "ns4:GetTestParametersResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTestParametersResponse(struct soap *soap, const char *URL, struct ns4__GetTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestParametersResponse(soap, p), 0) || ::soap_put_ns4__GetTestParametersResponse(soap, p, "ns4:GetTestParametersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTestParametersResponse(struct soap *soap, const char *URL, struct ns4__GetTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestParametersResponse(soap, p), 0) || ::soap_put_ns4__GetTestParametersResponse(soap, p, "ns4:GetTestParametersResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTestParametersResponse(struct soap *soap, const char *URL, struct ns4__GetTestParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTestParametersResponse(soap, p), 0) || ::soap_put_ns4__GetTestParametersResponse(soap, p, "ns4:GetTestParametersResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTestParametersResponse * SOAP_FMAC4 soap_get_ns4__GetTestParametersResponse(struct soap*, struct ns4__GetTestParametersResponse *, const char*, const char*);

inline int soap_read_ns4__GetTestParametersResponse(struct soap *soap, struct ns4__GetTestParametersResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetTestParametersResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTestParametersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTestParametersResponse(struct soap *soap, const char *URL, struct ns4__GetTestParametersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTestParametersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTestParametersResponse(struct soap *soap, struct ns4__GetTestParametersResponse *p)
{
	if (::soap_read_ns4__GetTestParametersResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__NewMeasurement_DEFINED
#define SOAP_TYPE_ns4__NewMeasurement_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__NewMeasurement(struct soap*, struct ns4__NewMeasurement *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__NewMeasurement(struct soap*, const struct ns4__NewMeasurement *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__NewMeasurement(struct soap*, const char*, int, const struct ns4__NewMeasurement *, const char*);
SOAP_FMAC3 struct ns4__NewMeasurement * SOAP_FMAC4 soap_in_ns4__NewMeasurement(struct soap*, const char*, struct ns4__NewMeasurement *, const char*);
SOAP_FMAC1 struct ns4__NewMeasurement * SOAP_FMAC2 soap_instantiate_ns4__NewMeasurement(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__NewMeasurement * soap_new_ns4__NewMeasurement(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__NewMeasurement(soap, n, NULL, NULL, NULL);
}

inline struct ns4__NewMeasurement * soap_new_req_ns4__NewMeasurement(
	struct soap *soap,
	int Bench,
	const std::string& TypeName,
	bool ArchiveData)
{
	struct ns4__NewMeasurement *_p = ::soap_new_ns4__NewMeasurement(soap);
	if (_p)
	{	::soap_default_ns4__NewMeasurement(soap, _p);
		_p->Bench = Bench;
		_p->TypeName = TypeName;
		_p->ArchiveData = ArchiveData;
	}
	return _p;
}

inline struct ns4__NewMeasurement * soap_new_set_ns4__NewMeasurement(
	struct soap *soap,
	int Bench,
	const std::string& TypeName,
	bool ArchiveData)
{
	struct ns4__NewMeasurement *_p = ::soap_new_ns4__NewMeasurement(soap);
	if (_p)
	{	::soap_default_ns4__NewMeasurement(soap, _p);
		_p->Bench = Bench;
		_p->TypeName = TypeName;
		_p->ArchiveData = ArchiveData;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__NewMeasurement(struct soap*, const struct ns4__NewMeasurement *, const char*, const char*);

inline int soap_write_ns4__NewMeasurement(struct soap *soap, struct ns4__NewMeasurement const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__NewMeasurement(soap, p), 0) || ::soap_put_ns4__NewMeasurement(soap, p, "ns4:NewMeasurement", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__NewMeasurement(struct soap *soap, const char *URL, struct ns4__NewMeasurement const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__NewMeasurement(soap, p), 0) || ::soap_put_ns4__NewMeasurement(soap, p, "ns4:NewMeasurement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__NewMeasurement(struct soap *soap, const char *URL, struct ns4__NewMeasurement const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__NewMeasurement(soap, p), 0) || ::soap_put_ns4__NewMeasurement(soap, p, "ns4:NewMeasurement", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__NewMeasurement(struct soap *soap, const char *URL, struct ns4__NewMeasurement const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__NewMeasurement(soap, p), 0) || ::soap_put_ns4__NewMeasurement(soap, p, "ns4:NewMeasurement", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__NewMeasurement * SOAP_FMAC4 soap_get_ns4__NewMeasurement(struct soap*, struct ns4__NewMeasurement *, const char*, const char*);

inline int soap_read_ns4__NewMeasurement(struct soap *soap, struct ns4__NewMeasurement *p)
{
	if (p)
	{	::soap_default_ns4__NewMeasurement(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__NewMeasurement(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__NewMeasurement(struct soap *soap, const char *URL, struct ns4__NewMeasurement *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__NewMeasurement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__NewMeasurement(struct soap *soap, struct ns4__NewMeasurement *p)
{
	if (::soap_read_ns4__NewMeasurement(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__NewMeasurementResponse_DEFINED
#define SOAP_TYPE_ns4__NewMeasurementResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__NewMeasurementResponse(struct soap*, struct ns4__NewMeasurementResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__NewMeasurementResponse(struct soap*, const struct ns4__NewMeasurementResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__NewMeasurementResponse(struct soap*, const char*, int, const struct ns4__NewMeasurementResponse *, const char*);
SOAP_FMAC3 struct ns4__NewMeasurementResponse * SOAP_FMAC4 soap_in_ns4__NewMeasurementResponse(struct soap*, const char*, struct ns4__NewMeasurementResponse *, const char*);
SOAP_FMAC1 struct ns4__NewMeasurementResponse * SOAP_FMAC2 soap_instantiate_ns4__NewMeasurementResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__NewMeasurementResponse * soap_new_ns4__NewMeasurementResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__NewMeasurementResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__NewMeasurementResponse * soap_new_req_ns4__NewMeasurementResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__NewMeasurementResponse *_p = ::soap_new_ns4__NewMeasurementResponse(soap);
	if (_p)
	{	::soap_default_ns4__NewMeasurementResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}

inline struct ns4__NewMeasurementResponse * soap_new_set_ns4__NewMeasurementResponse(
	struct soap *soap,
	enum ns3__TResult return_)
{
	struct ns4__NewMeasurementResponse *_p = ::soap_new_ns4__NewMeasurementResponse(soap);
	if (_p)
	{	::soap_default_ns4__NewMeasurementResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__NewMeasurementResponse(struct soap*, const struct ns4__NewMeasurementResponse *, const char*, const char*);

inline int soap_write_ns4__NewMeasurementResponse(struct soap *soap, struct ns4__NewMeasurementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__NewMeasurementResponse(soap, p), 0) || ::soap_put_ns4__NewMeasurementResponse(soap, p, "ns4:NewMeasurementResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__NewMeasurementResponse(struct soap *soap, const char *URL, struct ns4__NewMeasurementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__NewMeasurementResponse(soap, p), 0) || ::soap_put_ns4__NewMeasurementResponse(soap, p, "ns4:NewMeasurementResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__NewMeasurementResponse(struct soap *soap, const char *URL, struct ns4__NewMeasurementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__NewMeasurementResponse(soap, p), 0) || ::soap_put_ns4__NewMeasurementResponse(soap, p, "ns4:NewMeasurementResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__NewMeasurementResponse(struct soap *soap, const char *URL, struct ns4__NewMeasurementResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__NewMeasurementResponse(soap, p), 0) || ::soap_put_ns4__NewMeasurementResponse(soap, p, "ns4:NewMeasurementResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__NewMeasurementResponse * SOAP_FMAC4 soap_get_ns4__NewMeasurementResponse(struct soap*, struct ns4__NewMeasurementResponse *, const char*, const char*);

inline int soap_read_ns4__NewMeasurementResponse(struct soap *soap, struct ns4__NewMeasurementResponse *p)
{
	if (p)
	{	::soap_default_ns4__NewMeasurementResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__NewMeasurementResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__NewMeasurementResponse(struct soap *soap, const char *URL, struct ns4__NewMeasurementResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__NewMeasurementResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__NewMeasurementResponse(struct soap *soap, struct ns4__NewMeasurementResponse *p)
{
	if (::soap_read_ns4__NewMeasurementResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTypeList_DEFINED
#define SOAP_TYPE_ns4__GetTypeList_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTypeList(struct soap*, struct ns4__GetTypeList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTypeList(struct soap*, const struct ns4__GetTypeList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTypeList(struct soap*, const char*, int, const struct ns4__GetTypeList *, const char*);
SOAP_FMAC3 struct ns4__GetTypeList * SOAP_FMAC4 soap_in_ns4__GetTypeList(struct soap*, const char*, struct ns4__GetTypeList *, const char*);
SOAP_FMAC1 struct ns4__GetTypeList * SOAP_FMAC2 soap_instantiate_ns4__GetTypeList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTypeList * soap_new_ns4__GetTypeList(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTypeList(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTypeList * soap_new_req_ns4__GetTypeList(
	struct soap *soap)
{
	struct ns4__GetTypeList *_p = ::soap_new_ns4__GetTypeList(soap);
	if (_p)
	{	::soap_default_ns4__GetTypeList(soap, _p);
	}
	return _p;
}

inline struct ns4__GetTypeList * soap_new_set_ns4__GetTypeList(
	struct soap *soap)
{
	struct ns4__GetTypeList *_p = ::soap_new_ns4__GetTypeList(soap);
	if (_p)
	{	::soap_default_ns4__GetTypeList(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTypeList(struct soap*, const struct ns4__GetTypeList *, const char*, const char*);

inline int soap_write_ns4__GetTypeList(struct soap *soap, struct ns4__GetTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTypeList(soap, p), 0) || ::soap_put_ns4__GetTypeList(soap, p, "ns4:GetTypeList", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTypeList(struct soap *soap, const char *URL, struct ns4__GetTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTypeList(soap, p), 0) || ::soap_put_ns4__GetTypeList(soap, p, "ns4:GetTypeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTypeList(struct soap *soap, const char *URL, struct ns4__GetTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTypeList(soap, p), 0) || ::soap_put_ns4__GetTypeList(soap, p, "ns4:GetTypeList", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTypeList(struct soap *soap, const char *URL, struct ns4__GetTypeList const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTypeList(soap, p), 0) || ::soap_put_ns4__GetTypeList(soap, p, "ns4:GetTypeList", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTypeList * SOAP_FMAC4 soap_get_ns4__GetTypeList(struct soap*, struct ns4__GetTypeList *, const char*, const char*);

inline int soap_read_ns4__GetTypeList(struct soap *soap, struct ns4__GetTypeList *p)
{
	if (p)
	{	::soap_default_ns4__GetTypeList(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTypeList(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTypeList(struct soap *soap, const char *URL, struct ns4__GetTypeList *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTypeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTypeList(struct soap *soap, struct ns4__GetTypeList *p)
{
	if (::soap_read_ns4__GetTypeList(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_ns4__GetTypeListResponse_DEFINED
#define SOAP_TYPE_ns4__GetTypeListResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__GetTypeListResponse(struct soap*, struct ns4__GetTypeListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns4__GetTypeListResponse(struct soap*, const struct ns4__GetTypeListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__GetTypeListResponse(struct soap*, const char*, int, const struct ns4__GetTypeListResponse *, const char*);
SOAP_FMAC3 struct ns4__GetTypeListResponse * SOAP_FMAC4 soap_in_ns4__GetTypeListResponse(struct soap*, const char*, struct ns4__GetTypeListResponse *, const char*);
SOAP_FMAC1 struct ns4__GetTypeListResponse * SOAP_FMAC2 soap_instantiate_ns4__GetTypeListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns4__GetTypeListResponse * soap_new_ns4__GetTypeListResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns4__GetTypeListResponse(soap, n, NULL, NULL, NULL);
}

inline struct ns4__GetTypeListResponse * soap_new_req_ns4__GetTypeListResponse(
	struct soap *soap)
{
	struct ns4__GetTypeListResponse *_p = ::soap_new_ns4__GetTypeListResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTypeListResponse(soap, _p);
	}
	return _p;
}

inline struct ns4__GetTypeListResponse * soap_new_set_ns4__GetTypeListResponse(
	struct soap *soap,
	TStringDynArray *return_)
{
	struct ns4__GetTypeListResponse *_p = ::soap_new_ns4__GetTypeListResponse(soap);
	if (_p)
	{	::soap_default_ns4__GetTypeListResponse(soap, _p);
		_p->return_ = return_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__GetTypeListResponse(struct soap*, const struct ns4__GetTypeListResponse *, const char*, const char*);

inline int soap_write_ns4__GetTypeListResponse(struct soap *soap, struct ns4__GetTypeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_ns4__GetTypeListResponse(soap, p), 0) || ::soap_put_ns4__GetTypeListResponse(soap, p, "ns4:GetTypeListResponse", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns4__GetTypeListResponse(struct soap *soap, const char *URL, struct ns4__GetTypeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTypeListResponse(soap, p), 0) || ::soap_put_ns4__GetTypeListResponse(soap, p, "ns4:GetTypeListResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns4__GetTypeListResponse(struct soap *soap, const char *URL, struct ns4__GetTypeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTypeListResponse(soap, p), 0) || ::soap_put_ns4__GetTypeListResponse(soap, p, "ns4:GetTypeListResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns4__GetTypeListResponse(struct soap *soap, const char *URL, struct ns4__GetTypeListResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_ns4__GetTypeListResponse(soap, p), 0) || ::soap_put_ns4__GetTypeListResponse(soap, p, "ns4:GetTypeListResponse", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct ns4__GetTypeListResponse * SOAP_FMAC4 soap_get_ns4__GetTypeListResponse(struct soap*, struct ns4__GetTypeListResponse *, const char*, const char*);

inline int soap_read_ns4__GetTypeListResponse(struct soap *soap, struct ns4__GetTypeListResponse *p)
{
	if (p)
	{	::soap_default_ns4__GetTypeListResponse(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_ns4__GetTypeListResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns4__GetTypeListResponse(struct soap *soap, const char *URL, struct ns4__GetTypeListResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_ns4__GetTypeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns4__GetTypeListResponse(struct soap *soap, struct ns4__GetTypeListResponse *p)
{
	if (::soap_read_ns4__GetTypeListResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTons3__TPressTestResult_DEFINED
#define SOAP_TYPE_PointerTons3__TPressTestResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TPressTestResult(struct soap*, ns3__TPressTestResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TPressTestResult(struct soap*, const char *, int, ns3__TPressTestResult *const*, const char *);
SOAP_FMAC3 ns3__TPressTestResult ** SOAP_FMAC4 soap_in_PointerTons3__TPressTestResult(struct soap*, const char*, ns3__TPressTestResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TPressTestResult(struct soap*, ns3__TPressTestResult *const*, const char*, const char*);
SOAP_FMAC3 ns3__TPressTestResult ** SOAP_FMAC4 soap_get_PointerTons3__TPressTestResult(struct soap*, ns3__TPressTestResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TTestResult_DEFINED
#define SOAP_TYPE_PointerTons3__TTestResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TTestResult(struct soap*, ns3__TTestResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TTestResult(struct soap*, const char *, int, ns3__TTestResult *const*, const char *);
SOAP_FMAC3 ns3__TTestResult ** SOAP_FMAC4 soap_in_PointerTons3__TTestResult(struct soap*, const char*, ns3__TTestResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TTestResult(struct soap*, ns3__TTestResult *const*, const char*, const char*);
SOAP_FMAC3 ns3__TTestResult ** SOAP_FMAC4 soap_get_PointerTons3__TTestResult(struct soap*, ns3__TTestResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TTestResults_DEFINED
#define SOAP_TYPE_PointerTons3__TTestResults_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TTestResults(struct soap*, ns3__TTestResults *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TTestResults(struct soap*, const char *, int, ns3__TTestResults *const*, const char *);
SOAP_FMAC3 ns3__TTestResults ** SOAP_FMAC4 soap_in_PointerTons3__TTestResults(struct soap*, const char*, ns3__TTestResults **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TTestResults(struct soap*, ns3__TTestResults *const*, const char*, const char*);
SOAP_FMAC3 ns3__TTestResults ** SOAP_FMAC4 soap_get_PointerTons3__TTestResults(struct soap*, ns3__TTestResults **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TMeasurementData_DEFINED
#define SOAP_TYPE_PointerTons3__TMeasurementData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TMeasurementData(struct soap*, ns3__TMeasurementData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TMeasurementData(struct soap*, const char *, int, ns3__TMeasurementData *const*, const char *);
SOAP_FMAC3 ns3__TMeasurementData ** SOAP_FMAC4 soap_in_PointerTons3__TMeasurementData(struct soap*, const char*, ns3__TMeasurementData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TMeasurementData(struct soap*, ns3__TMeasurementData *const*, const char*, const char*);
SOAP_FMAC3 ns3__TMeasurementData ** SOAP_FMAC4 soap_get_PointerTons3__TMeasurementData(struct soap*, ns3__TMeasurementData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToTBooleanDynArray_DEFINED
#define SOAP_TYPE_PointerToTBooleanDynArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTBooleanDynArray(struct soap*, TBooleanDynArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTBooleanDynArray(struct soap*, const char *, int, TBooleanDynArray *const*, const char *);
SOAP_FMAC3 TBooleanDynArray ** SOAP_FMAC4 soap_in_PointerToTBooleanDynArray(struct soap*, const char*, TBooleanDynArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTBooleanDynArray(struct soap*, TBooleanDynArray *const*, const char*, const char*);
SOAP_FMAC3 TBooleanDynArray ** SOAP_FMAC4 soap_get_PointerToTBooleanDynArray(struct soap*, TBooleanDynArray **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToTMeterIndications_DEFINED
#define SOAP_TYPE_PointerToTMeterIndications_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTMeterIndications(struct soap*, TMeterIndications *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTMeterIndications(struct soap*, const char *, int, TMeterIndications *const*, const char *);
SOAP_FMAC3 TMeterIndications ** SOAP_FMAC4 soap_in_PointerToTMeterIndications(struct soap*, const char*, TMeterIndications **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTMeterIndications(struct soap*, TMeterIndications *const*, const char*, const char*);
SOAP_FMAC3 TMeterIndications ** SOAP_FMAC4 soap_get_PointerToTMeterIndications(struct soap*, TMeterIndications **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToTIntegerDynArray_DEFINED
#define SOAP_TYPE_PointerToTIntegerDynArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTIntegerDynArray(struct soap*, TIntegerDynArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTIntegerDynArray(struct soap*, const char *, int, TIntegerDynArray *const*, const char *);
SOAP_FMAC3 TIntegerDynArray ** SOAP_FMAC4 soap_in_PointerToTIntegerDynArray(struct soap*, const char*, TIntegerDynArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTIntegerDynArray(struct soap*, TIntegerDynArray *const*, const char*, const char*);
SOAP_FMAC3 TIntegerDynArray ** SOAP_FMAC4 soap_get_PointerToTIntegerDynArray(struct soap*, TIntegerDynArray **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToTMetersData_DEFINED
#define SOAP_TYPE_PointerToTMetersData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTMetersData(struct soap*, TMetersData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTMetersData(struct soap*, const char *, int, TMetersData *const*, const char *);
SOAP_FMAC3 TMetersData ** SOAP_FMAC4 soap_in_PointerToTMetersData(struct soap*, const char*, TMetersData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTMetersData(struct soap*, TMetersData *const*, const char*, const char*);
SOAP_FMAC3 TMetersData ** SOAP_FMAC4 soap_get_PointerToTMetersData(struct soap*, TMetersData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TStatus_DEFINED
#define SOAP_TYPE_PointerTons3__TStatus_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TStatus(struct soap*, ns3__TStatus *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TStatus(struct soap*, const char *, int, ns3__TStatus *const*, const char *);
SOAP_FMAC3 ns3__TStatus ** SOAP_FMAC4 soap_in_PointerTons3__TStatus(struct soap*, const char*, ns3__TStatus **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TStatus(struct soap*, ns3__TStatus *const*, const char*, const char*);
SOAP_FMAC3 ns3__TStatus ** SOAP_FMAC4 soap_get_PointerTons3__TStatus(struct soap*, ns3__TStatus **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TWaitEvents_DEFINED
#define SOAP_TYPE_PointerTons3__TWaitEvents_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TWaitEvents(struct soap*, ns3__TWaitEvents *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TWaitEvents(struct soap*, const char *, int, ns3__TWaitEvents *const*, const char *);
SOAP_FMAC3 ns3__TWaitEvents ** SOAP_FMAC4 soap_in_PointerTons3__TWaitEvents(struct soap*, const char*, ns3__TWaitEvents **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TWaitEvents(struct soap*, ns3__TWaitEvents *const*, const char*, const char*);
SOAP_FMAC3 ns3__TWaitEvents ** SOAP_FMAC4 soap_get_PointerTons3__TWaitEvents(struct soap*, ns3__TWaitEvents **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TPressTestParameters_DEFINED
#define SOAP_TYPE_PointerTons3__TPressTestParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TPressTestParameters(struct soap*, ns3__TPressTestParameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TPressTestParameters(struct soap*, const char *, int, ns3__TPressTestParameters *const*, const char *);
SOAP_FMAC3 ns3__TPressTestParameters ** SOAP_FMAC4 soap_in_PointerTons3__TPressTestParameters(struct soap*, const char*, ns3__TPressTestParameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TPressTestParameters(struct soap*, ns3__TPressTestParameters *const*, const char*, const char*);
SOAP_FMAC3 ns3__TPressTestParameters ** SOAP_FMAC4 soap_get_PointerTons3__TPressTestParameters(struct soap*, ns3__TPressTestParameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TTestParameters_DEFINED
#define SOAP_TYPE_PointerTons3__TTestParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TTestParameters(struct soap*, ns3__TTestParameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TTestParameters(struct soap*, const char *, int, ns3__TTestParameters *const*, const char *);
SOAP_FMAC3 ns3__TTestParameters ** SOAP_FMAC4 soap_in_PointerTons3__TTestParameters(struct soap*, const char*, ns3__TTestParameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TTestParameters(struct soap*, ns3__TTestParameters *const*, const char*, const char*);
SOAP_FMAC3 ns3__TTestParameters ** SOAP_FMAC4 soap_get_PointerTons3__TTestParameters(struct soap*, ns3__TTestParameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons3__TMeterResult_DEFINED
#define SOAP_TYPE_PointerToPointerTons3__TMeterResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__TMeterResult(struct soap*, ns3__TMeterResult **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__TMeterResult(struct soap*, const char *, int, ns3__TMeterResult **const*, const char *);
SOAP_FMAC3 ns3__TMeterResult *** SOAP_FMAC4 soap_in_PointerToPointerTons3__TMeterResult(struct soap*, const char*, ns3__TMeterResult ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__TMeterResult(struct soap*, ns3__TMeterResult **const*, const char*, const char*);
SOAP_FMAC3 ns3__TMeterResult *** SOAP_FMAC4 soap_get_PointerToPointerTons3__TMeterResult(struct soap*, ns3__TMeterResult ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TMeterResult_DEFINED
#define SOAP_TYPE_PointerTons3__TMeterResult_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TMeterResult(struct soap*, ns3__TMeterResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TMeterResult(struct soap*, const char *, int, ns3__TMeterResult *const*, const char *);
SOAP_FMAC3 ns3__TMeterResult ** SOAP_FMAC4 soap_in_PointerTons3__TMeterResult(struct soap*, const char*, ns3__TMeterResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TMeterResult(struct soap*, ns3__TMeterResult *const*, const char*, const char*);
SOAP_FMAC3 ns3__TMeterResult ** SOAP_FMAC4 soap_get_PointerTons3__TMeterResult(struct soap*, ns3__TMeterResult **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons3__TMeterIndication_DEFINED
#define SOAP_TYPE_PointerToPointerTons3__TMeterIndication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__TMeterIndication(struct soap*, ns3__TMeterIndication **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__TMeterIndication(struct soap*, const char *, int, ns3__TMeterIndication **const*, const char *);
SOAP_FMAC3 ns3__TMeterIndication *** SOAP_FMAC4 soap_in_PointerToPointerTons3__TMeterIndication(struct soap*, const char*, ns3__TMeterIndication ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__TMeterIndication(struct soap*, ns3__TMeterIndication **const*, const char*, const char*);
SOAP_FMAC3 ns3__TMeterIndication *** SOAP_FMAC4 soap_get_PointerToPointerTons3__TMeterIndication(struct soap*, ns3__TMeterIndication ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TMeterIndication_DEFINED
#define SOAP_TYPE_PointerTons3__TMeterIndication_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TMeterIndication(struct soap*, ns3__TMeterIndication *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TMeterIndication(struct soap*, const char *, int, ns3__TMeterIndication *const*, const char *);
SOAP_FMAC3 ns3__TMeterIndication ** SOAP_FMAC4 soap_in_PointerTons3__TMeterIndication(struct soap*, const char*, ns3__TMeterIndication **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TMeterIndication(struct soap*, ns3__TMeterIndication *const*, const char*, const char*);
SOAP_FMAC3 ns3__TMeterIndication ** SOAP_FMAC4 soap_get_PointerTons3__TMeterIndication(struct soap*, ns3__TMeterIndication **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons3__TMeterData_DEFINED
#define SOAP_TYPE_PointerToPointerTons3__TMeterData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons3__TMeterData(struct soap*, ns3__TMeterData **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons3__TMeterData(struct soap*, const char *, int, ns3__TMeterData **const*, const char *);
SOAP_FMAC3 ns3__TMeterData *** SOAP_FMAC4 soap_in_PointerToPointerTons3__TMeterData(struct soap*, const char*, ns3__TMeterData ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons3__TMeterData(struct soap*, ns3__TMeterData **const*, const char*, const char*);
SOAP_FMAC3 ns3__TMeterData *** SOAP_FMAC4 soap_get_PointerToPointerTons3__TMeterData(struct soap*, ns3__TMeterData ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons3__TMeterData_DEFINED
#define SOAP_TYPE_PointerTons3__TMeterData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TMeterData(struct soap*, ns3__TMeterData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TMeterData(struct soap*, const char *, int, ns3__TMeterData *const*, const char *);
SOAP_FMAC3 ns3__TMeterData ** SOAP_FMAC4 soap_in_PointerTons3__TMeterData(struct soap*, const char*, ns3__TMeterData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TMeterData(struct soap*, ns3__TMeterData *const*, const char*, const char*);
SOAP_FMAC3 ns3__TMeterData ** SOAP_FMAC4 soap_get_PointerTons3__TMeterData(struct soap*, ns3__TMeterData **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTobool_DEFINED
#define SOAP_TYPE_PointerTobool_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToTMeterResults_DEFINED
#define SOAP_TYPE_PointerToTMeterResults_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTMeterResults(struct soap*, TMeterResults *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTMeterResults(struct soap*, const char *, int, TMeterResults *const*, const char *);
SOAP_FMAC3 TMeterResults ** SOAP_FMAC4 soap_in_PointerToTMeterResults(struct soap*, const char*, TMeterResults **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTMeterResults(struct soap*, TMeterResults *const*, const char*, const char*);
SOAP_FMAC3 TMeterResults ** SOAP_FMAC4 soap_get_PointerToTMeterResults(struct soap*, TMeterResults **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToTStringDynArray_DEFINED
#define SOAP_TYPE_PointerToTStringDynArray_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToTStringDynArray(struct soap*, TStringDynArray *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToTStringDynArray(struct soap*, const char *, int, TStringDynArray *const*, const char *);
SOAP_FMAC3 TStringDynArray ** SOAP_FMAC4 soap_in_PointerToTStringDynArray(struct soap*, const char*, TStringDynArray **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToTStringDynArray(struct soap*, TStringDynArray *const*, const char*, const char*);
SOAP_FMAC3 TStringDynArray ** SOAP_FMAC4 soap_get_PointerToTStringDynArray(struct soap*, TStringDynArray **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_XML_DEFINED
#define SOAP_TYPE_PointerTo_XML_DEFINED
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

/* End of soapH.h */
