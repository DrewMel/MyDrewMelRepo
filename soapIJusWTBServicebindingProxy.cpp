/* soapIJusWTBServicebindingProxy.cpp
   Generated by gSOAP 2.8.111 for .\testbench.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapIJusWTBServicebindingProxy.h"

/*
IJusWTBServicebindingProxy::IJusWTBServicebindingProxy()
{	this->soap = soap_new();
	this->soap_own = true; 
	IJusWTBServicebindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

IJusWTBServicebindingProxy::IJusWTBServicebindingProxy(const IJusWTBServicebindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

IJusWTBServicebindingProxy::IJusWTBServicebindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	IJusWTBServicebindingProxy_init(_soap->imode, _soap->omode);
}

IJusWTBServicebindingProxy::IJusWTBServicebindingProxy(struct soap *_soap, const char *soap_endpoint_url)
{	this->soap = _soap;
	this->soap_own = false;
	IJusWTBServicebindingProxy_init(_soap->imode, _soap->omode);
	soap_endpoint = soap_endpoint_url;
}

IJusWTBServicebindingProxy::IJusWTBServicebindingProxy(const char *soap_endpoint_url)
{	this->soap = soap_new();
	this->soap_own = true;
	IJusWTBServicebindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

IJusWTBServicebindingProxy::IJusWTBServicebindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	IJusWTBServicebindingProxy_init(iomode, iomode);
}

IJusWTBServicebindingProxy::IJusWTBServicebindingProxy(const char *soap_endpoint_url, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	IJusWTBServicebindingProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

IJusWTBServicebindingProxy::IJusWTBServicebindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	IJusWTBServicebindingProxy_init(imode, omode);
}
*/
IJusWTBServicebindingProxy::~IJusWTBServicebindingProxy()
{	if (this->soap_own)
	{	this->destroy();
		soap_free(this->soap);
	}
}

void IJusWTBServicebindingProxy::IJusWTBServicebindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL },
        { "SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns3", "urn:JusWTBServiceIntf", NULL, NULL },
        { "ns4", "urn:JusWTBServiceIntf-IJusWTBService", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}
/*
IJusWTBServicebindingProxy *IJusWTBServicebindingProxy::copy()
{	IJusWTBServicebindingProxy *dup = SOAP_NEW_UNMANAGED(IJusWTBServicebindingProxy);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}*/

IJusWTBServicebindingProxy& IJusWTBServicebindingProxy::operator=(const IJusWTBServicebindingProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void IJusWTBServicebindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void IJusWTBServicebindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	IJusWTBServicebindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void IJusWTBServicebindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *IJusWTBServicebindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *IJusWTBServicebindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *IJusWTBServicebindingProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this->soap);
}

const char *IJusWTBServicebindingProxy::soap_fault_string()
{	return ::soap_fault_string(this->soap);
}

const char *IJusWTBServicebindingProxy::soap_fault_detail()
{	return ::soap_fault_detail(this->soap);
}

int IJusWTBServicebindingProxy::soap_close_socket()
{	return ::soap_closesock(this->soap);
}

int IJusWTBServicebindingProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this->soap);
}

void IJusWTBServicebindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void IJusWTBServicebindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *IJusWTBServicebindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int IJusWTBServicebindingProxy::send_GetTypeList(const char *soap_endpoint_url, const char *soap_action)
{
	struct ns4__GetTypeList soap_tmp_ns4__GetTypeList;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetTypeList";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetTypeList(soap, &soap_tmp_ns4__GetTypeList);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetTypeList(soap, &soap_tmp_ns4__GetTypeList, "ns4:GetTypeList", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetTypeList(soap, &soap_tmp_ns4__GetTypeList, "ns4:GetTypeList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetTypeList(struct ns4__GetTypeListResponse &_param_1)
{
	soap_default_ns4__GetTypeListResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetTypeListResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_NewMeasurement(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TypeName, bool ArchiveData)
{
	struct ns4__NewMeasurement soap_tmp_ns4__NewMeasurement;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#NewMeasurement";
	soap_tmp_ns4__NewMeasurement.Bench = Bench;
	soap_tmp_ns4__NewMeasurement.TypeName = TypeName;
	soap_tmp_ns4__NewMeasurement.ArchiveData = ArchiveData;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__NewMeasurement(soap, &soap_tmp_ns4__NewMeasurement);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__NewMeasurement(soap, &soap_tmp_ns4__NewMeasurement, "ns4:NewMeasurement", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__NewMeasurement(soap, &soap_tmp_ns4__NewMeasurement, "ns4:NewMeasurement", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_NewMeasurement(struct ns4__NewMeasurementResponse &_param_1)
{
	soap_default_ns4__NewMeasurementResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__NewMeasurementResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName)
{
	struct ns4__GetTestParameters soap_tmp_ns4__GetTestParameters;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetTestParameters";
	soap_tmp_ns4__GetTestParameters.Bench = Bench;
	soap_tmp_ns4__GetTestParameters.TestName = TestName;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetTestParameters(soap, &soap_tmp_ns4__GetTestParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetTestParameters(soap, &soap_tmp_ns4__GetTestParameters, "ns4:GetTestParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetTestParameters(soap, &soap_tmp_ns4__GetTestParameters, "ns4:GetTestParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetTestParameters(struct ns4__GetTestParametersResponse &_param_1)
{
	soap_default_ns4__GetTestParametersResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetTestParametersResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_SetTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, ns3__TTestParameters *TestParameters, bool CreateTest)
{
	struct ns4__SetTestParameters soap_tmp_ns4__SetTestParameters;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#SetTestParameters";
	soap_tmp_ns4__SetTestParameters.Bench = Bench;
	soap_tmp_ns4__SetTestParameters.TestName = TestName;
	soap_tmp_ns4__SetTestParameters.TestParameters = TestParameters;
	soap_tmp_ns4__SetTestParameters.CreateTest = CreateTest;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__SetTestParameters(soap, &soap_tmp_ns4__SetTestParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__SetTestParameters(soap, &soap_tmp_ns4__SetTestParameters, "ns4:SetTestParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__SetTestParameters(soap, &soap_tmp_ns4__SetTestParameters, "ns4:SetTestParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_SetTestParameters(struct ns4__SetTestParametersResponse &_param_1)
{
	soap_default_ns4__SetTestParametersResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__SetTestParametersResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetPressTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName)
{
	struct ns4__GetPressTestParameters soap_tmp_ns4__GetPressTestParameters;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetPressTestParameters";
	soap_tmp_ns4__GetPressTestParameters.Bench = Bench;
	soap_tmp_ns4__GetPressTestParameters.TestName = TestName;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetPressTestParameters(soap, &soap_tmp_ns4__GetPressTestParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetPressTestParameters(soap, &soap_tmp_ns4__GetPressTestParameters, "ns4:GetPressTestParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetPressTestParameters(soap, &soap_tmp_ns4__GetPressTestParameters, "ns4:GetPressTestParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetPressTestParameters(struct ns4__GetPressTestParametersResponse &_param_1)
{
	soap_default_ns4__GetPressTestParametersResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetPressTestParametersResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_SetPressTestParameters(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, ns3__TPressTestParameters *TestParameters, bool CreateTest)
{
	struct ns4__SetPressTestParameters soap_tmp_ns4__SetPressTestParameters;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#SetPressTestParameters";
	soap_tmp_ns4__SetPressTestParameters.Bench = Bench;
	soap_tmp_ns4__SetPressTestParameters.TestName = TestName;
	soap_tmp_ns4__SetPressTestParameters.TestParameters = TestParameters;
	soap_tmp_ns4__SetPressTestParameters.CreateTest = CreateTest;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__SetPressTestParameters(soap, &soap_tmp_ns4__SetPressTestParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__SetPressTestParameters(soap, &soap_tmp_ns4__SetPressTestParameters, "ns4:SetPressTestParameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__SetPressTestParameters(soap, &soap_tmp_ns4__SetPressTestParameters, "ns4:SetPressTestParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_SetPressTestParameters(struct ns4__SetPressTestParametersResponse &_param_1)
{
	soap_default_ns4__SetPressTestParametersResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__SetPressTestParametersResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_Start(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, ns3__TWaitEvents *WaitEvents)
{
	struct ns4__Start soap_tmp_ns4__Start;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#Start";
	soap_tmp_ns4__Start.Bench = Bench;
	soap_tmp_ns4__Start.TestName = TestName;
	soap_tmp_ns4__Start.WaitEvents = WaitEvents;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__Start(soap, &soap_tmp_ns4__Start);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__Start(soap, &soap_tmp_ns4__Start, "ns4:Start", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__Start(soap, &soap_tmp_ns4__Start, "ns4:Start", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_Start(struct ns4__StartResponse &_param_1)
{
	soap_default_ns4__StartResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__StartResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_Stop(const char *soap_endpoint_url, const char *soap_action, int Bench)
{
	struct ns4__Stop soap_tmp_ns4__Stop;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#Stop";
	soap_tmp_ns4__Stop.Bench = Bench;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__Stop(soap, &soap_tmp_ns4__Stop);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__Stop(soap, &soap_tmp_ns4__Stop, "ns4:Stop", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__Stop(soap, &soap_tmp_ns4__Stop, "ns4:Stop", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_Stop(struct ns4__StopResponse &_param_1)
{
	soap_default_ns4__StopResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__StopResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_Continue(const char *soap_endpoint_url, const char *soap_action, int Bench)
{
	struct ns4__Continue soap_tmp_ns4__Continue;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#Continue";
	soap_tmp_ns4__Continue.Bench = Bench;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__Continue(soap, &soap_tmp_ns4__Continue);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__Continue(soap, &soap_tmp_ns4__Continue, "ns4:Continue", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__Continue(soap, &soap_tmp_ns4__Continue, "ns4:Continue", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_Continue(struct ns4__ContinueResponse &_param_1)
{
	soap_default_ns4__ContinueResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__ContinueResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetStatus(const char *soap_endpoint_url, const char *soap_action, int Bench)
{
	struct ns4__GetStatus soap_tmp_ns4__GetStatus;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetStatus";
	soap_tmp_ns4__GetStatus.Bench = Bench;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetStatus(soap, &soap_tmp_ns4__GetStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetStatus(soap, &soap_tmp_ns4__GetStatus, "ns4:GetStatus", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetStatus(soap, &soap_tmp_ns4__GetStatus, "ns4:GetStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetStatus(struct ns4__GetStatusResponse &_param_1)
{
	soap_default_ns4__GetStatusResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetStatusResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_SetMetersData(const char *soap_endpoint_url, const char *soap_action, int Bench, TMetersData *MetersData)
{
	struct ns4__SetMetersData soap_tmp_ns4__SetMetersData;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#SetMetersData";
	soap_tmp_ns4__SetMetersData.Bench = Bench;
	soap_tmp_ns4__SetMetersData.MetersData = MetersData;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__SetMetersData(soap, &soap_tmp_ns4__SetMetersData);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__SetMetersData(soap, &soap_tmp_ns4__SetMetersData, "ns4:SetMetersData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__SetMetersData(soap, &soap_tmp_ns4__SetMetersData, "ns4:SetMetersData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_SetMetersData(struct ns4__SetMetersDataResponse &_param_1)
{
	soap_default_ns4__SetMetersDataResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__SetMetersDataResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetMetersData(const char *soap_endpoint_url, const char *soap_action, int Bench, TIntegerDynArray *MetersPos)
{
	struct ns4__GetMetersData soap_tmp_ns4__GetMetersData;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetMetersData";
	soap_tmp_ns4__GetMetersData.Bench = Bench;
	soap_tmp_ns4__GetMetersData.MetersPos = MetersPos;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetMetersData(soap, &soap_tmp_ns4__GetMetersData);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetMetersData(soap, &soap_tmp_ns4__GetMetersData, "ns4:GetMetersData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetMetersData(soap, &soap_tmp_ns4__GetMetersData, "ns4:GetMetersData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetMetersData(struct ns4__GetMetersDataResponse &_param_1)
{
	soap_default_ns4__GetMetersDataResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetMetersDataResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetMeterData(const char *soap_endpoint_url, const char *soap_action, int Bench, int MeterPos)
{
	struct ns4__GetMeterData soap_tmp_ns4__GetMeterData;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetMeterData";
	soap_tmp_ns4__GetMeterData.Bench = Bench;
	soap_tmp_ns4__GetMeterData.MeterPos = MeterPos;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetMeterData(soap, &soap_tmp_ns4__GetMeterData);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetMeterData(soap, &soap_tmp_ns4__GetMeterData, "ns4:GetMeterData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetMeterData(soap, &soap_tmp_ns4__GetMeterData, "ns4:GetMeterData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetMeterData(struct ns4__GetMeterDataResponse &_param_1)
{
	soap_default_ns4__GetMeterDataResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetMeterDataResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_SetMeterIndications(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, TMeterIndications *MeterIndications)
{
	struct ns4__SetMeterIndications soap_tmp_ns4__SetMeterIndications;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#SetMeterIndications";
	soap_tmp_ns4__SetMeterIndications.Bench = Bench;
	soap_tmp_ns4__SetMeterIndications.TestName = TestName;
	soap_tmp_ns4__SetMeterIndications.MeterIndications = MeterIndications;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__SetMeterIndications(soap, &soap_tmp_ns4__SetMeterIndications);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__SetMeterIndications(soap, &soap_tmp_ns4__SetMeterIndications, "ns4:SetMeterIndications", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__SetMeterIndications(soap, &soap_tmp_ns4__SetMeterIndications, "ns4:SetMeterIndications", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_SetMeterIndications(struct ns4__SetMeterIndicationsResponse &_param_1)
{
	soap_default_ns4__SetMeterIndicationsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__SetMeterIndicationsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetMeterPositions(const char *soap_endpoint_url, const char *soap_action, int Bench)
{
	struct ns4__GetMeterPositions soap_tmp_ns4__GetMeterPositions;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetMeterPositions";
	soap_tmp_ns4__GetMeterPositions.Bench = Bench;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetMeterPositions(soap, &soap_tmp_ns4__GetMeterPositions);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetMeterPositions(soap, &soap_tmp_ns4__GetMeterPositions, "ns4:GetMeterPositions", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetMeterPositions(soap, &soap_tmp_ns4__GetMeterPositions, "ns4:GetMeterPositions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetMeterPositions(struct ns4__GetMeterPositionsResponse &_param_1)
{
	soap_default_ns4__GetMeterPositionsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetMeterPositionsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetMeasurementData(const char *soap_endpoint_url, const char *soap_action, int Bench)
{
	struct ns4__GetMeasurementData soap_tmp_ns4__GetMeasurementData;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetMeasurementData";
	soap_tmp_ns4__GetMeasurementData.Bench = Bench;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetMeasurementData(soap, &soap_tmp_ns4__GetMeasurementData);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetMeasurementData(soap, &soap_tmp_ns4__GetMeasurementData, "ns4:GetMeasurementData", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetMeasurementData(soap, &soap_tmp_ns4__GetMeasurementData, "ns4:GetMeasurementData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetMeasurementData(struct ns4__GetMeasurementDataResponse &_param_1)
{
	soap_default_ns4__GetMeasurementDataResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetMeasurementDataResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetTestResults(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, TIntegerDynArray *MetersPos)
{
	struct ns4__GetTestResults soap_tmp_ns4__GetTestResults;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetTestResults";
	soap_tmp_ns4__GetTestResults.Bench = Bench;
	soap_tmp_ns4__GetTestResults.TestName = TestName;
	soap_tmp_ns4__GetTestResults.MetersPos = MetersPos;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetTestResults(soap, &soap_tmp_ns4__GetTestResults);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetTestResults(soap, &soap_tmp_ns4__GetTestResults, "ns4:GetTestResults", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetTestResults(soap, &soap_tmp_ns4__GetTestResults, "ns4:GetTestResults", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetTestResults(struct ns4__GetTestResultsResponse &_param_1)
{
	soap_default_ns4__GetTestResultsResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetTestResultsResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetMeterResult(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, int MeterPos)
{
	struct ns4__GetMeterResult soap_tmp_ns4__GetMeterResult;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetMeterResult";
	soap_tmp_ns4__GetMeterResult.Bench = Bench;
	soap_tmp_ns4__GetMeterResult.TestName = TestName;
	soap_tmp_ns4__GetMeterResult.MeterPos = MeterPos;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetMeterResult(soap, &soap_tmp_ns4__GetMeterResult);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetMeterResult(soap, &soap_tmp_ns4__GetMeterResult, "ns4:GetMeterResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetMeterResult(soap, &soap_tmp_ns4__GetMeterResult, "ns4:GetMeterResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetMeterResult(struct ns4__GetMeterResultResponse &_param_1)
{
	soap_default_ns4__GetMeterResultResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetMeterResultResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetTestResult(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName)
{
	struct ns4__GetTestResult soap_tmp_ns4__GetTestResult;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetTestResult";
	soap_tmp_ns4__GetTestResult.Bench = Bench;
	soap_tmp_ns4__GetTestResult.TestName = TestName;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetTestResult(soap, &soap_tmp_ns4__GetTestResult);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetTestResult(soap, &soap_tmp_ns4__GetTestResult, "ns4:GetTestResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetTestResult(soap, &soap_tmp_ns4__GetTestResult, "ns4:GetTestResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetTestResult(struct ns4__GetTestResultResponse &_param_1)
{
	soap_default_ns4__GetTestResultResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetTestResultResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetPressTestResult(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName)
{
	struct ns4__GetPressTestResult soap_tmp_ns4__GetPressTestResult;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetPressTestResult";
	soap_tmp_ns4__GetPressTestResult.Bench = Bench;
	soap_tmp_ns4__GetPressTestResult.TestName = TestName;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetPressTestResult(soap, &soap_tmp_ns4__GetPressTestResult);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetPressTestResult(soap, &soap_tmp_ns4__GetPressTestResult, "ns4:GetPressTestResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetPressTestResult(soap, &soap_tmp_ns4__GetPressTestResult, "ns4:GetPressTestResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetPressTestResult(struct ns4__GetPressTestResultResponse &_param_1)
{
	soap_default_ns4__GetPressTestResultResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__GetPressTestResultResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_GetTestConfiguration(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName)
{
	struct ns4__GetTestConfiguration soap_tmp_ns4__GetTestConfiguration;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#GetTestConfiguration";
	soap_tmp_ns4__GetTestConfiguration.Bench = Bench;
	soap_tmp_ns4__GetTestConfiguration.TestName = TestName;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__GetTestConfiguration(soap, &soap_tmp_ns4__GetTestConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__GetTestConfiguration(soap, &soap_tmp_ns4__GetTestConfiguration, "ns4:GetTestConfiguration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__GetTestConfiguration(soap, &soap_tmp_ns4__GetTestConfiguration, "ns4:GetTestConfiguration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_GetTestConfiguration(std::string &return_)
{
	struct ns4__GetTestConfigurationResponse *soap_tmp_ns4__GetTestConfigurationResponse;
	soap_default_std__string(soap, &return_);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns4__GetTestConfigurationResponse = soap_get_ns4__GetTestConfigurationResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns4__GetTestConfigurationResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return_ = soap_tmp_ns4__GetTestConfigurationResponse->return_;
	return soap_closesock(soap);
}

int IJusWTBServicebindingProxy::send_SetTestConfiguration(const char *soap_endpoint_url, const char *soap_action, int Bench, const std::string& TestName, const std::string& Configuration)
{
	struct ns4__SetTestConfiguration soap_tmp_ns4__SetTestConfiguration;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:8080/soap/IJusWTBService";
	if (soap_action == NULL)
		soap_action = "urn:JusWTBServiceIntf-IJusWTBService#SetTestConfiguration";
	soap_tmp_ns4__SetTestConfiguration.Bench = Bench;
	soap_tmp_ns4__SetTestConfiguration.TestName = TestName;
	soap_tmp_ns4__SetTestConfiguration.Configuration = Configuration;
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"; /* use SOAP encoding style */
	soap_serializeheader(soap);
	soap_serialize_ns4__SetTestConfiguration(soap, &soap_tmp_ns4__SetTestConfiguration);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns4__SetTestConfiguration(soap, &soap_tmp_ns4__SetTestConfiguration, "ns4:SetTestConfiguration", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns4__SetTestConfiguration(soap, &soap_tmp_ns4__SetTestConfiguration, "ns4:SetTestConfiguration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int IJusWTBServicebindingProxy::recv_SetTestConfiguration(struct ns4__SetTestConfigurationResponse &_param_1)
{
	soap_default_ns4__SetTestConfigurationResponse(soap, &_param_1);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_get_ns4__SetTestConfigurationResponse(soap, &_param_1, "", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
